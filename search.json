[{"path":"https://docs.ropensci.org/biomartr/CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://docs.ropensci.org/biomartr/FAQs.html","id":null,"dir":"","previous_headings":"","what":"FAQs","title":"FAQs","text":"Short Answer: NCBI Ensembl limit server access individual connections. Hence, hundreds retrieval queries sent download hundreds genomes, may happen queries get cancelled certain count. case, simply re-run corresponding meta.retrieval function pick left . Short Answer: biomartr designed retrieval big datasets multiple genomes, proteomes, annotation, etc whereas biomaRt designed retrieval small data sequences individual genes can retrieve GO terms human genes using ensembl gene IDs? can download coding sequences protein sequences sequenced species? can Download human reference genome fasta format?","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/BioMart_Examples.html","id":"use-case-1-functional-annotation-of-genes-sharing-a-common-evolutionary-history","dir":"Articles","previous_headings":"","what":"Use Case #1: Functional Annotation of Genes Sharing a Common Evolutionary History","title":"Ensembl BioMart Examples","text":"Evolutionary Transcriptomics aims predict stages periods evolutionary conservation biological processes transcriptome level. However, finding genes sharing common evolutionary history reveal biological process might evolved first place. Use Case combine functional biological annotation obtained biomartr enriched genes obtained PlotEnrichment().","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/BioMart_Examples.html","id":"step-1","dir":"Articles","previous_headings":"Use Case #1: Functional Annotation of Genes Sharing a Common Evolutionary History","what":"Step 1","title":"Ensembl BioMart Examples","text":"following example use dataset enrichment analyses found PlotEnrichment(). Install load myTAI package: Download Phylostratigraphic Map D. rerio: dataset comes Supplementary file 3 publication: https://academic.oup.com/mbe/article/32/2/299/1058654#77837069 downloading Supplementary file 3, find file TableS3-2.xlsx can used following biomartr functions. Read *.xlsx file storing Phylostratigraphic Map D. rerio format use myTAI: Now, Drerio.PhyloMap stores Phylostratigraphic Map D. rerio used background set perform enrichment analyses PlotEnrichment() myTAI.","code":"# install myTAI install.packages(\"myTAI\")  # load myTAI library(myTAI) # download the Phylostratigraphic Map of Danio rerio # from Sestak and Domazet-Loso, 2015 # install the readxl package install.packages(\"readxl\")  # load package readxl library(readxl)  # read the excel file DrerioPhyloMap.MBEa <- read_excel(\"TableS3-2.xlsx\", sheet = 1, skip = 4)  # format Phylostratigraphic Map for use with myTAI Drerio.PhyloMap <- DrerioPhyloMap.MBEa[ , 1:2]  # have a look at the final format head(Drerio.PhyloMap) Phylostrata            ZFIN_ID 1           1 ZDB-GENE-000208-13 2           1 ZDB-GENE-000208-17 3           1 ZDB-GENE-000208-18 4           1 ZDB-GENE-000208-23 5           1  ZDB-GENE-000209-3 6           1  ZDB-GENE-000209-4"},{"path":"https://docs.ropensci.org/biomartr/articles/BioMart_Examples.html","id":"enrichment-analyses","dir":"Articles","previous_headings":"Use Case #1: Functional Annotation of Genes Sharing a Common Evolutionary History","what":"Enrichment Analyses","title":"Ensembl BioMart Examples","text":"Now, PlotEnrichment() function visualizes - underrepresented Phylostrata brain specific genes compared total number genes stored Phylostratigraphic Map D. rerio. Users observe example brain genes deriving PS5 significantly enriched. Now can select brain genes originating PS5 using SelectGeneSet() function myTAI. Please notice SelectGeneSet() can used phylostratigraphic maps (use.map.= TRUE argument) since myTAI version > 0.3.0. Now users can perform biomart() function obtain functional annotation brain genes originating PS5. purpose, first need find filter name corresponding gene ids ZDB-GENE-000210-6. Now users can retrieve corresponding GO attribute D. rerio organismAttributes. Now users can specify filter zfin_id attribute go_id retrieve GO terms corresponding gene ids (Please note take time).","code":"library(readxl)  # read expression data (organ specific genes) from Sestak and Domazet-Loso, 2015 Drerio.OrganSpecificExpression <- read_excel(\"TableS3-2.xlsx\", sheet = 2, skip = 3)  # select only brain specific genes Drerio.Brain.Genes <- unlist(unique(na.omit(Drerio.OrganSpecificExpression[ , \"brain\"])))  # visualize enriched Phylostrata of genes annotated as brain specific PlotEnrichment(Drerio.PhyloMap,                test.set     = Drerio.Brain.Genes,                measure      = \"foldchange\",                use.only.map = TRUE,                legendName   = \"PS\") BrainGenes <- SelectGeneSet(ExpressionSet = Drerio.PhyloMap,                             gene.set      = Drerio.Brain.Genes,                             use.only.map  = TRUE)  # select only brain genes originating in PS5 BrainGenes.PS5 <- BrainGenes[which(BrainGenes[ , \"Phylostrata\"] == 5), ]  # look at the results head(BrainGenes.PS5) Phylostrata           ZFIN_ID 14851           5 ZDB-GENE-000210-6 14852           5 ZDB-GENE-000210-7 14853           5 ZDB-GENE-000328-4 14856           5 ZDB-GENE-000411-1 14857           5 ZDB-GENE-000427-4 14860           5 ZDB-GENE-000526-1 # find filter for zfin.org ids organismFilters(\"Danio rerio\", topic = \"zfin_id\") name                           description             dataset 52                  with_zfin_id                       with ZFIN ID(s) drerio_gene_ensembl 53  with_zfin_id_transcript_name          with ZFIN transcript name(s) drerio_gene_ensembl 103                      zfin_id ZFIN ID(s) [e.g. ZDB-GENE-060825-136] drerio_gene_ensembl 274                 with_zfin_id                       with ZFIN ID(s)    drerio_gene_vega 286                      zfin_id ZFIN ID(s) [e.g. ZDB-GENE-121214-212]    drerio_gene_vega 366                 with_zfin_id                       with ZFIN ID(s) drerio_gene_ensembl 367 with_zfin_id_transcript_name          with ZFIN transcript name(s) drerio_gene_ensembl 417                      zfin_id ZFIN ID(s) [e.g. ZDB-GENE-060825-136] drerio_gene_ensembl 588                 with_zfin_id                       with ZFIN ID(s)    drerio_gene_vega 600                      zfin_id ZFIN ID(s) [e.g. ZDB-GENE-121214-212]    drerio_gene_vega 680                 with_zfin_id                       with ZFIN ID(s) drerio_gene_ensembl 681 with_zfin_id_transcript_name          with ZFIN transcript name(s) drerio_gene_ensembl 731                      zfin_id ZFIN ID(s) [e.g. ZDB-GENE-060825-136] drerio_gene_ensembl 902                 with_zfin_id                       with ZFIN ID(s)    drerio_gene_vega 914                      zfin_id ZFIN ID(s) [e.g. ZDB-GENE-121214-212]    drerio_gene_vega                     mart 52  ENSEMBL_MART_ENSEMBL 53  ENSEMBL_MART_ENSEMBL 103 ENSEMBL_MART_ENSEMBL 274 ENSEMBL_MART_ENSEMBL 286 ENSEMBL_MART_ENSEMBL 366 ENSEMBL_MART_ENSEMBL 367 ENSEMBL_MART_ENSEMBL 417 ENSEMBL_MART_ENSEMBL 588 ENSEMBL_MART_ENSEMBL 600 ENSEMBL_MART_ENSEMBL 680 ENSEMBL_MART_ENSEMBL 681 ENSEMBL_MART_ENSEMBL 731 ENSEMBL_MART_ENSEMBL 902 ENSEMBL_MART_ENSEMBL 914 ENSEMBL_MART_ENSEMBL # find go attribute term for D. rerio organismAttributes(\"Danio rerio\", topic = \"go\") name                             description 33                                           go_id                       GO Term Accession 36                                 go_linkage_type                   GO Term Evidence Code 38                            goslim_goa_accession                 GOSlim GOA Accession(s) 39                          goslim_goa_description                  GOSlim GOA Description 516                  ggorilla_homolog_ensembl_gene                 Gorilla Ensembl Gene ID 517  ggorilla_homolog_canomical_transcript_protein      Canonical Protein or Transcript ID 518               ggorilla_homolog_ensembl_peptide              Gorilla Ensembl Protein ID 519                    ggorilla_homolog_chromosome                 Gorilla Chromosome Name 520                   ggorilla_homolog_chrom_start           Gorilla Chromosome Start (bp) 521                     ggorilla_homolog_chrom_end             Gorilla Chromosome End (bp) 522                ggorilla_homolog_orthology_type                           Homology Type 523                       ggorilla_homolog_subtype                                Ancestor 524          ggorilla_homolog_orthology_confidence    Orthology confidence [0 low, 1 high] 525                       ggorilla_homolog_perc_id   % Identity with respect to query gene 526                    ggorilla_homolog_perc_id_r1 % Identity with respect to Gorilla gene 527                            ggorilla_homolog_dn                                      dN 528                            ggorilla_homolog_ds                                      dS 1240                                         go_id                                   GO ID 1241                                      quick_go                             Quick GO ID 1370                                         go_id                       GO Term Accession 1373                               go_linkage_type                   GO Term Evidence Code 1375                          goslim_goa_accession                 GOSlim GOA Accession(s) 1376                        goslim_goa_description                  GOSlim GOA Description 1853                 ggorilla_homolog_ensembl_gene                 Gorilla Ensembl Gene ID 1854 ggorilla_homolog_canomical_transcript_protein      Canonical Protein or Transcript ID 1855              ggorilla_homolog_ensembl_peptide              Gorilla Ensembl Protein ID 1856                   ggorilla_homolog_chromosome                 Gorilla Chromosome Name 1857                  ggorilla_homolog_chrom_start           Gorilla Chromosome Start (bp) 1858                    ggorilla_homolog_chrom_end             Gorilla Chromosome End (bp) 1859               ggorilla_homolog_orthology_type                           Homology Type 1860                      ggorilla_homolog_subtype                                Ancestor 1861         ggorilla_homolog_orthology_confidence    Orthology confidence [0 low, 1 high] 1862                      ggorilla_homolog_perc_id   % Identity with respect to query gene 1863                   ggorilla_homolog_perc_id_r1 % Identity with respect to Gorilla gene 1864                           ggorilla_homolog_dn                                      dN 1865                           ggorilla_homolog_ds                                      dS 2577                                         go_id                                   GO ID 2578                                      quick_go                             Quick GO ID 2707                                         go_id                       GO Term Accession 2710                               go_linkage_type                   GO Term Evidence Code 2712                          goslim_goa_accession                 GOSlim GOA Accession(s) 2713                        goslim_goa_description                  GOSlim GOA Description 3190                 ggorilla_homolog_ensembl_gene                 Gorilla Ensembl Gene ID 3191 ggorilla_homolog_canomical_transcript_protein      Canonical Protein or Transcript ID 3192              ggorilla_homolog_ensembl_peptide              Gorilla Ensembl Protein ID 3193                   ggorilla_homolog_chromosome                 Gorilla Chromosome Name 3194                  ggorilla_homolog_chrom_start           Gorilla Chromosome Start (bp) 3195                    ggorilla_homolog_chrom_end             Gorilla Chromosome End (bp) 3196               ggorilla_homolog_orthology_type                           Homology Type 3197                      ggorilla_homolog_subtype                                Ancestor 3198         ggorilla_homolog_orthology_confidence    Orthology confidence [0 low, 1 high] 3199                      ggorilla_homolog_perc_id   % Identity with respect to query gene 3200                   ggorilla_homolog_perc_id_r1 % Identity with respect to Gorilla gene 3201                           ggorilla_homolog_dn                                      dN 3202                           ggorilla_homolog_ds                                      dS 3914                                         go_id                                   GO ID 3915                                      quick_go                             Quick GO ID                  dataset                 mart 33   drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 36   drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 38   drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 39   drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 516  drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 517  drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 518  drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 519  drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 520  drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 521  drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 522  drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 523  drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 524  drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 525  drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 526  drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 527  drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 528  drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 1240    drerio_gene_vega ENSEMBL_MART_ENSEMBL 1241    drerio_gene_vega ENSEMBL_MART_ENSEMBL 1370 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 1373 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 1375 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 1376 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 1853 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 1854 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 1855 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 1856 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 1857 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 1858 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 1859 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 1860 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 1861 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 1862 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 1863 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 1864 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 1865 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 2577    drerio_gene_vega ENSEMBL_MART_ENSEMBL 2578    drerio_gene_vega ENSEMBL_MART_ENSEMBL 2707 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 2710 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 2712 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 2713 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 3190 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 3191 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 3192 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 3193 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 3194 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 3195 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 3196 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 3197 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 3198 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 3199 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 3200 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 3201 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 3202 drerio_gene_ensembl ENSEMBL_MART_ENSEMBL 3914    drerio_gene_vega ENSEMBL_MART_ENSEMBL 3915    drerio_gene_vega ENSEMBL_MART_ENSEMBL # retrieve GO terms of D. rerio brain genes originating in PS5 GO_tbl.BrainGenes <- biomart(genes      = unlist(BrainGenes.PS5[ , \"ZFIN_ID\"]),                              mart       = \"ENSEMBL_MART_ENSEMBL\",                              dataset    = \"drerio_gene_ensembl\",                              attributes = \"go_id\",                              filters    = \"zfin_id\")  head(GO_tbl.BrainGenes) zfin_id      go_id 1 ZDB-GENE-000210-6 GO:0060037 2 ZDB-GENE-000210-6 GO:0046983 3 ZDB-GENE-000210-7 GO:0046983 4 ZDB-GENE-000328-4 GO:0007275 5 ZDB-GENE-000328-4 GO:0007166 6 ZDB-GENE-000328-4 GO:0035567"},{"path":"https://docs.ropensci.org/biomartr/articles/Database_Retrieval.html","id":"retrieve-sequence-databases-from-ncbi","dir":"Articles","previous_headings":"","what":"Retrieve Sequence Databases from NCBI","title":"NCBI Database Retrieval","text":"NOTE: make sure sufficiently stable (internet) connection R respective databases, please set default timeout setting local machine 60sec least 300000sec running retrieval functions via:","code":"options(timeout = 300000)"},{"path":"https://docs.ropensci.org/biomartr/articles/Database_Retrieval.html","id":"getting-started","dir":"Articles","previous_headings":"Retrieve Sequence Databases from NCBI","what":"Getting Started","title":"NCBI Database Retrieval","text":"NCBI stores variety specialized database Genbank, RefSeq, Taxonomy, SNP, etc. servers. download.database() download.database.() functions implemented biomartr allows users download databases NCBI. process might useful downstream analyses sequence searches e.g. BLAST. purpose see R package metablastr aims seamlessly integrate biomartr based genomic data retrieval downstream large-scale BLAST searches. 1. List available NCBI databases listNCBIDatabases() 2.1 Example NCBI nr retrieval 2.2 Example NCBI nt retrieval 2.3 Example NCBI RefSeq retrieval 2.4 Example Protein Database (PDB) retrieval 2.5 Example NCBI Taxonomy retrieval 2.6 Example NCBI Swissprot retrieval 2.7 Example NCBI CDD Delta retrieval","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/Database_Retrieval.html","id":"list-available-databases","dir":"Articles","previous_headings":"Retrieve Sequence Databases from NCBI","what":"List available databases","title":"NCBI Database Retrieval","text":"downloading specific databases NCBI users might want list available databases. Using listNCBIDatabases() function users can retrieve list available databases stored NCBI. However, case users already know database like retrieve can filter exact files specifying NCBI database name. following example sequence files part NCBI nr database shall retrieved. First, listNCBIDatabases(db = \"nr\") allows list files corresponding nr database. output illustrates NCBI nr database separated several sub-data-packages. examples : Please lookup retrieval function work properly sufficient internet connection provided. next step users can use listNCBIDatabases() download.database.() functions retrieve files corresponding specific NCBI database.","code":"# retrieve a list of available sequence databases at NCBI biomartr::listNCBIDatabases(db = \"all\") [1] \"16S_ribosomal_RNA\"                     \"16S_ribosomal_RNA-nucl-metadata\"        [3] \"18S_fungal_sequences\"                  \"18S_fungal_sequences-nucl-metadata\"     [5] \"28S_fungal_sequences\"                  \"28S_fungal_sequences-nucl-metadata\"     [7] \"Betacoronavirus\"                       \"Betacoronavirus-nucl-metadata\"          [9] \"blastdb-manifest\"                      \"blastdb-metadata-1-1\"                  [11] \"blastdbv5\"                             \"cdd_delta\"                             [13] \"cloud\"                                 \"env_nr\"                                [15] \"env_nr-prot-metadata\"                  \"env_nt\"                                [17] \"env_nt-nucl-metadata\"                  \"FASTA\"                                 [19] \"human_genome\"                          \"human_genome-nucl-metadata\"            [21] \"ITS_eukaryote_sequences\"               \"ITS_eukaryote_sequences-nucl-metadata\" [23] \"ITS_RefSeq_Fungi\"                      \"ITS_RefSeq_Fungi-nucl-metadata\"        [25] \"landmark\"                              \"landmark-prot-metadata\"                [27] \"LSU_eukaryote_rRNA\"                    \"LSU_eukaryote_rRNA-nucl-metadata\"      [29] \"LSU_prokaryote_rRNA\"                   \"LSU_prokaryote_rRNA-nucl-metadata\"     [31] \"mito\"                                  \"mito-nucl-metadata\"                    [33] \"mouse_genome\"                          \"mouse_genome-nucl-metadata\"            [35] \"nr\"                                    \"nr-prot-metadata\"                      [37] \"nt\"                                    \"nt-nucl-metadata\"                      [39] \"pataa\"                                 \"pataa-prot-metadata\"                   [41] \"patnt\"                                 \"patnt-nucl-metadata\"                   [43] \"pdbaa\"                                 \"pdbaa-prot-metadata\"                   [45] \"pdbnt\"                                 \"pdbnt-nucl-metadata\"                   [47] \"ref_euk_rep_genomes\"                   \"ref_euk_rep_genomes-nucl-metadata\"     [49] \"ref_prok_rep_genomes\"                  \"ref_prok_rep_genomes-nucl-metadata\"    [51] \"ref_viroids_rep_genomes\"               \"ref_viroids_rep_genomes-nucl-metadata\" [53] \"ref_viruses_rep_genomes\"               \"ref_viruses_rep_genomes-nucl-metadata\" [55] \"refseq_protein\"                        \"refseq_protein-prot-metadata\"          [57] \"refseq_rna\"                            \"refseq_rna-nucl-metadata\"              [59] \"refseq_select_prot\"                    \"refseq_select_prot-prot-metadata\"      [61] \"refseq_select_rna\"                     \"refseq_select_rna-nucl-metadata\"       [63] \"SSU_eukaryote_rRNA\"                    \"SSU_eukaryote_rRNA-nucl-metadata\"      [65] \"swissprot\"                             \"swissprot-prot-metadata\"               [67] \"taxdb\"                                 \"taxdb-metadata\"                        [69] \"tsa_nr\"                                \"tsa_nr-prot-metadata\"                  [71] \"tsa_nt\"                                \"tsa_nt-nucl-metadata\"                  [73] \"v4\"                                    \"v5\" # show all NCBI nr files biomartr::listNCBIDatabases(db = \"nr\") [1] \"nr.00.tar.gz\"          \"nr.01.tar.gz\"           [3] \"nr.02.tar.gz\"          \"nr.03.tar.gz\"           [5] \"nr.04.tar.gz\"          \"nr.05.tar.gz\"           [7] \"nr.06.tar.gz\"          \"nr.07.tar.gz\"           [9] \"nr.08.tar.gz\"          \"nr.09.tar.gz\"          [11] \"nr.10.tar.gz\"          \"nr.11.tar.gz\"          [13] \"nr.12.tar.gz\"          \"nr.13.tar.gz\"          [15] \"nr.14.tar.gz\"          \"nr.15.tar.gz\"          [17] \"nr.16.tar.gz\"          \"nr.17.tar.gz\"          [19] \"nr.18.tar.gz\"          \"nr.19.tar.gz\"          [21] \"nr.20.tar.gz\"          \"nr.21.tar.gz\"          [23] \"nr.22.tar.gz\"          \"nr.23.tar.gz\"          [25] \"nr.24.tar.gz\"          \"nr.25.tar.gz\"          [27] \"nr.26.tar.gz\"          \"nr.27.tar.gz\"          [29] \"nr.28.tar.gz\"          \"nr.29.tar.gz\"          [31] \"nr.30.tar.gz\"          \"nr.31.tar.gz\"          [33] \"nr.32.tar.gz\"          \"nr.33.tar.gz\"          [35] \"nr.34.tar.gz\"          \"nr.35.tar.gz\"          [37] \"nr.36.tar.gz\"          \"nr.37.tar.gz\"          [39] \"nr.38.tar.gz\"          \"nr.39.tar.gz\"          [41] \"nr.40.tar.gz\"          \"nr.41.tar.gz\"          [43] \"nr.42.tar.gz\"          \"nr.43.tar.gz\"          [45] \"nr.44.tar.gz\"          \"nr.45.tar.gz\"          [47] \"nr.46.tar.gz\"          \"nr-prot-metadata.json\" [49] \"nr.47.tar.gz\"          \"nr.48.tar.gz\"          [51] \"nr.49.tar.gz\"          \"nr.50.tar.gz\"          [53] \"nr.51.tar.gz\"          \"nr.52.tar.gz\"          [55] \"nr.53.tar.gz\"          \"nr.54.tar.gz\"          [57] \"nr.55.tar.gz\" # show all NCBI nt files biomartr::listNCBIDatabases(db = \"nt\") [1] \"nt.00.tar.gz\"          \"nt.01.tar.gz\"           [3] \"nt.02.tar.gz\"          \"nt.03.tar.gz\"           [5] \"nt.04.tar.gz\"          \"nt.05.tar.gz\"           [7] \"nt.06.tar.gz\"          \"nt.07.tar.gz\"           [9] \"nt.08.tar.gz\"          \"nt.09.tar.gz\"          [11] \"nt.10.tar.gz\"          \"nt.11.tar.gz\"          [13] \"nt.12.tar.gz\"          \"nt.13.tar.gz\"          [15] \"nt.14.tar.gz\"          \"nt.15.tar.gz\"          [17] \"nt.16.tar.gz\"          \"nt.17.tar.gz\"          [19] \"nt.18.tar.gz\"          \"nt.19.tar.gz\"          [21] \"nt.20.tar.gz\"          \"nt.21.tar.gz\"          [23] \"nt.22.tar.gz\"          \"nt.23.tar.gz\"          [25] \"nt.24.tar.gz\"          \"nt.25.tar.gz\"          [27] \"nt.26.tar.gz\"          \"nt.27.tar.gz\"          [29] \"nt.28.tar.gz\"          \"nt.29.tar.gz\"          [31] \"nt.30.tar.gz\"          \"nt.31.tar.gz\"          [33] \"nt.32.tar.gz\"          \"nt.33.tar.gz\"          [35] \"nt.34.tar.gz\"          \"nt.35.tar.gz\"          [37] \"nt.36.tar.gz\"          \"nt.37.tar.gz\"          [39] \"nt-nucl-metadata.json\" \"nt.38.tar.gz\"          [41] \"nt.39.tar.gz\"          \"nt.40.tar.gz\"          [43] \"nt.41.tar.gz\"          \"nt.42.tar.gz\"          [45] \"nt.43.tar.gz\"          \"nt.44.tar.gz\"          [47] \"nt.45.tar.gz\"          \"nt.46.tar.gz\"          [49] \"nt.47.tar.gz\"          \"nt.48.tar.gz\" # show all NCBI RefSeq (only proteomes) head(biomartr::listNCBIDatabases(db = \"refseq_protein\"), 20) [1] \"refseq_protein.00.tar.gz\" \"refseq_protein.01.tar.gz\"  [3] \"refseq_protein.02.tar.gz\" \"refseq_protein.03.tar.gz\"  [5] \"refseq_protein.04.tar.gz\" \"refseq_protein.05.tar.gz\"  [7] \"refseq_protein.06.tar.gz\" \"refseq_protein.07.tar.gz\"  [9] \"refseq_protein.08.tar.gz\" \"refseq_protein.09.tar.gz\" [11] \"refseq_protein.10.tar.gz\" \"refseq_protein.11.tar.gz\" [13] \"refseq_protein.12.tar.gz\" \"refseq_protein.13.tar.gz\" [15] \"refseq_protein.14.tar.gz\" \"refseq_protein.15.tar.gz\" [17] \"refseq_protein.16.tar.gz\" \"refseq_protein.17.tar.gz\" [19] \"refseq_protein.18.tar.gz\" \"refseq_protein.19.tar.gz\" # show all NCBI RefSeq (only RNA) biomartr::listNCBIDatabases(db = \"refseq_rna\") [1] \"refseq_rna.00.tar.gz\"          \"refseq_rna.01.tar.gz\"           [3] \"refseq_rna.02.tar.gz\"          \"refseq_rna.03.tar.gz\"           [5] \"refseq_rna.04.tar.gz\"          \"refseq_rna.05.tar.gz\"           [7] \"refseq_rna.06.tar.gz\"          \"refseq_rna.07.tar.gz\"           [9] \"refseq_rna.08.tar.gz\"          \"refseq_rna-nucl-metadata.json\" [11] \"refseq_rna.09.tar.gz\" # show NCBI swissprot biomartr::listNCBIDatabases(db = \"swissprot\") [1] \"swissprot.tar.gz\"             \"swissprot-prot-metadata.json\" # show NCBI PDB biomartr::listNCBIDatabases(db = \"pdb\") [1] \"pdbaa.tar.gz\"             \"pdbnt.tar.gz\"             [3] \"pdbaa-prot-metadata.json\" \"pdbnt-nucl-metadata.json\" # show NCBI Human database biomartr::listNCBIDatabases(db = \"human\") 1] \"human_genome.00.tar.gz\"          \"human_genome.01.tar.gz\"          [3] \"human_genome-nucl-metadata.json\""},{"path":"https://docs.ropensci.org/biomartr/articles/Database_Retrieval.html","id":"download-ncbi-databases","dir":"Articles","previous_headings":"Retrieve Sequence Databases from NCBI","what":"Download NCBI databases","title":"NCBI Database Retrieval","text":"Using search strategy specifying database name described , users can now download databases using download.database.() function. downloading single files users can type:","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/Database_Retrieval.html","id":"example-ncbi-nr","dir":"Articles","previous_headings":"Retrieve Sequence Databases from NCBI > Download NCBI databases","what":"Example NCBI nr","title":"NCBI Database Retrieval","text":"command download pre-formatted (makeblastdb formatted) database version retrieved. Using command, NCBI nr files loaded nr folder (path = \"nr\"). data package, biomartr checks md5checksum downloaded file file stored online make sure internet connection losses didn’t currupt file. case see warning message notifying -matching md5checksum values, please re-download corresponding data package re-running download.database.() command. experience can happen server connections internet connections stable download process large data chunks.","code":"# download the entire NCBI nr database biomartr::download.database.all(db = \"nr\", path = \"nr\")"},{"path":"https://docs.ropensci.org/biomartr/articles/Database_Retrieval.html","id":"example-ncbi-nt","dir":"Articles","previous_headings":"Retrieve Sequence Databases from NCBI > Download NCBI databases","what":"Example NCBI nt","title":"NCBI Database Retrieval","text":"approach can applied databases mentioned , e.g.:","code":"# download the entire NCBI nt database biomartr::download.database.all(db = \"nt\", path = \"nt\")"},{"path":"https://docs.ropensci.org/biomartr/articles/Database_Retrieval.html","id":"example-ncbi-refseq","dir":"Articles","previous_headings":"Retrieve Sequence Databases from NCBI > Download NCBI databases","what":"Example NCBI RefSeq","title":"NCBI Database Retrieval","text":"","code":"# download the entire NCBI refseq (protein) database biomartr::download.database.all(db = \"refseq_protein\", path = \"refseq_protein\")"},{"path":"https://docs.ropensci.org/biomartr/articles/Database_Retrieval.html","id":"example-pdb","dir":"Articles","previous_headings":"Retrieve Sequence Databases from NCBI > Download NCBI databases","what":"Example PDB","title":"NCBI Database Retrieval","text":"","code":"# download the entire NCBI PDB database biomartr::download.database.all(db = \"pdb\", path = \"pdb\")"},{"path":"https://docs.ropensci.org/biomartr/articles/Database_Retrieval.html","id":"example-ncbi-taxonomy","dir":"Articles","previous_headings":"Retrieve Sequence Databases from NCBI > Download NCBI databases","what":"Example NCBI Taxonomy","title":"NCBI Database Retrieval","text":"Download NCBI Taxonomy via:","code":"# download the entire NCBI taxonomy database biomartr::download.database.all(db = \"taxdb\", path = \"taxdb\") Starting download of the files: taxdb.tar.gz, taxdb.btd, taxdb.bti ... This download process may take a while due to the large size of the individual data chunks ... Starting download process of file: taxdb.tar.gz ... Checking md5 hash of file: taxdb.tar.gz ... The md5 hash of file 'taxdb.tar.gz' matches! File 'taxdb/taxdb.tar.gz has successfully been retrieved. Starting download process of file: taxdb.btd ... Checking md5 hash of file: taxdb.btd ... The md5 hash of file 'taxdb.btd' matches! File 'taxdb/taxdb.btd has successfully been retrieved. Starting download process of file: taxdb.bti ... Checking md5 hash of file: taxdb.bti ... The md5 hash of file 'taxdb.bti' matches! File 'taxdb/taxdb.bti has successfully been retrieved. Download process is finished and files are stored in 'taxdb'."},{"path":"https://docs.ropensci.org/biomartr/articles/Database_Retrieval.html","id":"example-ncbi-swissprot","dir":"Articles","previous_headings":"Retrieve Sequence Databases from NCBI > Download NCBI databases","what":"Example NCBI Swissprot","title":"NCBI Database Retrieval","text":"Download NCBI Swissprot via:","code":"# download the entire NCBI swissprot database biomartr::download.database.all(db = \"swissprot\", path = \"swissprot\")"},{"path":"https://docs.ropensci.org/biomartr/articles/Database_Retrieval.html","id":"example-ncbi-cdd-delta","dir":"Articles","previous_headings":"Retrieve Sequence Databases from NCBI > Download NCBI databases","what":"Example NCBI CDD Delta","title":"NCBI Database Retrieval","text":"Download NCBI CDD Delta via: data package, biomartr checks md5checksum downloaded file file stored online make sure internet connection losses didn’t currupt file. case see warning message notifying -matching md5checksum values, please re-download corresponding data package. experience can happen server connections internet connections stable download process large data chunks. Please notice databases large, users take providing stable internet connection throughout download process.","code":"# download the entire NCBI CDD Delta database biomartr::download.database.all(db = \"cdd_delta\", path = \"cdd_delta\")"},{"path":"https://docs.ropensci.org/biomartr/articles/Functional_Annotation.html","id":"functional-annotation-retrieval-from-ensembl-biomart","dir":"Articles","previous_headings":"","what":"Functional Annotation Retrieval from Ensembl Biomart","title":"Functional Annotation with biomartr","text":"NOTE: make sure sufficiently stable (internet) connection R respective databases, please set default timeout setting local machine 60sec least 30000sec running retrieval functions via:","code":"options(timeout = 30000)"},{"path":"https://docs.ropensci.org/biomartr/articles/Functional_Annotation.html","id":"getting-started","dir":"Articles","previous_headings":"Functional Annotation Retrieval from Ensembl Biomart","what":"Getting Started","title":"Functional Annotation with biomartr","text":"Ensembl Biomart database enables users retrieve vast diversity annotation data specific organisms. Initially, Steffen Durinck Wolfgang Huber provided powerful interface R language Ensembl Biomart implementing R package biomaRt. purpose biomaRt package mimic ENSEMBL BioMart database structure construct queries can sent Application Programming Interface (API) BioMart. Although, procedure useful past, seems intuitive organism centric point view. Usually, users wish download functional annotation particular organism interest. However, BioMart thus biomaRt package require users already know mart dataset organism interest found requires significant efforts searching screening. addition, mart dataset particular organism interest found specified user must learn attribute specified retrieve functional annotation information interest. new functionality implemented biomartr package aims overcome search bottleneck extending functionality biomaRt package. new biomartr package introduces organism cantered annotation retrieval concept require screen marts, datasets, attributes beforehand. biomartr users need specify scientific name organism interest retrieve available marts, datasets, attributes corresponding organism interest. paradigm shift enables users quickly construct queries BioMart database without learn particular database structure organization BioMart. following sections introduce users functionality data retrieval precedures biomartr show biomartr extends functionality initial biomaRt package.","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/Functional_Annotation.html","id":"the-old-biomart-query-methodology","dir":"Articles","previous_headings":"Functional Annotation Retrieval from Ensembl Biomart","what":"The old biomaRt query methodology","title":"Functional Annotation with biomartr","text":"best way get started old methodology presented established biomaRt package understand workflow data retrieval process. query logic biomaRt package derives database organization Ensembl Biomart stores vast diversity annotation data specific organisms. detail, Ensembl Biomart database organized called:marts, datasets, attributes. Marts denote higher level category functional annotation SNP (e.g. functional annotation particular single nucleotide polymorphisms (SNPs)) FUNCGEN (e.g. functional annotation regulatory regions relationsships genes). Datasets denote particular species interest functional annotation available within specific mart. can happen datasets (= particular species interest) available one mart (= higher category functional annotation) mart. actual retrieval functional annotation information users must specify type functional annotation information wish retrieve. types called attributes biomaRt notation. Hence, users wish retrieve information specific organism interest, first need specify particular mart dataset information corresponding organism interest can found. Subsequently can specify attributes argument retrieve particular type functional annotation (e.g. Gene Ontology terms). following section shall illustrate marts, datasets, attributes explored using biomaRt biomartr package existed. availability marts, datasets, attributes can checked following functions: Users observe several marts providing annotation specific classes organisms groups organisms available. example, choose hsapiens_gene_ensembl mart list available datasets element mart. useMart() function wrapper function provided biomaRt connect selected BioMart database (mart) corresponding dataset stored within mart. select dataset hsapiens_gene_ensembl now check available attributes (annotation data) can accessed Homo sapiens genes. Please note nested structure attribute query. attribute query procedure additional wrapper function named useDataset() needed useMart() corresponding dataset needs specified. result table storing name available attributes forHomo sapiens well short description. Furthermore, users can retrieve filters Homo sapiens can specified actual BioMart query process. accumulating information, now possible perform actual BioMart query using getBM() function. example retrieve attributes: start_position,end_position description Homo sapiens gene \"GUCA2A\". Since input genes ensembl gene ids, need specify filters argument filters = \"hgnc_symbol\". using getBM() users can pass attributes retrieved listAttributes() attributes argument getBM() function.","code":"# install the biomaRt package        # source(\"https://bioconductor.org/biocLite.R\")      # biocLite(\"biomaRt\")        # load biomaRt       library(biomaRt)         # look at top 10 databases       head(biomaRt::listMarts(host = \"https://www.ensembl.org\"), 10) head(biomaRt::listDatasets(biomaRt::useMart(\"ENSEMBL_MART_ENSEMBL\", host = \"https://www.ensembl.org\")), 10) head(biomaRt::listAttributes(biomaRt::useDataset(                                          dataset = \"hsapiens_gene_ensembl\",                                                   mart    = useMart(\"ENSEMBL_MART_ENSEMBL\",                                                host    = \"https://www.ensembl.org\"))), 10) head(biomaRt::listFilters(biomaRt::useDataset(dataset = \"hsapiens_gene_ensembl\",                                                       mart    = useMart(\"ENSEMBL_MART_ENSEMBL\",                                                        host    = \"https://www.ensembl.org\"))), 10) # 1) select a mart and data set          mart <- biomaRt::useDataset(dataset = \"hsapiens_gene_ensembl\",                              mart    = useMart(\"ENSEMBL_MART_ENSEMBL\",                            host    = \"https://www.ensembl.org\"))                  # 2) run a biomart query using the getBM() function          # and specify the attributes and filter arguments        geneSet <- \"GUCA2A\"                   resultTable <- biomaRt::getBM(attributes = c(\"start_position\",\"end_position\",\"description\"),                              filters    = \"hgnc_symbol\",                              values     = geneSet,                                mart       = mart)                   resultTable"},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/articles/Functional_Annotation.html","id":"getting-started-with-biomartr","dir":"Articles","previous_headings":"Extending biomaRt using the new query system of the biomartr package","what":"Getting Started with biomartr","title":"Functional Annotation with biomartr","text":"query methodology provided Ensembl Biomart biomaRt package well defined approach accurate annotation retrieval. Nevertheless, learning query methodology (subjectively) seems non-intuitive user perspective. Therefore, biomartr package provides another query methodology aims organism centric. Taken together, following workflow allows users perform fast BioMart queries attributes using biomart() function implemented biomartr package: get attributes, datasets, marts via : organismAttributes() choose available biological features (filters) via: organismFilters() specify set query genes: e.g. retrieved getGenome(), getProteome() getCDS() specify arguments biomart() function using steps 1) - 3) perform BioMart query Note dataset names change frequently due update dataset versions. case query functions work properly, users check organismAttributes(update = TRUE) whether dataset name changed. example, organismAttributes(\"Homo sapiens\", topic = \"id\", update = TRUE) might reveal dataset ENSEMBL_MART_ENSEMBL changed.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/articles/Functional_Annotation.html","id":"retrieve-available-marts","dir":"Articles","previous_headings":"Retrieve marts, datasets, attributes, and filters with biomartr","what":"Retrieve Available Marts","title":"Functional Annotation with biomartr","text":"getMarts() function allows users list available databases can accessed BioMart interfaces.","code":"# load the biomartr package library(biomartr)  # list all available databases biomartr::getMarts() mart                  version                           <chr>                 <chr>                           1 ENSEMBL_MART_ENSEMBL  Ensembl Genes 104               2 ENSEMBL_MART_MOUSE    Mouse strains 104               3 ENSEMBL_MART_SEQUENCE Sequence                        4 ENSEMBL_MART_ONTOLOGY Ontology                        5 ENSEMBL_MART_GENOMIC  Genomic features 104            6 ENSEMBL_MART_SNP      Ensembl Variation 104           7 ENSEMBL_MART_FUNCGEN  Ensembl Regulation 104          8 plants_mart           Ensembl Plants Genes 51         9 plants_variations     Ensembl Plants Variations 51   10 fungi_mart            Ensembl Fungi Genes 51         11 fungi_variations      Ensembl Fungi Variations 51    12 protists_mart         Ensembl Protists Genes 51      13 protists_variations   Ensembl Protists Variations 51 14 metazoa_mart          Ensembl Metazoa Genes 51       15 metazoa_variations    Ensembl Metazoa Variations 51"},{"path":"https://docs.ropensci.org/biomartr/articles/Functional_Annotation.html","id":"retrieve-available-datasets-from-a-specific-mart","dir":"Articles","previous_headings":"Retrieve marts, datasets, attributes, and filters with biomartr","what":"Retrieve Available Datasets from a Specific Mart","title":"Functional Annotation with biomartr","text":"Now users can select specific database list available data sets can accessed database. example choose ENSEMBL_MART_ENSEMBL database. Now can select dataset hsapiens_gene_ensembl list available attributes can retrieved dataset.","code":"head(biomartr::getDatasets(mart = \"ENSEMBL_MART_ENSEMBL\") , 5) dataset                 description                        version        <chr>                   <chr>                              <chr>        1 fcatus_gene_ensembl     Cat genes (Felis_catus_9.0)        Felis_catus 2 umaritimus_gene_ensembl Polar bear genes (UrsMar_1.0)      UrsMar_1.0   3 ogarnettii_gene_ensembl Bushbaby genes (OtoGar3)           OtoGar3      4 lcrocea_gene_ensembl    Large yellow croaker genes (L_cro L_crocea_2.0 5 sformosus_gene_ensembl  Asian bonytongue genes (fSclFor1. fSclFor1.1 tail(biomartr::getDatasets(mart = \"ENSEMBL_MART_ENSEMBL\") , 38) 1 csabaeus_gene_ensembl    Vervet-AGM genes (ChlSab1.1)  ChlSab1.1        2 chircus_gene_ensembl     Goat genes (ARS1)             ARS1             3 mmulatta_gene_ensembl    Macaque genes (Mmul_10)       Mmul_10          4 mmonoceros_gene_ensembl  Narwhal genes (NGI_Narwhal_1) NGI_Narwhal_1    5 csemilaevis_gene_ensembl Tongue sole genes (Cse_v1.0)  Cse_v1.0         6 cpbellii_gene_ensembl    Painted turtle genes (Chryse Chrysemys_pict  7 clanigera_gene_ensembl   Long-tailed chinchilla genes ChiLan1.0        8 catys_gene_ensembl       Sooty mangabey genes (Caty_1 Caty_1.0         9 tguttata_gene_ensembl    Zebra finch genes (bTaeGut1_ bTaeGut1_v1.p   10 nleucogenys_gene_ensembl Gibbon genes (Nleu_3.0)       Nleu_3.0        #  with 28 more rows"},{"path":"https://docs.ropensci.org/biomartr/articles/Functional_Annotation.html","id":"retrieve-available-attributes-from-a-specific-dataset","dir":"Articles","previous_headings":"Retrieve marts, datasets, attributes, and filters with biomartr","what":"Retrieve Available Attributes from a Specific Dataset","title":"Functional Annotation with biomartr","text":"Now selected database (hsapiens_gene_ensembl) dataset (hsapiens_gene_ensembl), users can list available attributes dataset using getAttributes() function.","code":"# show all elements of the data.frame options(tibble.print_max = Inf) # list all available attributes for dataset: hsapiens_gene_ensembl head( biomartr::getAttributes(mart    = \"ENSEMBL_MART_ENSEMBL\",                                dataset = \"hsapiens_gene_ensembl\"), 10 ) Starting retrieval of attribute information from mart ENSEMBL_MART_ENSEMBL and dataset hsapiens_gene_ensembl ...                             name                  description 1                ensembl_gene_id               Gene stable ID 2        ensembl_gene_id_version       Gene stable ID version 3          ensembl_transcript_id         Transcript stable ID 4  ensembl_transcript_id_version Transcript stable ID version 5             ensembl_peptide_id            Protein stable ID 6     ensembl_peptide_id_version    Protein stable ID version 7                ensembl_exon_id               Exon stable ID 8                    description             Gene description 9                chromosome_name     Chromosome/scaffold name 10                start_position              Gene start (bp)"},{"path":"https://docs.ropensci.org/biomartr/articles/Functional_Annotation.html","id":"retrieve-available-filters-from-a-specific-dataset","dir":"Articles","previous_headings":"Retrieve marts, datasets, attributes, and filters with biomartr","what":"Retrieve Available Filters from a Specific Dataset","title":"Functional Annotation with biomartr","text":"Finally, getFilters() function allows users list available filters specific dataset can used biomart() query.","code":"# show all elements of the data.frame options(tibble.print_max = Inf) # list all available filters for dataset: hsapiens_gene_ensembl head( biomartr::getFilters(mart    = \"ENSEMBL_MART_ENSEMBL\",                             dataset = \"hsapiens_gene_ensembl\"), 10 ) Starting retrieval of filters information from mart ENSEMBL_MART_ENSEMBL and dataset hsapiens_gene_ensembl ...                  name                            description 1     chromosome_name               Chromosome/scaffold name 2               start                                  Start 3                 end                                    End 4          band_start                             Band Start 5            band_end                               Band End 6        marker_start                           Marker Start 7          marker_end                             Marker End 8       encode_region                          Encode region 9              strand                                 Strand 10 chromosomal_region e.g. 1:100:10000:-1, 1:100000:200000:1"},{"path":"https://docs.ropensci.org/biomartr/articles/Functional_Annotation.html","id":"organism-specific-retrieval-of-information","dir":"Articles","previous_headings":"","what":"Organism Specific Retrieval of Information","title":"Functional Annotation with biomartr","text":"use cases, users work single set model organisms. process mostly interested specific annotations particular model organism. organismBM() function addresses issue provides users organism centric query marts datasets available particular organism interest. Note running following functions first time, data retrieval procedure take time, due remote access BioMart. corresponding result saved *.txt file named _biomart/listDatasets.txt within tempdir() folder, allowing subsequent queries performed much faster. tempdir() folder, however, deleted new R session established. case inital call subsequent functions take time retrieve organism specific data BioMart database. concept locally storing organism specific database linking information available BioMart internal file allows users significantly speed subsequent retrieval queries particular organism. result table storing marts datasets annotations can retrieved Homo sapiens. Furthermore, short description well version data set accessed (useful publications) returned. Users observe 3 different marts provide 6 different datasets storing annotation information Homo sapiens. **_Please note__*, however, scientific names organisms must written correctly! ex. “Homo Sapiens” treated differently (recognized) “Homo sapiens” (recognized).__ Similar biomaRt package query methodology, users need specify attributes filters able perform accurate BioMart queries. functions organismAttributes() organismFilters() provide useful intuitive concepts obtain information. Users observe organismAttributes() function returns data.frame storing attribute names, data sets, marts available Homo sapiens. ENSEMBL release 87 ENSEMBL_MART_SEQUENCE service provided Ensembl work properly thus organismAttributes() function prints warning messages make user aware certain marts provided Ensembl work properly, yet. additional feature provided organismAttributes() topic argument. topic argument allows users search specific attributes, topics, categories faster filtering. Now, attribute names id part name returned. Another example topic = \"homolog\". topic = \"dn\" topic = \"ds\" dn ds value retrieval. Analogous organismAttributes() function, organismFilters() function returns filters available query organism interest. organismFilters() function also allows users search filters correspond specific topic category.","code":"# show all elements of the data.frame options(tibble.print_max = Inf) # retrieving all available datasets and biomart connections for # a specific query organism (scientific name) biomartr::organismBM(organism = \"Homo sapiens\") Starting retrieval of all available BioMart datasets for Homo sapiens ... Datasets for the following marts will be retrieved:                                                                              mart                        version 1   ENSEMBL_MART_ENSEMBL              Ensembl Genes 104 2     ENSEMBL_MART_MOUSE              Mouse strains 104 3  ENSEMBL_MART_SEQUENCE                       Sequence 4  ENSEMBL_MART_ONTOLOGY                       Ontology 5   ENSEMBL_MART_GENOMIC           Genomic features 104 6       ENSEMBL_MART_SNP          Ensembl Variation 104 7   ENSEMBL_MART_FUNCGEN         Ensembl Regulation 104 8            plants_mart        Ensembl Plants Genes 51 9      plants_variations   Ensembl Plants Variations 51 10            fungi_mart         Ensembl Fungi Genes 51 11      fungi_variations    Ensembl Fungi Variations 51 12         protists_mart      Ensembl Protists Genes 51 13   protists_variations Ensembl Protists Variations 51 14          metazoa_mart       Ensembl Metazoa Genes 51 Processing mart ENSEMBL_MART_ENSEMBL ... Processing mart ENSEMBL_MART_MOUSE ... Processing mart ENSEMBL_MART_SEQUENCE ... Processing mart ENSEMBL_MART_ONTOLOGY ... Processing mart ENSEMBL_MART_GENOMIC ... Processing mart ENSEMBL_MART_SNP ... Processing mart ENSEMBL_MART_FUNCGEN ... Processing mart plants_mart ... Processing mart plants_variations ... Processing mart fungi_mart ... Processing mart fungi_variations ... Processing mart protists_mart ... Processing mart protists_variations ... Processing mart metazoa_mart ...  A tibble: 15 x 5                                                                                              organism_name description               mart      dataset      version    <chr>         <chr>                     <chr>     <chr>        <chr>    1 hsapiens      Human genes (GRCh38.p13)  ENSEMBL_ hsapiens_ge GRCh38  2 hsapiens      Human sequences (GRCh38. ENSEMBL_ hsapiens_ge GRCh38  3 hsapiens      encode                    ENSEMBL_ hsapiens_en GRCh38  4 hsapiens      marker_feature_end        ENSEMBL_ hsapiens_ma GRCh38  5 hsapiens      marker_feature            ENSEMBL_ hsapiens_ma GRCh38  6 hsapiens      karyotype_end             ENSEMBL_ hsapiens_ka GRCh38  7 hsapiens      karyotype_start           ENSEMBL_ hsapiens_ka GRCh38  8 hsapiens      Human Somatic Short Vari ENSEMBL_ hsapiens_sn GRCh38  9 hsapiens      Human Structural Variant ENSEMBL_ hsapiens_st GRCh38 10 hsapiens      Human Short Variants (SN ENSEMBL_ hsapiens_snp GRCh38 11 hsapiens      Human Somatic Structural ENSEMBL_ hsapiens_st GRCh38 12 hsapiens      Human Regulatory Evidenc ENSEMBL_ hsapiens_pe GRCh38 13 hsapiens      Human Regulatory Feature ENSEMBL_ hsapiens_re GRCh38 14 hsapiens      Human Other Regulatory R ENSEMBL_ hsapiens_ex GRCh38 15 hsapiens      Human miRNA Target Regio ENSEMBL_ hsapiens_mi GRCh38 # show all elements of the data.frame options(tibble.print_max = Inf) # return available attributes for \"Homo sapiens\" head(biomartr::organismAttributes(\"Homo sapiens\"), 20) 1 ensembl_gene_id               Gene stable ID         hsapiens_ge ENSEMBL_M  2 ensembl_gene_id_version       Gene stable ID version hsapiens_ge ENSEMBL_M  3 ensembl_transcript_id         Transcript stable ID   hsapiens_ge ENSEMBL_M  4 ensembl_transcript_id_version Transcript stable ID  hsapiens_ge ENSEMBL_M  5 ensembl_peptide_id            Protein stable ID      hsapiens_ge ENSEMBL_M  6 ensembl_peptide_id_version    Protein stable ID ver hsapiens_ge ENSEMBL_M  7 ensembl_exon_id               Exon stable ID         hsapiens_ge ENSEMBL_M  8 description                   Gene description       hsapiens_ge ENSEMBL_M  9 chromosome_name               Chromosome/scaffold n hsapiens_ge ENSEMBL_M 10 start_position                Gene start (bp)        hsapiens_ge ENSEMBL_M 11 end_position                  Gene end (bp)          hsapiens_ge ENSEMBL_M 12 strand                        Strand                 hsapiens_ge ENSEMBL_M 13 band                          Karyotype band         hsapiens_ge ENSEMBL_M 14 transcript_start              Transcript start (bp)  hsapiens_ge ENSEMBL_M 15 transcript_end                Transcript end (bp)    hsapiens_ge ENSEMBL_M 16 transcription_start_site      Transcription start s hsapiens_ge ENSEMBL_M 17 transcript_length             Transcript length (in hsapiens_ge ENSEMBL_M 18 transcript_tsl                Transcript support le hsapiens_ge ENSEMBL_M 19 transcript_gencode_basic      GENCODE basic annotat hsapiens_ge ENSEMBL_M 20 transcript_appris             APPRIS annotation      hsapiens_ge ENSEMBL_M # show all elements of the data.frame options(tibble.print_max = Inf) # search for attribute topic \"id\" head(biomartr::organismAttributes(\"Homo sapiens\", topic = \"id\"), 20) name                          description            dataset      mart          <chr>                         <chr>                  <chr>        <chr>       1 ensembl_gene_id               Gene stable ID         hsapiens_ge ENSEMBL_M  2 ensembl_gene_id_version       Gene stable ID version hsapiens_ge ENSEMBL_M  3 ensembl_transcript_id         Transcript stable ID   hsapiens_ge ENSEMBL_M  4 ensembl_transcript_id_version Transcript stable ID  hsapiens_ge ENSEMBL_M  5 ensembl_peptide_id            Protein stable ID      hsapiens_ge ENSEMBL_M  6 ensembl_peptide_id_version    Protein stable ID ver hsapiens_ge ENSEMBL_M  7 ensembl_exon_id               Exon stable ID         hsapiens_ge ENSEMBL_M  8 study_external_id             Study external refere hsapiens_ge ENSEMBL_M  9 go_id                         GO term accession      hsapiens_ge ENSEMBL_M 10 dbass3_id                     DataBase of Aberrant  hsapiens_ge ENSEMBL_M 11 dbass5_id                     DataBase of Aberrant  hsapiens_ge ENSEMBL_M 12 hgnc_id                       HGNC ID                hsapiens_ge ENSEMBL_M 13 protein_id                    INSDC protein ID       hsapiens_ge ENSEMBL_M 14 mim_morbid_description        MIM morbid description hsapiens_ge ENSEMBL_M 15 mim_morbid_accession          MIM morbid accession   hsapiens_ge ENSEMBL_M 16 mirbase_id                    miRBase ID             hsapiens_ge ENSEMBL_M 17 refseq_peptide                RefSeq peptide ID      hsapiens_ge ENSEMBL_M 18 refseq_peptide_predicted      RefSeq peptide predic hsapiens_ge ENSEMBL_M 19 wikigene_id                   WikiGene ID            hsapiens_ge ENSEMBL_M 20 mobidblite                    MobiDBLite             hsapiens_ge ENSEMBL_M # show all elements of the data.frame options(tibble.print_max = Inf) # search for attribute topic \"homolog\" head(biomartr::organismAttributes(\"Homo sapiens\", topic = \"homolog\"), 20) <chr>                                         <chr>           <chr>   <chr>   1 mspretus_homolog_ensembl_gene                 Algerian mouse hsapie ENSEM  2 mspretus_homolog_associated_gene_name         Algerian mouse hsapie ENSEM  3 mspretus_homolog_ensembl_peptide              Algerian mouse hsapie ENSEM  4 mspretus_homolog_chromosome                   Algerian mouse hsapie ENSEM  5 mspretus_homolog_chrom_start                  Algerian mouse hsapie ENSEM  6 mspretus_homolog_chrom_end                    Algerian mouse hsapie ENSEM  7 mspretus_homolog_canonical_transcript_protein Query protein  hsapie ENSEM  8 mspretus_homolog_subtype                      Last common an hsapie ENSEM  9 mspretus_homolog_orthology_type               Algerian mouse hsapie ENSEM 10 mspretus_homolog_perc_id                      %id. target Al hsapie ENSEM 11 mspretus_homolog_perc_id_r1                   %id. query gen hsapie ENSEM 12 mspretus_homolog_goc_score                    Algerian mouse hsapie ENSEM 13 mspretus_homolog_wga_coverage                 Algerian mouse hsapie ENSEM 14 mspretus_homolog_dn                           dN with Algeri hsapie ENSEM 15 mspretus_homolog_ds                           dS with Algeri hsapie ENSEM 16 mspretus_homolog_orthology_confidence         Algerian mouse hsapie ENSEM 17 vpacos_homolog_ensembl_gene                   Alpaca gene st hsapie ENSEM 18 vpacos_homolog_associated_gene_name           Alpaca gene na hsapie ENSEM 19 vpacos_homolog_ensembl_peptide                Alpaca protein hsapie ENSEM 20 vpacos_homolog_chromosome                     Alpaca chromos hsapie ENSEM # show all elements of the data.frame options(tibble.print_max = Inf) # search for attribute topic \"dn\" head(biomartr::organismAttributes(\"Homo sapiens\", topic = \"dn\")) name                  description            dataset               mart         <chr>                 <chr>                  <chr>                 <chr>      1 cdna_coding_start     cDNA coding start      hsapiens_gene_ensembl ENSEMBL_M 2 cdna_coding_end       cDNA coding end        hsapiens_gene_ensembl ENSEMBL_M 3 mspretus_homolog_dn   dN with Algerian mouse hsapiens_gene_ensembl ENSEMBL_M 4 vpacos_homolog_dn     dN with Alpaca         hsapiens_gene_ensembl ENSEMBL_M 5 pformosa_homolog_dn   dN with Amazon molly   hsapiens_gene_ensembl ENSEMBL_M 6 cpalliatus_homolog_dn dN with Angola colobus hsapiens_gene_ensembl ENSEMBL_M # show all elements of the data.frame options(tibble.print_max = Inf) # search for attribute topic \"ds\" head(biomartr::organismAttributes(\"Homo sapiens\", topic = \"ds\")) name                description            dataset               mart           <chr>               <chr>                  <chr>                 <chr>        1 ccds                CCDS ID                hsapiens_gene_ensembl ENSEMBL_MAR 2 cds_length          CDS Length             hsapiens_gene_ensembl ENSEMBL_MAR 3 cds_start           CDS start              hsapiens_gene_ensembl ENSEMBL_MAR 4 cds_end             CDS end                hsapiens_gene_ensembl ENSEMBL_MAR 5 mspretus_homolog_ds dS with Algerian mouse hsapiens_gene_ensembl ENSEMBL_MAR 6 vpacos_homolog_ds   dS with Alpaca         hsapiens_gene_ensembl ENSEMBL_MAR # show all elements of the data.frame options(tibble.print_max = Inf) # return available filters for \"Homo sapiens\" head(biomartr::organismFilters(\"Homo sapiens\"), 20) name                                description          dataset    mart        <chr>                               <chr>                <chr>      <chr>     1 chromosome_name                     Chromosome/scaffold hsapiens_ ENSEMBL  2 start                               Start                hsapiens_ ENSEMBL  3 end                                 End                  hsapiens_ ENSEMBL  4 band_start                          Band Start           hsapiens_ ENSEMBL  5 band_end                            Band End             hsapiens_ ENSEMBL  6 marker_start                        Marker Start         hsapiens_ ENSEMBL  7 marker_end                          Marker End           hsapiens_ ENSEMBL  8 encode_region                       Encode region        hsapiens_ ENSEMBL  9 strand                              Strand               hsapiens_ ENSEMBL 10 chromosomal_region                  e.g. 1:100:10000:-1 hsapiens_ ENSEMBL 11 with_ccds                           With CCDS ID(s)      hsapiens_ ENSEMBL 12 with_chembl                         With ChEMBL ID(s)    hsapiens_ ENSEMBL 13 with_clone_based_ensembl_gene       With Clone-based (E hsapiens_ ENSEMBL 14 with_clone_based_ensembl_transcript With Clone-based (E hsapiens_ ENSEMBL 15 with_dbass3                         With DataBase of Ab hsapiens_ ENSEMBL 16 with_dbass5                         With DataBase of Ab hsapiens_ ENSEMBL 17 with_ens_hs_transcript              With Ensembl Human  hsapiens_ ENSEMBL 18 with_ens_hs_translation             With Ensembl Human  hsapiens_ ENSEMBL 19 with_entrezgene_trans_name          With EntrezGene tra hsapiens_ ENSEMBL 20 with_embl                           With European Nucle hsapiens_ ENSEMBL # show all elements of the data.frame options(tibble.print_max = Inf) # search for filter topic \"id\" head(biomartr::organismFilters(\"Homo sapiens\", topic = \"id\"), 20) name                          description               dataset     mart        <chr>                         <chr>                     <chr>       <chr>     1 with_protein_id               With INSDC protein ID ID hsapiens_g ENSEMBL  2 with_mim_morbid               With MIM morbid ID(s)     hsapiens_g ENSEMBL  3 with_refseq_peptide           With RefSeq peptide ID(s) hsapiens_g ENSEMBL  4 with_refseq_peptide_predicted With RefSeq peptide pred hsapiens_g ENSEMBL  5 ensembl_gene_id               Gene stable ID(s) [e.g.  hsapiens_g ENSEMBL  6 ensembl_gene_id_version       Gene stable ID(s) with v hsapiens_g ENSEMBL  7 ensembl_transcript_id         Transcript stable ID(s)  hsapiens_g ENSEMBL  8 ensembl_transcript_id_version Transcript stable ID(s)  hsapiens_g ENSEMBL  9 ensembl_peptide_id            Protein stable ID(s) [e. hsapiens_g ENSEMBL 10 ensembl_peptide_id_version    Protein stable ID(s) wit hsapiens_g ENSEMBL 11 ensembl_exon_id               Exon ID(s) [e.g. ENSE000 hsapiens_g ENSEMBL 12 dbass3_id                     DataBase of Aberrant 3'  hsapiens_g ENSEMBL 13 dbass5_id                     DataBase of Aberrant 5'  hsapiens_g ENSEMBL 14 hgnc_id                       HGNC ID(s) [e.g. HGNC:10 hsapiens_g ENSEMBL 15 protein_id                    INSDC protein ID(s) [e.g hsapiens_g ENSEMBL 16 mim_morbid_accession          MIM morbid accession(s)  hsapiens_g ENSEMBL 17 mirbase_id                    miRBase ID(s) [e.g. hsa- hsapiens_g ENSEMBL 18 refseq_peptide                RefSeq peptide ID(s) [e. hsapiens_g ENSEMBL 19 refseq_peptide_predicted      RefSeq peptide predicted hsapiens_g ENSEMBL 20 wikigene_id                   WikiGene ID(s) [e.g. 1]   hsapiens_g ENSEMBL"},{"path":"https://docs.ropensci.org/biomartr/articles/Functional_Annotation.html","id":"construct-biomart-queries-with-biomartr","dir":"Articles","previous_headings":"","what":"Construct BioMart queries with biomartr","title":"Functional Annotation with biomartr","text":"short introduction functionality organismBM(), organismAttributes(), organismFilters() allow users perform BioMart queries intuitive organism centric way. main function perform BioMart queries biomart(). following examples assume interested annotation specific genes Homo sapiens proteome. want map corresponding refseq gene id set gene ids used databases. purpose, first need consult organismAttributes() function. biomart() function takes arguments set genes (gene ids specified filter argument), corresponding mart dataset, well attributes shall returned.","code":"# show all elements of the data.frame options(tibble.print_max = Inf)  head(biomartr::organismAttributes(\"Homo sapiens\", topic = \"id\")) name                          description                  dataset    mart      <chr>                         <chr>                        <chr>      <chr>   1 ensembl_gene_id               Gene stable ID               hsapiens_ ENSEMB 2 ensembl_gene_id_version       Gene stable ID version       hsapiens_ ENSEMB 3 ensembl_transcript_id         Transcript stable ID         hsapiens_ ENSEMB 4 ensembl_transcript_id_version Transcript stable ID version hsapiens_ ENSEMB 5 ensembl_peptide_id            Protein stable ID            hsapiens_ ENSEMB 6 ensembl_peptide_id_version    Protein stable ID version    hsapiens_ ENSEMB # show all elements of the data.frame options(tibble.print_max = Inf) # retrieve the proteome of Homo sapiens from refseq file_path <- biomartr::getProteome( db       = \"refseq\",                                     organism = \"Homo sapiens\",                                     path     = file.path(\"_ncbi_downloads\",\"proteomes\") )  Hsapiens_proteome <- biomartr::read_proteome(file_path, format = \"fasta\")  # remove splice variants from id gene_set <- unlist(sapply(strsplit(Hsapiens_proteome@ranges@NAMES[1:5], \".\",fixed = TRUE), function(x) x[1]))  result_BM <- biomartr::biomart( genes      = gene_set, # genes were retrieved using biomartr::getGenome()                                 mart       = \"ENSEMBL_MART_ENSEMBL\", # marts were selected with biomartr::getMarts()                                 dataset    = \"hsapiens_gene_ensembl\", # datasets were selected with biomartr::getDatasets()                                 attributes = c(\"ensembl_gene_id\",\"ensembl_peptide_id\"), # attributes were selected with biomartr::getAttributes()                                 filters    = \"refseq_peptide\") # specify what ID type was stored in the fasta file retrieved with biomartr::getGenome()  result_BM refseq_peptide ensembl_gene_id ensembl_peptide_id 1      NP_000005 ENSG00000175899    ENSP00000323929 2      NP_000006 ENSG00000156006    ENSP00000286479 3      NP_000007 ENSG00000117054    ENSP00000359878 4      NP_000008 ENSG00000122971    ENSP00000242592 5      NP_000009 ENSG00000072778    ENSP00000349297"},{"path":"https://docs.ropensci.org/biomartr/articles/Functional_Annotation.html","id":"gene-ontology","dir":"Articles","previous_headings":"","what":"Gene Ontology","title":"Functional Annotation with biomartr","text":"biomartr package also enables fast intuitive retrieval GO terms additional information via getGO() function. Several databases can selected retrieve GO annotation information set query genes. far, getGO() function allows GO information retrieval Ensembl Biomart database. example retrieve GO information set Homo sapiens genes stored hgnc_symbol.","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/Functional_Annotation.html","id":"go-annotation-retrieval-via-biomart","dir":"Articles","previous_headings":"Gene Ontology","what":"GO Annotation Retrieval via BioMart","title":"Functional Annotation with biomartr","text":"getGO() function takes several arguments input retrieve GO information BioMart. First, scientific name organism interest needs specified. Furthermore, set gene ids well corresponding filter notation (GUCA2A gene ids filter notation hgnc_symbol; see organismFilters() details) need specified. database argument defines database GO information shall retrieved. Hence, gene id resulting table stores annotated GO terms found Ensembl Biomart.","code":"# show all elements of the data.frame options(tibble.print_max = Inf) # search for GO terms of an example Homo sapiens gene GO_tbl <- biomartr::getGO(organism = \"Homo sapiens\",                            genes    = \"GUCA2A\",                           filters  = \"hgnc_symbol\")  GO_tbl"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"topics","dir":"Articles","previous_headings":"","what":"Topics","title":"Meta-Genome Retrieval","text":"1.1.1 Retrieval NCBI RefSeq 1.1.2 Retrieval NCBI Genbank 1.1.3 Retrieval ENSEMBL 1.2.1 Retrieval NCBI RefSeq 1.2.2 Retrieval NCBI Genbank 1.2.3 Retrieval ENSEMBL 1.3.1 Retrieval NCBI RefSeq 1.3.2 Retrieval NCBI Genbank 1.3.3 Retrieval ENSEMBL 1.4 Retrieve GFF files 1.5 Retrieve GTF files 1.6.1 Retrieval NCBI RefSeq 1.6.2 Retrieval NCBI Genbank 1.6.3 Retrieval ENSEMBL 1.7.1 Retrieval NCBI RefSeq 1.7.2 Retrieval NCBI Genbank 2.1 Example retrieval Gammaproteobacteria genomes NCBI RefSeq 2.2 Example retrieval Adenoviridae genomes NCBI RefSeq 3. Meta retrieval genome assembly quality information 4. Retrieve data metagenome projects human gut metagenome project NCBI Genbank 5.1 Example: Genome Retrieval 5.2 Example: Proteome Retrieval","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"perform-meta-genome-retrieval","dir":"Articles","previous_headings":"","what":"Perform Meta-Genome Retrieval","title":"Meta-Genome Retrieval","text":"number genome assemblies generated stored sequence databases growing exponentially every year. availability growing amount genomic data, meta-genomics studies become popular. using bulk genomes comparing thousands genomes new structural patterns evolutionary insights can obtained. However, first step meta-genomics study retrieval genomes, proteomes, coding sequences annotation files shall compared investigated. purpose, meta.retrieval() meta.retrieval.() functions allows users perform straightforward meta-genome retrieval hundreds genomes, proteomes, CDS, etc R. Finally, addition retrieved sequence information meta.retrieval() meta.retrieval.() functions generate summary file contains information genome version, genome status, submitter, etc organism promote computational scientific reproducibility meta-genomics study hand. summary file can example attached Supplementary Data respective study.","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"getting-started","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval","what":"Getting Started","title":"Meta-Genome Retrieval","text":"meta.retrieval() meta.retrieval.() functions aim simplify genome retrieval computational reproducibility process meta-genomics studies. functions allow users either download genomes, proteomes, CDS, etc species within specific kingdom subgroup life (meta.retrieval()) species kingdoms (meta.retrieval.()). biomartr users write shell scripts download respective genomic data. However, since many meta-genomics packages exist R programming language, implemented functionality easy integration existing R workflows easier reproducibility. example, pipeline logic magrittr package can used meta.retrieval() meta.retrieval.() follows. ... denotes subsequent meta-genomics analysis. Hence, meta.retrieval() enables pipeline methodology meta-genomics.","code":"# download all vertebrate genomes, then apply ... meta.retrieval(kingdom = \"vertebrate_mammalian\", db = \"refseq\", type = \"genome\") %>% ..."},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieve-genomic-sequences","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval","what":"Retrieve Genomic Sequences","title":"Meta-Genome Retrieval","text":"retrieve list available kingdoms stored NCBI RefSeq, NCBI Genbank, ENSEMBL databases users can consult getKingdoms() function stores list available kingdoms life corresponding database.","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"example-ncbi-refseq","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval","what":"Example NCBI RefSeq:","title":"Meta-Genome Retrieval","text":"","code":"getKingdoms(db = \"refseq\") [1] \"archaea\"              \"bacteria\"             \"fungi\"                \"invertebrate\"         [5] \"plant\"                \"protozoa\"             \"vertebrate_mammalian\" \"vertebrate_other\"     [9] \"viral\""},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"example-ncbi-genbank","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval","what":"Example NCBI Genbank:","title":"Meta-Genome Retrieval","text":"examples difference betwenn db = \"refseq\" db = \"genbank\" db = \"genbank\" store viral information.","code":"getKingdoms(db = \"genbank\") [1] \"archaea\"              \"bacteria\"             \"fungi\"                [4] \"invertebrate\"         \"plant\"                \"protozoa\"             [7] \"vertebrate_mammalian\" \"vertebrate_other\""},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"example-ensembl","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval","what":"Example ENSEMBL","title":"Meta-Genome Retrieval","text":"ENSEMBL database differentiate different kingdoms, specialized storing high-quality reference genomes diverse biological disciplines.","code":"getKingdoms(db = \"ensembl\") [1] \"EnsemblVertebrates\""},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieval-from-ncbi-refseq","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval > Example ENSEMBL","what":"Retrieval from NCBI RefSeq","title":"Meta-Genome Retrieval","text":"Download mammalian vertebrate genomes NCBI RefSeq. argument kingdom specifies kingdom selected getKingdoms() genomes organisms shall retrieved. db argument specifies database respective genomes shall downloaded. argument type specifies genome assembly files shall retrieved. argument reference indicates whether genome shall downloaded isn’t marked database either reference genome representative genome. Options : reference = FALSE (Default): organisms (reference, representative, non-representative genomes) downloaded. reference = TRUE: organisms downloaded must either reference representative genome. Thus, genomes usually non-reference genomes downloaded user retrieve much less organisms stored databases. running command geneomes stored folder either named according kingdom (case vertebrate_mammalian). Alternatively, users can specify .folder argument define custom output folder path. Internally, example meta.retrieval() generate folder named vertebrate_mammalian respective genomes stored. addition, vertebrate_mammalian folder contains folder named documentation stores individual documentation files individual organism summary file stores documentation retrieved organisms. summary file can used Supplementary Data studies promote computational reproducibility. example documentation file individual organism looks like : example summary file organism looks like (use 105 Plant species example):","code":"# download all vertebrate genomes meta.retrieval(kingdom = \"vertebrate_mammalian\", db = \"refseq\", type = \"genome\", reference = FALSE) File Name: Mus_musculus_genomic_genbank.gff.gz Organism Name: Mus_musculus Database: NCBI genbank URL: ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/001/635/GCA_000001635.7_GRCm38.p5/GCA_000001635.7_GRCm38.p5_genomic.gff.gz Download_Date: Mon Nov 14 12:43:45 2016 refseq_category: reference genome assembly_accession: GCA_000001635.7 bioproject: PRJNA20689 biosample: NA taxid: 10090 infraspecific_name: NA version_status: latest release_type: Patch genome_rep: Full seq_rel_date: 2016-06-29 submitter: Genome Reference Consortium # A tibble: 105 x 16    file_name     organism   url             database path  refseq_category    <chr>         <chr>      <chr>           <chr>    <chr> <chr>            1 Aegilops_tau Aegilops_ ftp://ftp.ncbi refseq   Prot representative  2 Amborella_tr Amborella ftp://ftp.ncbi refseq   Prot representative  3 Ananas_comos Ananas_co ftp://ftp.ncbi refseq   Prot representative  4 Arabidopsis_ Arabidops ftp://ftp.ncbi refseq   Prot representative  5 Arabidopsis_ Arabidops ftp://ftp.ncbi refseq   Prot reference geno  6 Arachis_dura Arachis_d ftp://ftp.ncbi refseq   Prot representative  7 Arachis_ipae Arachis_i ftp://ftp.ncbi refseq   Prot representative  8 Asparagus_of Asparagus ftp://ftp.ncbi refseq   Prot representative  9 Auxenochlore Auxenochl ftp://ftp.ncbi refseq   Prot representative 10 Bathycoccus_ Bathycocc ftp://ftp.ncbi refseq   Prot representative # ... with 95 more rows, and 10 more variables: assembly_accession <chr>, #   bioproject <chr>, biosample <chr>, taxid <int>, #   infraspecific_name <chr>, version_status <chr>, release_type <chr>, #   genome_rep <chr>, seq_rel_date <date>, submitter <chr>"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"restarting-a-corrupted-download","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval > Example ENSEMBL","what":"Restarting a corrupted download","title":"Meta-Genome Retrieval","text":"Unfortunately, downloading large amounts genomes NCBI RefSeq database limits number queries individual IP address. causes download process might stop time particular step. overcome limitation users can simply re-run meta.retrieval() command previously executed specify argument restart_at_last following two options: restart_at_last = TRUE (Default) meta.retrieval() skip organisms already present folder start downloading remaining species (thus pick initial download process stopped). However, way meta.retrieval() able check whether already downloaded organism files corrupted checking md5 checksum respective file. Thus, recommend download last organism meta.retrieval() stopped manually using getGenome() make sure respective file corrupted. restart_at_last = FALSE meta.retrieval() start beginning crawl already downloaded organism files check whether already downloaded organism files corrupted checking md5 checksum (procedure takes longer restart_at_last = TRUE). checking existing files function start downloading remaining organisms.","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"un-zipping-downloaded-files","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval > Example ENSEMBL","what":"Un-zipping downloaded files","title":"Meta-Genome Retrieval","text":"downloading genomes users can format output meta.retrieval() first un-zipping downloaded files renaming convenient downstream data analysis (e.g. Saccharomyces_cerevisiae_cds_from_genomic_refseq.fna.gz Scerevisiae.fa). easiest way use clean.retrieval() combination meta.retrieval() use pipe operator magrittr package: first step, genome assembly files downloaded meta.retrieval subsequently (%>%) un-zipped re-named using clean.retrieval(). Example Bacteria Example Viruses Example Archaea Example Fungi Example Plants Example Invertebrates Example Protozoa","code":"library(magrittr) meta.retrieval(kingdom = \"vertebrate_mammalian\",                 db = \"refseq\",                 type = \"genome\") %>%      clean.retrieval() # download all bacteria genomes meta.retrieval(kingdom = \"bacteria\", db = \"refseq\", type = \"genome\", reference = FALSE) # download all virus genomes meta.retrieval(kingdom = \"viral\", db = \"refseq\", type = \"genome\", reference = FALSE) # download all archaea genomes meta.retrieval(kingdom = \"archaea\", db = \"refseq\", type = \"genome\", reference = FALSE) # download all fungi genomes meta.retrieval(kingdom = \"fungi\", db = \"refseq\", type = \"genome\", reference = FALSE) # download all plant genomes meta.retrieval(kingdom = \"plant\", db = \"refseq\", type = \"genome\", reference = FALSE) # download all invertebrate genomes meta.retrieval(kingdom = \"invertebrate\", db = \"refseq\", type = \"genome\", reference = FALSE) # download all invertebrate genomes meta.retrieval(kingdom = \"protozoa\", db = \"refseq\", type = \"genome\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieval-from-ncbi-genbank","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval > Example ENSEMBL","what":"Retrieval from NCBI Genbank","title":"Meta-Genome Retrieval","text":"Alternatively, download mammalian vertebrate genomes NCBI Genbank, e.g. Example Bacteria Example Archaea Example Fungi Example Plants Example Invertebrates Example Protozoa","code":"# download all vertebrate genomes meta.retrieval(kingdom = \"vertebrate_mammalian\", db = \"genbank\", type = \"genome\", reference = FALSE) # download all bacteria genomes meta.retrieval(kingdom = \"bacteria\", db = \"genbank\", type = \"genome\", reference = FALSE) # download all archaea genomes meta.retrieval(kingdom = \"archaea\", db = \"genbank\", type = \"genome\", reference = FALSE) # download all fungi genomes meta.retrieval(kingdom = \"fungi\", db = \"genbank\", type = \"genome\", reference = FALSE) # download all plant genomes meta.retrieval(kingdom = \"plant\", db = \"genbank\", type = \"genome\", reference = FALSE) # download all invertebrate genomes meta.retrieval(kingdom = \"invertebrate\", db = \"genbank\", type = \"genome\", reference = FALSE) # download all invertebrate genomes meta.retrieval(kingdom = \"protozoa\", db = \"genbank\", type = \"genome\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieval-from-ensembl","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval > Example ENSEMBL","what":"Retrieval from ENSEMBL","title":"Meta-Genome Retrieval","text":"","code":"# download all genomes from ENSEMBL meta.retrieval(kingdom = \"Ensembl\", db = \"ensembl\", type = \"genome\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieve-groups-or-subgroups-of-species","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval","what":"Retrieve groups or subgroups of species","title":"Meta-Genome Retrieval","text":"case users wish retrieve genomes entire kingdom, rather group subgoup (e.g. species belonging Gammaproteobacteria class, subgroup bacteria kingdom), can use following workflow.","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"example-retrieval-of-all-gammaproteobacteria-genomes-from-ncbi-refseq","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval > Retrieve groups or subgroups of species","what":"Example retrieval of all Gammaproteobacteria genomes from NCBI RefSeq:","title":"Meta-Genome Retrieval","text":"First, users can consult getKingdoms() function retrieve kingdom information. example, choose bacteria kingdom. Now, getGroups() function allows users obtain available subgroups bacteria kingdom. Please note, kingdom argument specified getGroups() needs match available kingdom retrieved getKingdoms(). also important cases: getKingdoms() getGroups() database specified. Now choose group Gammaproteobacteria specify group argument meta.retrieval() function. Using command, bacterial (kingdom = \"bacteria\") genomes (type = \"genome\") belong group Gammaproteobacteria (group = \"Gammaproteobacteria\") retrieved NCBI RefSeq (db = \"refseq\"). Alternatively, Gammaproteobacteria genomes can retrieved NCBI Genbank exchanging db = \"refseq\" db = \"genbank\". users wish download proteome, CDS, GFF files instead genomes, can specify argument: type = \"proteome\", type = \"cds\", type = \"gff\".","code":"getKingdoms(db = \"refseq\") [1] \"archaea\"              \"bacteria\"             \"fungi\"                \"invertebrate\"         [5] \"plant\"                \"protozoa\"             \"vertebrate_mammalian\" \"vertebrate_other\"     [9] \"viral\" getGroups(db = \"refseq\", kingdom = \"bacteria\") [1] \"Acidithiobacillia\"                     \"Acidobacteriia\"                         [3] \"Actinobacteria\"                        \"Alphaproteobacteria\"                    [5] \"Aquificae\"                             \"Armatimonadetes\"                        [7] \"Bacteroidetes/Chlorobi group\"          \"Balneolia\"                              [9] \"Betaproteobacteria\"                    \"Blastocatellia\"                        [11] \"Candidatus Kryptonia\"                  \"Chlamydiae\"                            [13] \"Chloroflexi\"                           \"Cyanobacteria/Melainabacteria group\"   [15] \"Deinococcus-Thermus\"                   \"delta/epsilon subdivisions\"            [17] \"Endomicrobia\"                          \"Fibrobacteres\"                         [19] \"Firmicutes\"                            \"Fusobacteriia\"                         [21] \"Gammaproteobacteria\"                   \"Gemmatimonadetes\"                      [23] \"Kiritimatiellaeota\"                    \"Nitrospira\"                            [25] \"Planctomycetes\"                        \"Spirochaetia\"                          [27] \"Synergistia\"                           \"Tenericutes\"                           [29] \"Thermodesulfobacteria\"                 \"Thermotogae\"                           [31] \"unclassified Acidobacteria\"            \"unclassified Bacteria (miscellaneous)\" [33] \"unclassified Proteobacteria\"           \"Verrucomicrobia\"                       [35] \"Zetaproteobacteria\" meta.retrieval(kingdom = \"bacteria\", group = \"Gammaproteobacteria\", db = \"refseq\", type = \"genome\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"example-retrieval-of-all-adenoviridae-genomes-from-ncbi-refseq","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval > Retrieve groups or subgroups of species","what":"Example retrieval of all Adenoviridae genomes from NCBI RefSeq:","title":"Meta-Genome Retrieval","text":"Retrieve groups viruses. Now can choose Adenoviridae group argument meta.retrieval() function. , exchanging type = \"genome\" either type = \"proteome\", type = \"cds\", type = \"rna\", type = \"assemblystats\", type = \"gff\", users can retrieve proteome, CDS, RNA, genome assembly statistics GFF files instead genomes.","code":"getGroups(db = \"refseq\", kingdom = \"viral\") [1] \"Adenoviridae\"                                        \"Alloherpesviridae\"                                     [3] \"Alphaflexiviridae\"                                   \"Alphatetraviridae\"                                     [5] \"Alvernaviridae\"                                      \"Amalgaviridae\"                                         [7] \"Ampullaviridae\"                                      \"Anelloviridae\"                                         [9] \"Apple fruit crinkle viroid\"                          \"Apple hammerhead viroid-like circular RNA\"            [11] \"Apscaviroid\"                                         \"Arenaviridae\"                                         [13] \"Arteriviridae\"                                       \"Ascoviridae\"                                          [15] \"Asfarviridae\"                                        \"Astroviridae\"                                         [17] \"Avsunviroid\"                                         \"Baculoviridae\"                                        [19] \"Barnaviridae\"                                        \"Benyviridae\"                                          [21] \"Betaflexiviridae\"                                    \"Bicaudaviridae\"                                       [23] \"Birnaviridae\"                                        \"Bornaviridae\"                                         [25] \"Bromoviridae\"                                        \"Bunyaviridae\"                                         [27] \"Caliciviridae\"                                       \"Carmotetraviridae\"                                    [29] \"Caulimoviridae\"                                      \"Cherry leaf scorch small circular viroid-like RNA 1\"  [31] \"Cherry small circular viroid-like RNA\"               \"Chrysoviridae\"                                        [33] \"Circoviridae\"                                        \"Closteroviridae\"                                      [35] \"Cocadviroid\"                                         \"Coleviroid\"                                           [37] \"Coronaviridae\"                                       \"Corticoviridae\"                                       [39] \"Cystoviridae\"                                        \"Dicistroviridae\"                                      [41] \"Elaviroid\"                                           \"Endornaviridae\"                                       [43] \"Filoviridae\"                                         \"Flaviviridae\"                                         [45] \"Fusarividae\"                                         \"Fuselloviridae\"                                       [47] \"Gammaflexiviridae\"                                   \"Geminiviridae\"                                        [49] \"Genomoviridae\"                                       \"Globuloviridae\"                                       [51] \"Grapevine latent viroid\"                             \"Guttaviridae\"                                         [53] \"Hepadnaviridae\"                                      \"Hepeviridae\"                                          [55] \"Herpesviridae\"                                       \"Hostuviroid\"                                          [57] \"Hypoviridae\"                                         \"Hytrosaviridae\"                                       [59] \"Iflaviridae\"                                         \"Inoviridae\"                                           [61] \"Iridoviridae\"                                        \"Lavidaviridae\"                                        [63] \"Leviviridae\"                                         \"Lipothrixviridae\"                                     [65] \"Luteoviridae\"                                        \"Malacoherpesviridae\"                                  [67] \"Marnaviridae\"                                        \"Marseilleviridae\"                                     [69] \"Megabirnaviridae\"                                    \"Mesoniviridae\"                                        [71] \"Microviridae\"                                        \"Mimiviridae\"                                          [73] \"Mulberry small circular viroid-like RNA 1\"           \"Mymonaviridae\"                                        [75] \"Myoviridae\"                                          \"Nanoviridae\"                                          [77] \"Narnaviridae\"                                        \"Nimaviridae\"                                          [79] \"Nodaviridae\"                                         \"Nudiviridae\"                                          [81] \"Nyamiviridae\"                                        \"Ophioviridae\"                                         [83] \"Orthomyxoviridae\"                                    \"Other\"                                                [85] \"Papillomaviridae\"                                    \"Paramyxoviridae\"                                      [87] \"Partitiviridae\"                                      \"Parvoviridae\"                                         [89] \"Pelamoviroid\"                                        \"Permutotetraviridae\"                                  [91] \"Persimmon viroid\"                                    \"Phycodnaviridae\"                                      [93] \"Picobirnaviridae\"                                    \"Picornaviridae\"                                       [95] \"Plasmaviridae\"                                       \"Pneumoviridae\"                                        [97] \"Podoviridae\"                                         \"Polydnaviridae\"                                       [99] \"Polyomaviridae\"                                      \"Pospiviroid\"                                         [101] \"Potyviridae\"                                         \"Poxviridae\"                                          [103] \"Quadriviridae\"                                       \"Reoviridae\"                                          [105] \"Retroviridae\"                                        \"Rhabdoviridae\"                                       [107] \"Roniviridae\"                                         \"Rubber viroid India/2009\"                            [109] \"Rudiviridae\"                                         \"Secoviridae\"                                         [111] \"Siphoviridae\"                                        \"Sphaerolipoviridae\"                                  [113] \"Sunviridae\"                                          \"Tectiviridae\"                                        [115] \"Togaviridae\"                                         \"Tombusviridae\"                                       [117] \"Totiviridae\"                                         \"Turriviridae\"                                        [119] \"Tymoviridae\"                                         \"unclassified\"                                        [121] \"unclassified Pospiviroidae\"                          \"Virgaviridae\" meta.retrieval(kingdom = \"viral\", group = \"Adenoviridae\", db = \"refseq\", type = \"genome\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"meta-retrieval-of-genome-assembly-quality-information","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval","what":"Meta retrieval of genome assembly quality information","title":"Meta-Genome Retrieval","text":"Although much effort invested increase genome assembly quality new genomes published new versions released, influence genome assembly quality downstream analyses neglected. rule thumb , larger genome prone genome assembly errors therefore, reduction assembly quality. Veeckman et al., 2016 authors conclude: yet, uniform metrics standards place estimate completeness genome assembly annotated gene space, despite importance downstream analyses metagenomics studies, however, influence bias genome assembly quality outcome analysis (e.g. comparative genomics, annotation, etc.) neglected. better grasp genome assembly quality, NCBI databases store genome assembly statistics species genome assemblies available. example assembly statistics report can found : ftp://ftp.ncbi.nlm.nih.gov/genomes//GCF/000/001/405/GCF_000001405.36_GRCh38.p10/GCF_000001405.36_GRCh38.p10_assembly_stats.txt. biomartr package allows users retrieve genome assembly stats file automated way specifying argument type = \"assemblystats\" combine = TRUE. Please make sure combine = TRUE selecting type = \"assemblystats\". Analogously, information can retrieved kingdom kingdom = \"vertebrate_mammalian\". Please consult getKingdoms() available kingdoms.","code":"# show all elements of the data.frame options(tibble.print_max = Inf) # retrieve genome assembly stats for all mammal genome assemblies # and store these stats in a data.frame mammals.gc <- meta.retrieval(kingdom = \"vertebrate_mammalian\",                               db      = \"refseq\",                               type    = \"assemblystats\",                               combine = TRUE)  mammals.gc species total_length spanned_gaps unspanned_gaps region_count scaffold_count                       <chr>        <int>        <int>          <int>        <int>          <int> 1  Ornithorhynchus anatinus   1995607322       243698            137            0         200283 2      Sarcophilus harrisii           NA       201317              0            0          35974 3      Dasypus novemcinctus           NA       268413              0            0          46559 4       Erinaceus europaeus           NA       219764              0            0           5803 5         Echinops telfairi           NA       269444              0            0           8402 6           Pteropus alecto   1985975446       104566              0            0          65598 7     Rousettus aegyptiacus   1910250568          559              0            0             NA 8        Callithrix jacchus           NA       184972           2242            0          16399 9  Cebus capucinus imitator           NA       133441              0            0           7156 10          Cercocebus atys           NA        65319              0            0          11433 # ... with 89 more rows, and 9 more variables: scaffold_N50 <int>, scaffold_L50 <int>, #   scaffold_N75 <int>, scaffold_N90 <int>, contig_count <int>, contig_N50 <int>, total_gap_length <int>, #   molecule_count <int>, top_level_count <int>"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"metagenome-project-retrieval-from-ncbi-genbank","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval","what":"Metagenome project retrieval from NCBI Genbank","title":"Meta-Genome Retrieval","text":"NCBI Genbank stores metagenome projects addition species specific genome, proteome CDS sequences. retrieve metagenomes users can perform following combination commands: First, users can list project names available metagenomes typing Internally listMetaGenomes() function downloads assembly_summary.txt file ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/metagenomes/ retrieve available metagenome information. procedure might take seconds first run listMetaGenomes(). Subsequently, assembly_summary.txt file stored tempdir() directory achieve much faster access information following uses listMetaGenomes(). case users wish retrieve detailed information available metagenome projects can specify details = TRUE argument. Finally, users can retrieve available metagenomes using getMetaGenomes(). name argument receives metagenome project name retrieved listMetaGenomes(). path argument specifies folder path corresponding genomes shall stored. Internally, getMetaGenomes() creates folder specified path argument. Genomes associated metagenomes project specified name argument downloaded stored folder. return value getMetaGenomes() returns file paths genome files can used input read*() functions. Alternatively subsequent metagenome retrieval, users can retrieve annotation files genomes belonging metagenome project selected listMetaGenomes() using getMetaGenomeAnnotations() function. file paths downloaded *.gff retured getMetaGenomeAnnotations() can used input read.gff() function seqreadr package.","code":"# list available metagenomes at NCBI Genbank listMetaGenomes() [1] \"metagenome\"                     \"human gut metagenome\"           \"epibiont metagenome\"             [4] \"marine metagenome\"              \"soil metagenome\"                \"mine drainage metagenome\"        [7] \"mouse gut metagenome\"           \"marine sediment metagenome\"     \"termite gut metagenome\"         [10] \"hot springs metagenome\"         \"human lung metagenome\"          \"fossil metagenome\"              [13] \"freshwater metagenome\"          \"saltern metagenome\"             \"stromatolite metagenome\"        [16] \"coral metagenome\"               \"mosquito metagenome\"            \"fish metagenome\"                [19] \"bovine gut metagenome\"          \"chicken gut metagenome\"         \"wastewater metagenome\"          [22] \"microbial mat metagenome\"       \"freshwater sediment metagenome\" \"human metagenome\"               [25] \"hydrothermal vent metagenome\"   \"compost metagenome\"             \"wallaby gut metagenome\"         [28] \"groundwater metagenome\"         \"gut metagenome\"                 \"sediment metagenome\"            [31] \"ant fungus garden metagenome\"   \"food metagenome\"                \"hypersaline lake metagenome\"    [34] \"hydrocarbon metagenome\"         \"activated sludge metagenome\"    \"viral metagenome\"               [37] \"bioreactor metagenome\"          \"wasp metagenome\"                \"permafrost metagenome\"          [40] \"sponge metagenome\"              \"aquatic metagenome\"             \"insect gut metagenome\"          [43] \"activated carbon metagenome\"    \"anaerobic digester metagenome\"  \"rock metagenome\"                [46] \"terrestrial metagenome\"         \"rock porewater metagenome\"      \"seawater metagenome\"            [49] \"scorpion gut metagenome\"        \"soda lake metagenome\"           \"glacier metagenome\" # show all elements of the data.frame options(tibble.print_max = Inf) # detailed information on available metagenomes at NCBI Genbank listMetaGenomes(details = TRUE) # A tibble: 857 x 21    assembly_accession bioproject    biosample     wgs_master refseq_category  taxid species_taxid                 <chr>      <chr>        <chr>          <chr>           <chr>  <int>         <int> 1     GCA_000206185.1 PRJNA32359 SAMN02954317 AAGA00000000.1              na 256318        256318 2     GCA_000206205.1 PRJNA32355 SAMN02954315 AAFZ00000000.1              na 256318        256318 3     GCA_000206225.1 PRJNA32357 SAMN02954316 AAFY00000000.1              na 256318        256318 4     GCA_000208265.2 PRJNA17779 SAMN02954240 AASZ00000000.1              na 256318        256318 5     GCA_000208285.1 PRJNA17657 SAMN02954268 AATO00000000.1              na 256318        256318 6     GCA_000208305.1 PRJNA17659 SAMN02954269 AATN00000000.1              na 256318        256318 7     GCA_000208325.1 PRJNA16729 SAMN02954263 AAQL00000000.1              na 256318        256318 8     GCA_000208345.1 PRJNA16729 SAMN02954262 AAQK00000000.1              na 256318        256318 9     GCA_000208365.1 PRJNA13699 SAMN02954283 AAFX00000000.1              na 256318        256318 10    GCA_900010595.1 PRJEB11544 SAMEA3639840 CZPY00000000.1              na 256318        256318 # ... with 847 more rows, and 14 more variables: organism_name <chr>, infraspecific_name <chr>, #   isolate <chr>, version_status <chr>, assembly_level <chr>, release_type <chr>, genome_rep <chr>, #   seq_rel_date <date>, asm_name <chr>, submitter <chr>, gbrs_paired_asm <chr>, paired_asm_comp <chr>, #   ftp_path <chr>, excluded_from_refseq <chr> # retrieve all genomes belonging to the human gut metagenome project getMetaGenomes(name = \"human gut metagenome\", path = file.path(\"_ncbi_downloads\",\"human_gut\")) 1] \"The metagenome of 'human gut metagenome' has been downloaded to '_ncbi_downloads/human_gut'.\"   [1] \"_ncbi_downloads/human_gut/GCA_000205525.2_ASM20552v2_genomic.fna.gz\"   [2] \"_ncbi_downloads/human_gut/GCA_000205765.1_ASM20576v1_genomic.fna.gz\"   [3] \"_ncbi_downloads/human_gut/GCA_000205785.1_ASM20578v1_genomic.fna.gz\"   [4] \"_ncbi_downloads/human_gut/GCA_000207925.1_ASM20792v1_genomic.fna.gz\"   [5] \"_ncbi_downloads/human_gut/GCA_000207945.1_ASM20794v1_genomic.fna.gz\"   [6] \"_ncbi_downloads/human_gut/GCA_000207965.1_ASM20796v1_genomic.fna.gz\"   [7] \"_ncbi_downloads/human_gut/GCA_000207985.1_ASM20798v1_genomic.fna.gz\"   [8] \"_ncbi_downloads/human_gut/GCA_000208005.1_ASM20800v1_genomic.fna.gz\"   [9] \"_ncbi_downloads/human_gut/GCA_000208025.1_ASM20802v1_genomic.fna.gz\"  [10] \"_ncbi_downloads/human_gut/GCA_000208045.1_ASM20804v1_genomic.fna.gz\"  [11] \"_ncbi_downloads/human_gut/GCA_000208065.1_ASM20806v1_genomic.fna.gz\"  [12] \"_ncbi_downloads/human_gut/GCA_000208085.1_ASM20808v1_genomic.fna.gz\"  [13] \"_ncbi_downloads/human_gut/GCA_000208105.1_ASM20810v1_genomic.fna.gz\"  [14] \"_ncbi_downloads/human_gut/GCA_000208125.1_ASM20812v1_genomic.fna.gz\"  [15] \"_ncbi_downloads/human_gut/GCA_000208145.1_ASM20814v1_genomic.fna.gz\"  [16] \"_ncbi_downloads/human_gut/GCA_000208165.1_ASM20816v1_genomic.fna.gz\"  ... # retrieve all genomes belonging to the human gut metagenome project getMetaGenomeAnnotations(name = \"human gut metagenome\", path = file.path(\"_ncbi_downloads\",\"human_gut\",\"annotations\")) [1] \"The annotations of metagenome 'human gut metagenome' have been downloaded and stored at '_ncbi_downloads/human_gut/annotations'.\"   [1] \"_ncbi_downloads/human_gut/annotations/GCA_000205525.2_ASM20552v2_genomic.gff.gz\"   [2] \"_ncbi_downloads/human_gut/annotations/GCA_000205765.1_ASM20576v1_genomic.gff.gz\"   [3] \"_ncbi_downloads/human_gut/annotations/GCA_000205785.1_ASM20578v1_genomic.gff.gz\"   [4] \"_ncbi_downloads/human_gut/annotations/GCA_000207925.1_ASM20792v1_genomic.gff.gz\"   [5] \"_ncbi_downloads/human_gut/annotations/GCA_000207945.1_ASM20794v1_genomic.gff.gz\"   [6] \"_ncbi_downloads/human_gut/annotations/GCA_000207965.1_ASM20796v1_genomic.gff.gz\"   [7] \"_ncbi_downloads/human_gut/annotations/GCA_000207985.1_ASM20798v1_genomic.gff.gz\"   [8] \"_ncbi_downloads/human_gut/annotations/GCA_000208005.1_ASM20800v1_genomic.gff.gz\"   [9] \"_ncbi_downloads/human_gut/annotations/GCA_000208025.1_ASM20802v1_genomic.gff.gz\"  [10] \"_ncbi_downloads/human_gut/annotations/GCA_000208045.1_ASM20804v1_genomic.gff.gz\"  [11] \"_ncbi_downloads/human_gut/annotations/GCA_000208065.1_ASM20806v1_genomic.gff.gz\"  [12] \"_ncbi_downloads/human_gut/annotations/GCA_000208085.1_ASM20808v1_genomic.gff.gz\"  [13] \"_ncbi_downloads/human_gut/annotations/GCA_000208105.1_ASM20810v1_genomic.gff.gz\"  [13] \"_ncbi_downloads/human_gut/annotations/GCA_000208105.1_ASM20810v1_genomic.gff.gz\"  [14] \"_ncbi_downloads/human_gut/annotations/GCA_000208125.1_ASM20812v1_genomic.gff.gz\"  [15] \"_ncbi_downloads/human_gut/annotations/GCA_000208145.1_ASM20814v1_genomic.gff.gz\"  [16] \"_ncbi_downloads/human_gut/annotations/GCA_000208165.1_ASM20816v1_genomic.gff.gz\"  ..."},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieve-protein-sequences","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval > Metagenome project retrieval from NCBI Genbank","what":"Retrieve Protein Sequences","title":"Meta-Genome Retrieval","text":"Download mammalian vertebrate proteomes.","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieval-from-ncbi-refseq-1","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval > Metagenome project retrieval from NCBI Genbank","what":"Retrieval from NCBI RefSeq:","title":"Meta-Genome Retrieval","text":"","code":"# download all vertebrate genomes meta.retrieval(kingdom = \"vertebrate_mammalian\", db = \"refseq\", type = \"proteome\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieval-from-ncbi-genbank-1","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval > Metagenome project retrieval from NCBI Genbank","what":"Retrieval from NCBI Genbank:","title":"Meta-Genome Retrieval","text":"","code":"# download all vertebrate genomes meta.retrieval(kingdom = \"vertebrate_mammalian\", db = \"genbank\", type = \"proteome\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieval-from-ensembl-1","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval > Metagenome project retrieval from NCBI Genbank","what":"Retrieval from ENSEMBL:","title":"Meta-Genome Retrieval","text":"","code":"# download all Ensembl proteome sequneces meta.retrieval(kingdom = \"Ensembl\", db = \"ensembl\", type = \"proteome\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieve-cds-sequences","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval > Metagenome project retrieval from NCBI Genbank","what":"Retrieve CDS Sequences","title":"Meta-Genome Retrieval","text":"Download mammalian vertebrate CDS RefSeq (Genbank store CDS data).","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieval-from-ncbi-refseq-2","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval > Metagenome project retrieval from NCBI Genbank","what":"Retrieval from NCBI RefSeq:","title":"Meta-Genome Retrieval","text":"","code":"# download all vertebrate genomes meta.retrieval(kingdom = \"vertebrate_mammalian\", db = \"refseq\", type = \"cds\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieval-from-ncbi-genbank-2","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval > Metagenome project retrieval from NCBI Genbank","what":"Retrieval from NCBI Genbank:","title":"Meta-Genome Retrieval","text":"","code":"# download all vertebrate genomes meta.retrieval(kingdom = \"vertebrate_mammalian\", db = \"genbank\", type = \"cds\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieval-from-ensembl-2","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval > Metagenome project retrieval from NCBI Genbank","what":"Retrieval from ENSEMBL:","title":"Meta-Genome Retrieval","text":"","code":"# download all Ensembl CDS sequneces meta.retrieval(kingdom = \"Ensembl\", db = \"ensembl\", type = \"cds\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieve-gff-files","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval","what":"Retrieve GFF files","title":"Meta-Genome Retrieval","text":"Download mammalian vertebrate gff files. Example NCBI RefSeq: Example NCBI Genbank:","code":"# download all vertebrate gff files meta.retrieval(kingdom = \"vertebrate_mammalian\", db = \"refseq\", type = \"gff\", reference = FALSE) # download all vertebrate gff files meta.retrieval(kingdom = \"vertebrate_mammalian\", db = \"genbank\", type = \"gff\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieve-gtf-files","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval","what":"Retrieve GTF files","title":"Meta-Genome Retrieval","text":"Download mammalian vertebrate gtf files. Example ENSEMBL:","code":"# download all vertebrate gff files meta.retrieval(kingdom = \"Ensembl\", db = \"ensembl\", type = \"gtf\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieve-rna-sequences","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval","what":"Retrieve RNA sequences","title":"Meta-Genome Retrieval","text":"Download mammalian vertebrate RNA sequences NCBI RefSeq NCBI Genbank.","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieval-from-ncbi-refseq-3","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval > Retrieve RNA sequences","what":"Retrieval from NCBI RefSeq:","title":"Meta-Genome Retrieval","text":"","code":"# download all vertebrate RNA sequneces meta.retrieval(kingdom = \"vertebrate_mammalian\", db = \"refseq\", type = \"rna\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieval-from-ncbi-genbank-3","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval > Retrieve RNA sequences","what":"Retrieval from NCBI Genbank:","title":"Meta-Genome Retrieval","text":"","code":"# download all vertebrate RNA sequneces meta.retrieval(kingdom = \"vertebrate_mammalian\", db = \"genbank\", type = \"rna\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieval-from-ensembl-3","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval > Retrieve RNA sequences","what":"Retrieval from ENSEMBL:","title":"Meta-Genome Retrieval","text":"","code":"# download all Ensembl RNA sequneces meta.retrieval(kingdom = \"Ensembl\", db = \"ensembl\", type = \"rna\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieve-repeat-masker-sequences","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval","what":"Retrieve Repeat Masker Sequences","title":"Meta-Genome Retrieval","text":"Download mammalian vertebrate Repeat Masker Annotation files NCBI RefSeq NCBI Genbank.","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieval-from-ncbi-refseq-4","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval > Retrieve Repeat Masker Sequences","what":"Retrieval from NCBI RefSeq:","title":"Meta-Genome Retrieval","text":"","code":"# download all vertebrate RNA sequneces meta.retrieval(kingdom = \"vertebrate_mammalian\", db = \"refseq\", type = \"rm\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieval-from-ncbi-genbank-4","dir":"Articles","previous_headings":"Perform Meta-Genome Retrieval > Retrieve Repeat Masker Sequences","what":"Retrieval from NCBI Genbank:","title":"Meta-Genome Retrieval","text":"Users can obtain alternative kingdoms using getKingdoms().","code":"# download all vertebrate RNA sequneces meta.retrieval(kingdom = \"vertebrate_mammalian\", db = \"genbank\", type = \"rm\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"retrieve-individual-genomes-for-all-species-in-the-tree-of-life","dir":"Articles","previous_headings":"","what":"Retrieve Individual Genomes for all Species in the Tree of Life","title":"Meta-Genome Retrieval","text":"users wish download genomes, proteome, CDS, gff files species available RefSeq Genbank, can use meta.retrieval.() function purpose.","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"genome-retrieval","dir":"Articles","previous_headings":"Retrieve Individual Genomes for all Species in the Tree of Life","what":"Genome Retrieval","title":"Meta-Genome Retrieval","text":"Example RefSeq: Example Genbank:","code":"# download all geneomes stored in RefSeq meta.retrieval.all(db = \"refseq\", type = \"genome\", reference = FALSE) # download all geneomes stored in Genbank meta.retrieval.all(db = \"genbank\", type = \"genome\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html","id":"proteome-retrieval","dir":"Articles","previous_headings":"Retrieve Individual Genomes for all Species in the Tree of Life","what":"Proteome Retrieval","title":"Meta-Genome Retrieval","text":"Example RefSeq: Example Genbank: , exchanging type = \"proteome\" either type = \"genome\" type = \"cds\" type = \"rna\" type = \"assemblystats\" type = \"gff\" users can retrieve genome, CDS, RNA, genome assembly statistics GFF files instead proteomes.","code":"# download all proteome stored in RefSeq meta.retrieval.all(db = \"refseq\", type = \"proteome\", reference = FALSE) # download all proteome stored in Genbank meta.retrieval.all(db = \"genbank\", type = \"proteome\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"biological-sequence-retrieval","dir":"Articles","previous_headings":"","what":"Biological Sequence Retrieval","title":"Sequence Retrieval","text":"biomartr package allows users retrieve biological sequences simple intuitive way. Using biomartr, users can retrieve either genomes, proteomes, CDS, RNA, GFF, genome assembly statistics data using specialized functions: NOTE: make sure sufficiently stable (internet) connection R respective databases, please set default timeout setting local machine 60sec least 30000sec running retrieval functions via:","code":"options(timeout = 30000)"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"topics","dir":"Articles","previous_headings":"","what":"Topics","title":"Sequence Retrieval","text":"0.1 Listing total number available genomes . list total number available genomes database B. dealing kingdoms, groups, subgroups 1.1 NCBI RefSeq 1.2 NCBI Genbank 1.3 ENSEMBL 1.B. Multiple genome retrieval getGenomeSet() 2.1 NCBI RefSeq 2.2 NCBI Genbank 2.3 ENSEMBL 2.5 UniProt 2.B. Multiple proteome retrieval getProteomeSet() 3.1 NCBI RefSeq 3.2 NCBI Genbank 3.3 ENSEMBL 3.B. Multiple coding sequence retrieval getCDSSet() 4.1 NCBI RefSeq 4.2 NCBI Genbank 4.3 ENSEMBL 4.B. Multiple RNA retrieval getRNASet() 5.1 NCBI RefSeq 5.2 NCBI Genbank 5.3 ENSEMBL 5.B. Multiple GFF retrieval getGFFSet() 6.1 NCBI RefSeq 6.2 NCBI Genbank 6.3 ENSEMBL 7.1 NCBI RefSeq 8.1 NCBI RefSeq 8.2 NCBI Genbank 9.1 NCBI RefSeq 9.2 NCBI Genbank 9.3 NCBI ENSEMBL","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"getting-started-with-sequence-retrieval","dir":"Articles","previous_headings":"","what":"Getting Started with Sequence Retrieval","title":"Sequence Retrieval","text":"First users can check whether genome, proteome, CDS, RNA, GFF, GTF, genome assembly statistics interest available download. Using scientific name organism interest, users can check whether corresponding genome available via .genome.available() function. Please note first time run command might take , initial execution function necessary information retrieved NCBI stored locally. runs much faster.","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ncbi-refseq-is-genome-available","dir":"Articles","previous_headings":"Getting Started with Sequence Retrieval","what":"Example NCBI RefSeq (?is.genome.available):","title":"Sequence Retrieval","text":"case human genome, one entry NCBI RefSeq database (see message). specifying argument ‘details = TRUE’ users can retrieve information ‘Homo sapiens’ stored NCBI RefSeq. , find one possible versions human genome assembly_accession ID GCF_000001405.38. retrieving genome e.g. getGenome() organism argument can also specified using assembly_accession ID instead scientific name organism. true get*() functions. Hence, instead writing getGenome(db = \"refseq\", organism = \"Homo sapiens\"), users can specify getGenome(db = \"refseq\", organism = \"GCF_000001405.38\"). particularly useful one entry available one organism. Please note assembly_accession id might change internally external databases NCBI RefSeq. Thus writing automated scripts using assembly_accession id might stop working due internal change ids RefSeq. Recently, case assembly_accession id changed RefSeq GCF_000001405.37 GCF_000001405.38. Thus, scripts based screening entries .genome.available() stopped working, id GCF_000001405.37 couldn’t found anymore. cases users find several entries scientific name. might due fact ecotypes, strains, types sub-species available respective databases. example. search bacterium Mycobacterium tuberculosis NCBI RefSeq get 5377 hits. looking names organisms see consist different strains Mycobacterium tuberculosis. Now can use assembly_accession id retrieve Mycobacterium tuberculosis strain interested , e.g. Mycobacterium tuberculosis CDC1551.","code":"# checking whether or not the Homo sapiens  # genome is avaialable for download is.genome.available(db = \"refseq\", organism = \"Homo sapiens\") A reference or representative genome assembly is available for 'Homo sapiens'. [1] TRUE # checking whether or not the Homo sapiens  # genome is avaialable for download is.genome.available(db = \"refseq\", organism = \"Homo sapiens\", details = TRUE) assembly_accessi bioproject biosample wgs_master refseq_category taxid   <chr>             <chr>      <chr>     <chr>      <chr>           <int> 1 GCF_000001405.38  PRJNA168   NA        NA         reference geno  9606 # ... with 15 more variables: species_taxid <int>, organism_name <chr>, #   infraspecific_name <chr>, isolate <chr>, version_status <chr>, #   assembly_level <chr>, release_type <chr>, genome_rep <chr>, #   seq_rel_date <date>, asm_name <chr>, submitter <chr>, #   gbrs_paired_asm <chr>, paired_asm_comp <chr>, ftp_path <chr>, #   excluded_from_refseq <chr> is.genome.available(organism = \"Mycobacterium tuberculosis\", db = \"refseq\", details = TRUE) A tibble: 6,744 x 21    assembly_accessi bioproject  biosample  wgs_master  refseq_category    <chr>             <chr>       <chr>      <chr>       <chr>            1 GCF_000729745.1   PRJNA224116 SAMN02899 JPFP000000 na               2 GCF_000729755.1   PRJNA224116 SAMN02899 JPFQ000000 na               3 GCF_000729765.1   PRJNA224116 SAMN02899 JPFR000000 na               4 GCF_000749605.1   PRJNA224116 SAMN02902 JQES000000 na               5 GCF_000749615.1   PRJNA224116 SAMN02902 JQER000000 na               6 GCF_000749625.1   PRJNA224116 SAMN02902 JQEQ000000 na               7 GCF_000749665.1   PRJNA224116 SAMN02902 JQEV000000 na               8 GCF_000749675.1   PRJNA224116 SAMN02902 JQET000000 na               9 GCF_000749685.1   PRJNA224116 SAMN02902 JQEN000000 na              10 GCF_000749725.1   PRJNA224116 SAMN02902 JQEM000000 na                with 6,734 more rows, and 16 more variables: taxid <int>,    species_taxid <int>, organism_name <chr>,    infraspecific_name <chr>, isolate <chr>, version_status <chr>,    assembly_level <chr>, release_type <chr>, genome_rep <chr>,    seq_rel_date <date>, asm_name <chr>, submitter <chr>,    gbrs_paired_asm <chr>, paired_asm_comp <chr>, ftp_path <chr>,    excluded_from_refseq <chr> tail(is.genome.available(organism = \"Mycobacterium tuberculosis\",                           db = \"refseq\",                           details = TRUE)$organism_name) [1] \"Mycobacterium tuberculosis CDC1551\"      [2] \"Mycobacterium tuberculosis H37Ra\"        [3] \"Mycobacterium tuberculosis F11\"          [4] \"Mycobacterium tuberculosis KZN 1435\"     [5] \"Mycobacterium tuberculosis SUMu001\"      [6] \"Mycobacterium tuberculosis str. Haarlem\" MtbCDC1551 <- getGenome(db = \"refseq\",                          organism = \"GCF_000008585.1\",                           path   = file.path(\"_ncbi_downloads\",\"genomes\"),                          reference = FALSE)                          MtbCDC1551_genome <- read_genome(MtbCDC1551)  MtbCDC1551_genome A DNAStringSet instance of length 1       width seq                             names                [1] 4403837 TTGACCGATGACCC...AGGGAGATACGTCG NC_002755.2 Mycob..."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"using-the-ncbi-taxonomy-id-instead-of-the-scientific-name-to-screen-for-organism-availability","dir":"Articles","previous_headings":"Getting Started with Sequence Retrieval > Example NCBI RefSeq (?is.genome.available):","what":"Using the NCBI Taxonomy ID instead of the scientific name to screen for organism availability","title":"Sequence Retrieval","text":"Instead specifying scientific name organism interest users can specify NCBI Taxonomy identifier (= taxid) corresponding organism. example, taxid Homo sapiens 9606. Now users can specify organism = \"9606\" retrieve entries Homo sapiens:","code":"# checking availability for Homo sapiens using its taxid is.genome.available(db = \"refseq\", organism = \"9606\", details = TRUE) assembly_accession bioproject biosample wgs_master refseq_category  taxid   <chr>              <chr>      <chr>     <chr>      <chr>            <int> 1 GCF_000001405.38   PRJNA168   NA        NA         reference genome  9606 # ... with 15 more variables: species_taxid <int>, organism_name <chr>, #   infraspecific_name <chr>, isolate <chr>, version_status <chr>, #   assembly_level <chr>, release_type <chr>, genome_rep <chr>, #   seq_rel_date <date>, asm_name <chr>, submitter <chr>, #   gbrs_paired_asm <chr>, paired_asm_comp <chr>, ftp_path <chr>, #   excluded_from_refseq <chr>"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"using-the-accession-id-instead-of-the-scientific-name-or-taxid-to-screen-for-organism-availability","dir":"Articles","previous_headings":"Getting Started with Sequence Retrieval > Example NCBI RefSeq (?is.genome.available):","what":"Using the accession ID instead of the scientific name or taxid to screen for organism availability","title":"Sequence Retrieval","text":"Finally, instead specifying either scientific name organism interest taxid, users can specify accession ID organism interest. following example use accession ID Homo sapiens (= GCF_000001405.38):","code":"# checking availability for Homo sapiens using its taxid is.genome.available(db = \"refseq\", organism = \"GCF_000001405.38\", details = TRUE) assembly_accession bioproject biosample wgs_master refseq_category  taxid   <chr>              <chr>      <chr>     <chr>      <chr>            <int> 1 GCF_000001405.38   PRJNA168   NA        NA         reference genome  9606 # ... with 15 more variables: species_taxid <int>, organism_name <chr>, #   infraspecific_name <chr>, isolate <chr>, version_status <chr>, #   assembly_level <chr>, release_type <chr>, genome_rep <chr>, #   seq_rel_date <date>, asm_name <chr>, submitter <chr>, #   gbrs_paired_asm <chr>, paired_asm_comp <chr>, ftp_path <chr>, #   excluded_from_refseq <chr>"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"a-small-negative-example","dir":"Articles","previous_headings":"Getting Started with Sequence Retrieval > Example NCBI RefSeq (?is.genome.available):","what":"A small negative example","title":"Sequence Retrieval","text":"cases organism interest available NCBI RefSeq. example: now checking availability NCBI Genbank find indeed ‘Candida glabrata’ available: Although, entry available .genome.available() warns us non-reference genome available ‘Candida glabrata’. retrieve e.g. genome etc. files users need specify reference = FALSE argument get*() functions. example:","code":"# check genome availability for Candida glabrata is.genome.available(db = \"refseq\", organism = \"Candida glabrata\") Unfortunatey, no entry for 'Candida glabrata' was found in the 'refseq' database.  Please consider specifying 'db = genbank' or 'db = ensembl'  to check whether 'Candida glabrata' is availabe in these databases. [1] FALSE # check genome availability for Candida glabrata is.genome.available(db = \"genbank\", organism = \"Candida glabrata\") Only a non-reference genome assembly is available for 'Candida glabrata'.  Please make sure to specify the argument 'reference = FALSE' when running any get*() function. [1] TRUE # retrieve non-reference genome  getGenome(db = \"genbank\", organism = \"Candida glabrata\", reference = FALSE) Unfortunately no genome file could be found for organism 'Candida glabrata'. Thus, the download of this organism has been omitted. Have you tried to specify 'reference = FALSE' ? [1] \"Not available\""},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ncbi-genbank-is-genome-available","dir":"Articles","previous_headings":"Getting Started with Sequence Retrieval","what":"Example NCBI Genbank (?is.genome.available):","title":"Sequence Retrieval","text":"Test whether genome Homo sapiens present NCBI Genbank. Now details = TRUE. can see several versions Homo sapiens genome available download NCBI Genbank. Using assembly_accession id now allow specify version shall retrieved.","code":"# checking whether or not the Homo sapiens  # genome is avaialable for download is.genome.available(db = \"genbank\", organism = \"Homo sapiens\") A reference or representative genome assembly is available for 'Homo sapiens'.                            More than one entry was found for 'Homo sapiens'. Please consider to run the function 'is.genome.available()' and specify 'is.genome.available(organism = Homo sapiens, db = genbank, details = TRUE)'. This will allow you to select the 'assembly_accession' identifier that can then be specified in all get*() functions. [1] TRUE # checking whether or not the Homo sapiens  # genome is avaialable for download is.genome.available(db = \"genbank\", organism = \"Homo sapiens\", details = TRUE) A tibble: 1,041 x 23                                                                                       assembly_accession bioproject biosample  wgs_master refseq_category    <chr>              <chr>      <chr>      <chr>      <chr>            1 GCA_000001405.28   PRJNA31257 NA         NA         reference geno  2 GCA_000002115.2    PRJNA1431  SAMN02981 AADD00000 na               3 GCA_000002125.2    PRJNA19621 SAMN02981 ABBA00000 na               4 GCA_000002135.3    PRJNA10793 NA         NA         na               5 GCA_000004845.2    PRJNA42199 SAMN00003 ADDF00000 na               6 GCA_000005465.1    PRJNA42201 NA         DAAB00000 na               7 GCA_000181135.1    PRJNA28335 SAMN00001 ABKV00000 na               8 GCA_000185165.1    PRJNA59877 SAMN02981 AEKP00000 na               9 GCA_000212995.1    PRJNA19621 SAMN02981 ABSL00000 na              10 GCA_000252825.1    PRJNA19621 SAMN02981 ABBA00000 na              #  with 1,031 more rows, and 18 more variables: taxid <int>, #   species_taxid <int>, organism_name <chr>, #   infraspecific_name <chr>, isolate <chr>, version_status <chr>, #   assembly_level <chr>, release_type <chr>, genome_rep <chr>, #   seq_rel_date <date>, asm_name <chr>, submitter <chr>, #   gbrs_paired_asm <chr>, paired_asm_comp <chr>, ftp_path <chr>, #   excluded_from_refseq <chr>, X22 <chr>, X23 <chr>"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"using-is-genome-available-with-ensembl","dir":"Articles","previous_headings":"Getting Started with Sequence Retrieval","what":"Using is.genome.available() with ENSEMBL","title":"Sequence Retrieval","text":"Users can also specify db = \"ensembl\" retrieve available organisms provided ENSEMBL. , users might experience delay execution function running first time. due download ENSEMBL information stored internally enable much faster execution function following runs. corresponding information files stored file.path(tempdir(), \"ensembl_summary.txt\").","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ensembl-is-genome-available","dir":"Articles","previous_headings":"Getting Started with Sequence Retrieval","what":"Example ENSEMBL (?is.genome.available):","title":"Sequence Retrieval","text":", users can either specify taxid accession id searching organism entries. Please note accession id can change internally ENSEMBL. E.g. recent case accession id changed GCA_000001405.25 GCA_000001405.27. Hence, please careful take issue account build automated retrieval scripts based accession ids.","code":"# cheking whether Homo sapiens is available in the ENSEMBL database is.genome.available(db = \"ensembl\", organism = \"Homo sapiens\") A reference or representative genome assembly is available for 'Homo sapiens'. [1] TRUE # retrieve details for Homo sapiens is.genome.available(db = \"ensembl\", organism = \"Homo sapiens\", details = TRUE) division           assembly accession  release name  taxon_id strain   <chr>              <chr>    <chr>        <int> <chr>    <int> <chr>  1 EnsemblVertebrates GRCh38   GCA_00000     104 homo     9606 NA     #  with 3 more variables: display_name <chr>, common_name <chr>, #   strain_collection <chr> # retrieve details for Homo sapiens using taxid is.genome.available(db = \"ensembl\", organism = \"9606\", details = TRUE) division           assembly accession  release name  taxon_id strain   <chr>              <chr>    <chr>        <int> <chr>    <int> <chr>  1 EnsemblVertebrates GRCh38   GCA_00000     104 homo     9606 NA     #  with 3 more variables: display_name <chr>, common_name <chr>, #   strain_collection <chr> # retrieve details for Homo sapiens using accession id is.genome.available(organism = \"GCA_000001405.28\", db = \"ensembl\", details = TRUE) division           assembly accession  release name  taxon_id strain   <chr>              <chr>    <chr>        <int> <chr>    <int> <chr>  1 EnsemblVertebrates GRCh38   GCA_00000     104 homo     9606 NA     #  with 3 more variables: display_name <chr>, common_name <chr>, #   strain_collection <chr>"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-uniprot-is-genome-available","dir":"Articles","previous_headings":"Getting Started with Sequence Retrieval","what":"Example UniProt (?is.genome.available):","title":"Sequence Retrieval","text":"Users can also check availability proteomes UniProt database specifying: details: Users can also search available species UniProt via taxid upid id. 9606 defines taxonomy id Homo sapiens. UP000005640 defines upid Homo sapiens. general, argument db specifies database (refseq, genbank, ensembl uniprot) organism information shall retrieved. Options : db = 'refseq' db = 'genbank' db = 'ensembl' db = 'uniprot'","code":"# retrieve information from UniProt is.genome.available(db = \"uniprot\", \"Homo sapiens\", details = FALSE) A reference or representative genome assembly is available for 'Homo sapiens'. More than one entry was found for 'Homo sapiens'. Please consider to run the function 'is.genome.available()' and specify 'is.genome.available(organism = Homo sapiens, db = uniprot, details = TRUE)'. This will allow you to select the 'assembly_accession' identifier that can then be specified in all get*() functions. [1] TRUE # retrieve information from UniProt is.genome.available(db = \"uniprot\", \"Homo sapiens\", details = TRUE) A tibble: 29 x 16    name          description        isReferenceProte isRepresentativ    <chr>         <chr>              <lgl>             <lgl>             1 Homo sapiens Homo sapiens (Hom TRUE              TRUE              2 Human associ NA                 FALSE             TRUE              3 Human respir NA                 FALSE             FALSE             4 Human respir NA                 FALSE             FALSE             5 Human respir NA                 FALSE             FALSE             6 Human respir NA                 FALSE             FALSE             7 Human respir NA                 FALSE             FALSE             8 Human respir NA                 FALSE             FALSE             9 Human respir NA                 FALSE             FALSE            10 Human respir NA                 FALSE             FALSE            #  with 19 more rows, and 12 more variables: #   genomeAssembly <df[,4]>, dbReference <list>, component <list>, #   reference <list>, annotationScore <df[,1]>, scores <list>, #   upid <chr>, modified <dbl>, taxonomy <int>, source <chr>, #   superregnum <chr>, strain <chr> # retrieve information from UniProt is.genome.available(db = \"uniprot\", \"9606\", details = TRUE) A tibble: 3 x 15   name  description isReferenceProt isRepresentativ genomeAssembly$   <chr> <chr>       <lgl>            <lgl>            <chr>            1 Homo Homo sapie TRUE             TRUE             Ensembl          2 Homo NA          FALSE            FALSE            ENA/EMBL         3 Homo NA          FALSE            FALSE            ENA/EMBL         #  with 10 more variables: dbReference <list>, component <list>, #   reference <list>, annotationScore <df[,1]>, scores <list>, #   upid <chr>, modified <dbl>, taxonomy <int>, source <chr>, #   superregnum <chr> # retrieve information from UniProt is.genome.available(db = \"uniprot\", \"UP000005640\", details = TRUE) name  description isReferenceProt isRepresentativ genomeAssembly$   <chr> <chr>       <lgl>            <lgl>            <chr>            1 Homo Homo sapie TRUE             TRUE             Ensembl          #  with 10 more variables: dbReference <list>, component <list>, #   reference <list>, annotationScore <df[,1]>, scores <list>, #   upid <chr>, modified <dbl>, taxonomy <int>, source <chr>, #   superregnum <chr>"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"listing-the-total-number-of-available-genomes","dir":"Articles","previous_headings":"Getting Started with Sequence Retrieval","what":"Listing the total number of available genomes","title":"Sequence Retrieval","text":"cases might useful check many genomes (total) available different databases. Users can determine total number available genomes using listGenomes() function. Example refseq: Example genbank: Example ensembl: Hence, currently 24910 genomes (including kingdoms life) stored NCBI RefSeq (16/11/2021).","code":"length(listGenomes(db = \"refseq\")) [1] 24910 length(listGenomes(db = \"genbank\")) [1] 35298 length(listGenomes(db = \"ensembl\")) [1] 310"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"retrieving-kingdom-group-and-subgroup-information","dir":"Articles","previous_headings":"Getting Started with Sequence Retrieval","what":"Retrieving kingdom, group and subgroup information","title":"Sequence Retrieval","text":"Using example users can retrieve number available species kingdom life: Example refseq: Example genbank: Example ENSEMBL:","code":"# the number of genomes available for each kingdom listKingdoms(db = \"refseq\") Archaea  Bacteria Eukaryota   Viruses        479     16255      1383     12916 # the number of genomes available for each kingdom listKingdoms(db = \"genbank\") Archaea  Bacteria Eukaryota       1902     32532     12404 # the number of genomes available for each kingdom listKingdoms(db = \"ensembl\") Starting information retrieval for: EnsemblVertebrates Starting information retrieval for: EnsemblPlants                  Starting information retrieval for: EnsemblFungi                   Starting information retrieval for: EnsemblMetazoa                 Starting information retrieval for: EnsemblBacteria                                                                                      EnsemblBacteria       EnsemblFungi     EnsemblMetazoa               31332               1504                251       EnsemblPlants EnsemblVertebrates                 150                317"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"analogous-computations-can-be-performed-for-groups-and-subgroups","dir":"Articles","previous_headings":"Getting Started with Sequence Retrieval","what":"Analogous computations can be performed for groups and subgroups","title":"Sequence Retrieval","text":"Unfortunately, ENSEMBL provide group subgroup information. Therefore, group subgroup listings limited refseq genbank. Example refseq: Example genbank: Note running listGenomes() function first time, might take function returns results, necessary information need downloaded NCBI ENSEMBL databases. subsequent executions listGenomes() respond fast, access corresponding files stored hard drive.","code":"# the number of genomes available for each group listGroups(db = \"refseq\") Abditibacteriota                                                 1                                 Acidithiobacillia                                                 8                                    Acidobacteriia                                                22                                  Ackermannviridae                                                65                                    Actinobacteria                                              2640                                      Adenoviridae                                                64                                      Adomaviridae                                                 2                                      Aliusviridae                                                 2                                 Alloherpesviridae                                                13                                 Alphaflexiviridae                                                62                               Alphaproteobacteria                                              1762    ... # the number of genomes available for each group listGroups(db = \"genbank\") Abditibacteriota                       Acidithiobacillia                                        1                                       8                           Acidobacteriia                          Actinobacteria                                       24                                    1596                      Alphaproteobacteria                              Amphibians                                     1604                                       6                            Apicomplexans                               Aquificae                                       47                                       7                             Archaeoglobi                         Armatimonadetes                                        5                                      38                              Ascomycetes                Bacteria candidate phyla                                      689                                    3532             Bacteroidetes/Chlorobi group                               Balneolia                                     2247                                      44                           Basidiomycetes                      Betaproteobacteria                                      204                                     751                                    Birds                          Blastocatellia                                       80                                       2                             Caldisericia                  candidate division WS1                                        1                                       1          candidate division Zixibacteria               Candidatus Aegiribacteria                                       17                                       1               Candidatus Aenigmarchaeota               Candidatus Bathyarchaeota                                       14                                      42                 Candidatus Cloacimonetes               Candidatus Diapherotrites                                       88                                      11              Candidatus Fermentibacteria            Candidatus Geothermarchaeota                                        8                                       3             Candidatus Heimdallarchaeota              Candidatus Hydrogenedentes                                        4                                      10                  Candidatus Korarchaeota                    Candidatus Kryptonia                                        1                                       4          Candidatus Lambdaproteobacteria              Candidatus Latescibacteria                                        6                                      13                 Candidatus Lokiarchaeota               Candidatus Marinimicrobia                                        2                                      92                 Candidatus Marsarchaeota                Candidatus Micrarchaeota                                       15                                      35                  Candidatus Moduliflexus             Candidatus Muproteobacteria                                        1                                      14             Candidatus Nanohaloarchaeota                Candidatus Odinarchaeota                                       16                                       1                  Candidatus Omnitrophica                Candidatus Pacearchaeota                                      126                                      41                 Candidatus Parvarchaeota                Candidatus Tectomicrobia                                       11                                       6                 Candidatus Thorarchaeota                 Candidatus Vecturithrix                                        7                                       1           Candidatus Verstraetearchaeota               Candidatus Woesearchaeota                                        5                                      36                               Chlamydiae                             Chloroflexi                                       43                                     403                           Chrysiogenetes                    Coprothermobacterota                                        1                                       1                            Crenarchaeota     Cyanobacteria/Melainabacteria group                                       54                                     172                          Deferribacteres                     Deinococcus-Thermus                                        8                                      27               delta/epsilon subdivisions                            Dictyoglomia                                      615                                       1                            Elusimicrobia                            Endomicrobia                                        1                                       2                    environmental samples                           Fibrobacteres                                        3                                      15                               Firmicutes                                  Fishes                                     2663                                     168                                Flatworms                           Fusobacteriia                                       35                                      29                      Gammaproteobacteria                        Gemmatimonadetes                                     2041                                      82                              Green Algae                            Hadesarchaea                                       30                                       5                             Halobacteria                              Holophagae                                      162                                       9                        Hydrogenophilalia                                 Insects                                       32                                     280                             Kinetoplasts                      Kiritimatiellaeota                                       33                                       3                              Land Plants                           Lentisphaerae                                      282                                      32                                  Mammals                         Methanobacteria                                      145                                      31                             Methanococci                         Methanomicrobia                                        2                                      77                    Methanonatronarchaeia                             Methanopyri                                        2                                       1                            Nanoarchaeota nitrifying bacterium enrichment culture                                       11                                       1                              Nitrospinae                              Nitrospira                                       19                                      31                              Oligoflexia                                   Other                                       87                                      15                            Other Animals                             Other Fungi                                      125                                      58                             Other Plants                          Other Protists                                        1                                     128                           Planctomycetes                                Reptiles                                      171                                      21                             Rhodothermia                              Roundworms                                        4                                      91                             Solibacteres                            Spirochaetia                                        7                                     115                              Synergistia                             Tenericutes                                       43                                     141                           Thaumarchaeota                           Theionarchaea                                       92                                       2                              Thermococci                   Thermodesulfobacteria                                       21                                       7                           Thermoplasmata                             Thermotogae                                      135                                      23               unclassified Acidobacteria    unclassified Archaea (miscellaneous)                                       94                                      52    unclassified Bacteria (miscellaneous)                unclassified Caldiserica                                      197                                      11             unclassified Calditrichaeota              unclassified Elusimicrobia                                        2                                     101               unclassified Euryarchaeota                unclassified Nitrospirae                                      348                                      90              unclassified Proteobacteria            unclassified Rhodothermaeota                                      130                                       4                unclassified Spirochaetes              unclassified Synergistetes                                       37                                       3                 unclassified Thermotogae                     uncultured archaeon                                        1                                       1              uncultured archaeon A07HB70             uncultured archaeon A07HN63                                        1                                       1              uncultured archaeon A07HR60             uncultured archaeon A07HR67                                        1                                       1                     uncultured bacterium                         Verrucomicrobia                                        1                                     296                       Zetaproteobacteria                                       41"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"downloading-biological-sequences-and-annotations","dir":"Articles","previous_headings":"","what":"Downloading Biological Sequences and Annotations","title":"Sequence Retrieval","text":"checking availability sequence information organism interest, next step download corresponding genome, proteome, CDS, GFF file. following functions allow users download proteomes, genomes, CDS GFF files several database resources : NCBI RefSeq, NCBI Genbank, ENSEMBL. corresponding proteome, genome, CDS GFF file loaded hard-drive, documentation *.txt file generated storing File Name, Organism, Database, URL, DATE, assembly_accession, bioproject, biosample, taxid, version_status, release_type, seq_rel_date etc. information retrieved file. way better reproducibility proteome, genome, CDS GFF versions used subsequent data analyses can achieved.","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"genome-retrieval","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"Genome Retrieval","title":"Sequence Retrieval","text":"easiest way download genome use getGenome() function. example download genome Homo sapiens. getGenome() function interface function NCBI RefSeq, NCBI Genbank, ENSEMBL databases corresponding genomes can retrieved. db argument specifies database genome assemblies *.fasta file format shall retrieved. Options : db = \"refseq\" retrieval NCBI RefSeq db = \"genbank\" retrieval NCBI Genbank db = \"ensembl\" retrieval ENSEMBL Furthermore, users need specify scientific name, taxid (= NCBI Taxnonomy identifier), accession identifier organism interest genome assembly shall downloaded, e.g. organism = \"Homo sapiens\" organism = \"9606\" organism = \"GCF_000001405.37\". Finally, path argument specifies folder path corresponding assembly shall locally stored. case users like store genome file different location, can specify path = file.path(\"put\",\"\",\"path\",\"\") argument (e.g. file.path(\"_ncbi_downloads\",\"genomes\")).","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ncbi-refseq","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"Example NCBI RefSeq:","title":"Sequence Retrieval","text":"example, getGenome() creates directory named '_ncbi_downloads/genomes' corresponding genome named GCF_000001405.34_GRCh38.p8_genomic.fna.gz downloaded. return value getGenome() folder path downloaded genome file can used input read_genome() function. variable HS.genome.refseq stores path downloaded genome. Users can also omit path argument wish store genome current working directory. E.g.: Subsequently, users can use read_genome() function import genome R session. Users can choose work genome sequence R either Biostrings object (obj.type = \"Biostrings\") data.table object (obj.type = \"data.table\") specifying obj.type argument read_genome() function. Internally, text file named doc_Homo_sapiens_db_refseq.txt generated. information stored log file structured follows: addition, genome summary statistics retrieved species stored locally (doc_Homo_sapiens_db_refseq_summary_statistics.tsv) provide users insights regarding genome assembly quality (see ?summary_genome() details). file can used Supplementary Information file publications facilitate reproducible research. comparative genomics studies consider differences genome assembly qualities comparing genomes diverse species. way, expose technical artifacts might generate patterns mistaken biological relevance whereas reality just reflect difference genome assembly quality. Considering quality genome assemblies downloading genomic sequences help researchers avoid pitfalls. summary statistics include: genome_size_mbp: Genome size mega base pairs n50_mbp: N50 contig size genome assembly mega base pairs n_seqs: number chromosomes/scaffolds/contigs genome assembly file n_nnn: absolute number NNNs (chromosomes scaffolds contigs) genome assembly file rel_nnn: percentage (relative frequency) NNNs (chromosomes scaffolds contigs) compared total number nucleotides genome assembly file genome_entropy: Shannon Entropy genome assembly file (median entropy individual chromosome entropies) n_gc: total number GCs (chromosomes scaffolds contigs) genome assembly file rel_gc: (relative frequency) GCs (chromosomes scaffolds contigs) compared total number nucleotides genome assembly file summary, getGenome() read_genome() functions allow users retrieve genome assemblies specifying scientific name organism interest allow import retrieved genome assembly e.g. Biostrings object. Thus, users can perform Biostrings notation work downloaded genomes can rely log file generated getGenome() better document source version genome assemblies used subsequent studies. Alternatively, users can perform pipeline logic magrittr package:","code":"# download the genome of Homo sapiens from refseq # and store the corresponding genome file in '_ncbi_downloads/genomes' HS.genome.refseq <- getGenome( db       = \"refseq\",                                 organism = \"Homo sapiens\",                                path     = file.path(\"_ncbi_downloads\",\"genomes\") ) # download the genome of Homo sapiens from refseq # and store the corresponding genome file in '_ncbi_downloads/genomes' HS.genome.refseq <- getGenome( db       = \"refseq\",                                 organism = \"Homo sapiens\") # import downloaded genome as Biostrings object Human_Genome <- read_genome(file = HS.genome.refseq) # look at the Biostrings object Human_Genome A DNAStringSet instance of length 551           width seq                                                names                  [1] 248956422 NNNNNNNNNNNNNNNNNNNNNNNN...NNNNNNNNNNNNNNNNNNNNNNN NC_000001.11 Homo...   [2]    175055 GAATTCAGCTGAGAAGAACAGGCA...TGTTTGTCAGTCACATAGAATTC NT_187361.1 Homo ...   [3]     32032 AGGGGTCTGCTTAGAGAGGGTCTC...TGACTTACGTTGACGTGGAATTC NT_187362.1 Homo ...   [4]    127682 GATCGAGACTATCCTGGCTAACAC...ATTGTCAATTGGGACCTTTGATC NT_187363.1 Homo ...   [5]     66860 GAATTCATTCGATGACGATTCCAT...AAAAAACTCTCAGCCACGAATTC NT_187364.1 Homo ...   ...       ... ... [547]    170148 TTTCTTTCTTTTTTTTTTTTTTGT...GTCACAGGACTCATGGGGAATTC NT_187685.1 Homo ... [548]    215732 TGTGGTGAGGACCCTTAAGATCTA...GTCACAGGACTCATGGGGAATTC NT_187686.1 Homo ... [549]    170537 TCTACTCTCCCATGCTTGCCTCGG...GTCACAGGACTCATGGGGAATTC NT_187687.1 Homo ... [550]    177381 GATCTATCTGTATCTCCACAGGTG...GTCACAGGACTCATGGGGAATTC NT_113949.2 Homo ... [551]     16569 GATCACAGGTCTATCACCCTATTA...CCCTTAAATAAGACATCACGATG NC_012920.1 Homo ... File Name: Homo_sapiens_genomic_refseq.fna.gz Organism Name: Homo_sapiens Database: NCBI refseq URL: ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/405/ GCF_000001405.35_GRCh38.p9/GCF_000001405.35_GRCh38.p9_genomic.fna.gz Download_Date: Sat Oct 22 12:41:07 2016 refseq_category: reference genome assembly_accession: GCF_000001405.35 bioproject: PRJNA168 biosample: NA taxid: 9606 infraspecific_name: NA version_status: latest release_type: Patch genome_rep: Full seq_rel_date: 2016-09-26 submitter: Genome Reference Consortium # install.packages(\"magrittr\") library(magrittr) # import genome as Biostrings object Human_Genome <- getGenome( db       = \"refseq\",                             organism = \"Homo sapiens\",                            path     = file.path(\"_ncbi_downloads\",\"genomes\")) %>%     read_genome() Human_Genome A DNAStringSet instance of length 551           width seq                                                names                  [1] 248956422 NNNNNNNNNNNNNNNNNNNNNNNN...NNNNNNNNNNNNNNNNNNNNNNN NC_000001.11 Homo...   [2]    175055 GAATTCAGCTGAGAAGAACAGGCA...TGTTTGTCAGTCACATAGAATTC NT_187361.1 Homo ...   [3]     32032 AGGGGTCTGCTTAGAGAGGGTCTC...TGACTTACGTTGACGTGGAATTC NT_187362.1 Homo ...   [4]    127682 GATCGAGACTATCCTGGCTAACAC...ATTGTCAATTGGGACCTTTGATC NT_187363.1 Homo ...   [5]     66860 GAATTCATTCGATGACGATTCCAT...AAAAAACTCTCAGCCACGAATTC NT_187364.1 Homo ...   ...       ... ... [547]    170148 TTTCTTTCTTTTTTTTTTTTTTGT...GTCACAGGACTCATGGGGAATTC NT_187685.1 Homo ... [548]    215732 TGTGGTGAGGACCCTTAAGATCTA...GTCACAGGACTCATGGGGAATTC NT_187686.1 Homo ... [549]    170537 TCTACTCTCCCATGCTTGCCTCGG...GTCACAGGACTCATGGGGAATTC NT_187687.1 Homo ... [550]    177381 GATCTATCTGTATCTCCACAGGTG...GTCACAGGACTCATGGGGAATTC NT_113949.2 Homo ... [551]     16569 GATCACAGGTCTATCACCCTATTA...CCCTTAAATAAGACATCACGATG NC_012920.1 Homo ..."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"use-taxid-id-for-genome-retrieval","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations > Example NCBI RefSeq:","what":"Use taxid id for genome retrieval","title":"Sequence Retrieval","text":"Alternatively, instead specifying scientific name argument organism users can specify taxonomy id corresponding organism. , specify taxonomy id 559292 encodes species Saccharomyces cerevisiae.","code":"# install.packages(\"magrittr\") library(magrittr) # import genome as Biostrings object Scerevisiae_Genome <- getGenome(             db       = \"refseq\",             organism = \"559292\") %>%     read_genome() Scerevisiae_Genome A DNAStringSet instance of length 17        width seq                                      names                 [1]  230218 CCACACCACACCCACACAC...GGGTGTGGTGTGTGTGGG NC_001133.9 Sacch...  [2]  813184 AAATAGCCCTCATGTACGT...TGTGGTGTGTGGGTGTGT NC_001134.8 Sacch...  [3]  316620 CCCACACACCACACCCACA...GTGGGTGTGGTGTGTGTG NC_001135.5 Sacch...  [4] 1531933 ACACCACACCCACACCACA...GTAGTAAGTAGCTTTTGG NC_001136.10 Sacc...  [5]  576874 CGTCTCCTCCAAGCCCTGT...ATTTTCATTTTTTTTTTT NC_001137.3 Sacch...  ...     ... ... [13]  924431 CCACACACACACCACACCC...TGTGGTGTGTGTGTGGGG NC_001145.3 Sacch... [14]  784333 CCGGCTTTCTGACCGAAAT...TGTGGGTGTGGTGTGGGT NC_001146.8 Sacch... [15] 1091291 ACACCACACCCACACCACA...TGTGTGGGTGTGGTGTGT NC_001147.6 Sacch... [16]  948066 AAATAGCCCTCATGTACGT...TTTAATTTCGGTCAGAAA NC_001148.4 Sacch... [17]   85779 TTCATAATTAATTTTTTAT...TATAATATAATATCCATA NC_001224.1 Sacch..."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"use-assembly_accession-id-for-genome-retrieval","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations > Example NCBI RefSeq:","what":"Use assembly_accession id for genome retrieval","title":"Sequence Retrieval","text":"Alternatively, instead specifying scientific name taxonomy argument organism users can specify assembly_accession id corresponding organism. , specify assembly_accession id GCF_000146045.2 encodes species Saccharomyces cerevisiae.","code":"# install.packages(\"magrittr\") library(magrittr) # import genome as Biostrings object Scerevisiae_Genome <- getGenome(             db       = \"refseq\",             organism = \"GCF_000146045.2\") %>%     read_genome() Scerevisiae_Genome A DNAStringSet instance of length 17        width seq                                                    names                 [1]  230218 CCACACCACACCCACACACCCACACA...GTGGTGTGGGTGTGGTGTGTGTGGG NC_001133.9 Sacch...  [2]  813184 AAATAGCCCTCATGTACGTCTCCTCC...GTGTGGGTGTGGTGTGTGGGTGTGT NC_001134.8 Sacch...  [3]  316620 CCCACACACCACACCCACACCACACC...GGGTGTGGTGGGTGTGGTGTGTGTG NC_001135.5 Sacch...  [4] 1531933 ACACCACACCCACACCACACCCACAC...AATAAAGGTAGTAAGTAGCTTTTGG NC_001136.10 Sacc...  [5]  576874 CGTCTCCTCCAAGCCCTGTTGTCTCT...GGGTTTCATTTTCATTTTTTTTTTT NC_001137.3 Sacch...  ...     ... ... [13]  924431 CCACACACACACCACACCCACACCAC...GTGTGGGTGTGGTGTGTGTGTGGGG NC_001145.3 Sacch... [14]  784333 CCGGCTTTCTGACCGAAATTAAAAAA...GGGTGTGTGTGGGTGTGGTGTGGGT NC_001146.8 Sacch... [15] 1091291 ACACCACACCCACACCACACCCACAC...GAGAGAGTGTGTGGGTGTGGTGTGT NC_001147.6 Sacch... [16]  948066 AAATAGCCCTCATGTACGTCTCCTCC...TTTTTTTTTTAATTTCGGTCAGAAA NC_001148.4 Sacch... [17]   85779 TTCATAATTAATTTTTTATATATATA...GCTTAATTATAATATAATATCCATA NC_001224.1 Sacch..."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ncbi-genbank","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"Example NCBI Genbank:","title":"Sequence Retrieval","text":"Genome retrieval NCBI Genbank.","code":"# download the genome of Homo sapiens from Genbank # and store the corresponding genome file in '_ncbi_downloads/genomes' HS.genome.genbank <- getGenome( db       = \"genbank\",                                  organism = \"Homo sapiens\",                                 path     = file.path(\"_ncbi_downloads\",\"genomes\") ) # import downloaded genome as Biostrings object Human_Genome <- read_genome(file = HS.genome.genbank) # look at the Biostrings object Human_Genome A DNAStringSet instance of length 551           width seq                                                names                  [1] 248956422 NNNNNNNNNNNNNNNNNNNNNNNN...NNNNNNNNNNNNNNNNNNNNNNN CM000663.2 Homo s...   [2]    175055 GAATTCAGCTGAGAAGAACAGGCA...TGTTTGTCAGTCACATAGAATTC KI270706.1 Homo s...   [3]     32032 AGGGGTCTGCTTAGAGAGGGTCTC...TGACTTACGTTGACGTGGAATTC KI270707.1 Homo s...   [4]    127682 GATCGAGACTATCCTGGCTAACAC...ATTGTCAATTGGGACCTTTGATC KI270708.1 Homo s...   [5]     66860 GAATTCATTCGATGACGATTCCAT...AAAAAACTCTCAGCCACGAATTC KI270709.1 Homo s...   ...       ... ... [547]    170148 TTTCTTTCTTTTTTTTTTTTTTGT...GTCACAGGACTCATGGGGAATTC KI270931.1 Homo s... [548]    215732 TGTGGTGAGGACCCTTAAGATCTA...GTCACAGGACTCATGGGGAATTC KI270932.1 Homo s... [549]    170537 TCTACTCTCCCATGCTTGCCTCGG...GTCACAGGACTCATGGGGAATTC KI270933.1 Homo s... [550]    177381 GATCTATCTGTATCTCCACAGGTG...GTCACAGGACTCATGGGGAATTC GL000209.2 Homo s... [551]     16569 GATCACAGGTCTATCACCCTATTA...CCCTTAAATAAGACATCACGATG J01415.2 Homo sap..."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"use-taxonomy-id-for-genome-retrieval","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations > Example NCBI Genbank:","what":"Use taxonomy id for genome retrieval","title":"Sequence Retrieval","text":"Alternatively, instead specifying scientific name argument organism users can specify taxonomy id corresponding organism. , specify taxonomy id 559292 encodes species Saccharomyces cerevisiae.","code":"# install.packages(\"magrittr\") library(magrittr) # import genome as Biostrings object Scerevisiae_Genome <- getGenome(             db       = \"genbank\",             organism = \"559292\") %>%     read_genome() Scerevisiae_Genome A DNAStringSet instance of length 16        width seq                                names                 [1]  230218 CCACACCACACCCACA...TGTGGTGTGTGTGGG BK006935.2 TPA_in...  [2]  813184 AAATAGCCCTCATGTA...GGTGTGTGGGTGTGT BK006936.2 TPA_in...  [3]  316620 CCCACACACCACACCC...GGTGTGGTGTGTGTG BK006937.2 TPA_in...  [4] 1531933 ACACCACACCCACACC...GTAAGTAGCTTTTGG BK006938.2 TPA_in...  [5]  576874 CGTCTCCTCCAAGCCC...TTCATTTTTTTTTTT BK006939.2 TPA_in...  ...     ... ... [12] 1078177 CACACACACACACCAC...ACATGAGGGCTATTT BK006945.2 TPA_in... [13]  924431 CCACACACACACCACA...GGTGTGTGTGTGGGG BK006946.2 TPA_in... [14]  784333 CCGGCTTTCTGACCGA...GGGTGTGGTGTGGGT BK006947.3 TPA_in... [15] 1091291 ACACCACACCCACACC...GTGGGTGTGGTGTGT BK006948.2 TPA_in... [16]  948066 AAATAGCCCTCATGTA...AATTTCGGTCAGAAA BK006949.2 TPA_in..."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"use-assembly_accession-id-for-genome-retrieval-1","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations > Example NCBI Genbank:","what":"Use assembly_accession id for genome retrieval","title":"Sequence Retrieval","text":"Alternatively, instead specifying scientific name taxonomy argument organism users can specify assembly_accession id corresponding organism. , specify assembly_accession id GCA_000146045.2 encodes species Saccharomyces cerevisiae. addition, genome summary statistics retrieved species stored locally (doc_saccharomyces_cerevisiae_db_genbank_summary_statistics.tsv) provide users insights regarding genome assembly quality (see ?summary_genome() details). file can used Supplementary Information file publications facilitate reproducible research. comparative genomics studies consider differences genome assembly qualities comparing genomes diverse species. way, expose technical artifacts might generate patterns mistaken biological relevance whereas reality just reflect difference genome assembly quality. Considering quality genome assemblies downloading genomic sequences help researchers avoid pitfalls. summary statistics include: genome_size_mbp: Genome size mega base pairs n50_mbp: N50 contig size genome assembly mega base pairs n_seqs: number chromosomes/scaffolds/contigs genome assembly file n_nnn: absolute number NNNs (chromosomes scaffolds contigs) genome assembly file rel_nnn: percentage (relative frequency) NNNs (chromosomes scaffolds contigs) compared total number nucleotides genome assembly file genome_entropy: Shannon Entropy genome assembly file (median entropy individual chromosome entropies) n_gc: total number GCs (chromosomes scaffolds contigs) genome assembly file rel_gc: (relative frequency) GCs (chromosomes scaffolds contigs) compared total number nucleotides genome assembly file","code":"# install.packages(\"magrittr\") library(magrittr) # import genome as Biostrings object Scerevisiae_Genome <- getGenome(             db       = \"genbank\",             organism = \"GCA_000146045.2\") %>%     read_genome() Scerevisiae_Genome A DNAStringSet instance of length 16        width seq                                  names                 [1]  230218 CCACACCACACCCACAC...GTGTGGTGTGTGTGGG BK006935.2 TPA_in...  [2]  813184 AAATAGCCCTCATGTAC...TGGTGTGTGGGTGTGT BK006936.2 TPA_in...  [3]  316620 CCCACACACCACACCCA...GGGTGTGGTGTGTGTG BK006937.2 TPA_in...  [4] 1531933 ACACCACACCCACACCA...AGTAAGTAGCTTTTGG BK006938.2 TPA_in...  [5]  576874 CGTCTCCTCCAAGCCCT...TTTCATTTTTTTTTTT BK006939.2 TPA_in...  ...     ... ... [12] 1078177 CACACACACACACCACC...TACATGAGGGCTATTT BK006945.2 TPA_in... [13]  924431 CCACACACACACCACAC...TGGTGTGTGTGTGGGG BK006946.2 TPA_in... [14]  784333 CCGGCTTTCTGACCGAA...TGGGTGTGGTGTGGGT BK006947.3 TPA_in... [15] 1091291 ACACCACACCCACACCA...TGTGGGTGTGGTGTGT BK006948.2 TPA_in... [16]  948066 AAATAGCCCTCATGTAC...TAATTTCGGTCAGAAA BK006949.2 TPA_in..."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ensembl","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"Example ENSEMBL:","title":"Sequence Retrieval","text":"using db = \"ensembl\" can set assembly_type = \"primary_assembly\". human genome toplevel genome assembly size > 70 GB uncompressed, primary assembly just GB. Users can also specify release argument denotes database release version ENSEMBL (db = \"ensembl\") case wish download archived vgenome versions. Default release = NULL meaning recent database version used. addition, genome summary statistics retrieved species stored locally (doc_homo_sapiens_db_ensembl_summary_statistics.tsv) provide users insights regarding genome assembly quality (see ?summary_genome() details). file can used Supplementary Information file publications facilitate reproducible research. comparative genomics studies consider differences genome assembly qualities comparing genomes diverse species. way, expose technical artifacts might generate patterns mistaken biological relevance whereas reality just reflect difference genome assembly quality. Considering quality genome assemblies downloading genomic sequences help researchers avoid pitfalls. summary statistics include: genome_size_mbp: Genome size mega base pairs n50_mbp: N50 contig size genome assembly mega base pairs n_seqs: number chromosomes/scaffolds/contigs genome assembly file n_nnn: absolute number NNNs (chromosomes scaffolds contigs) genome assembly file rel_nnn: percentage (relative frequency) NNNs (chromosomes scaffolds contigs) compared total number nucleotides genome assembly file genome_entropy: Shannon Entropy genome assembly file (median entropy individual chromosome entropies) n_gc: total number GCs (chromosomes scaffolds contigs) genome assembly file rel_gc: (relative frequency) GCs (chromosomes scaffolds contigs) compared total number nucleotides genome assembly file","code":"# download the genome of Homo sapiens from ENSEMBL # and store the corresponding genome file in '_ncbi_downloads/genomes' HS.genome.ensembl <- getGenome( db       = \"ensembl\",                                  organism = \"Homo sapiens\",                                 path     = file.path(\"_ncbi_downloads\",\"genomes\") ,                                 assembly_type = \"primary_assembly\") # import downloaded genome as Biostrings object Human_Genome <- read_genome(file = HS.genome.ensembl) # look at the Biostrings object Human_Genome A DNAStringSet instance of length 524           width seq                                                names                  [1] 248956422 NNNNNNNNNNNNNNNNNNNNNNNN...NNNNNNNNNNNNNNNNNNNNNNN 1 dna:chromosome ...   [2] 242193529 NNNNNNNNNNNNNNNNNNNNNNNN...NNNNNNNNNNNNNNNNNNNNNNN 2 dna:chromosome ...   [3] 198295559 NNNNNNNNNNNNNNNNNNNNNNNN...NNNNNNNNNNNNNNNNNNNNNNN 3 dna:chromosome ...   [4] 190214555 NNNNNNNNNNNNNNNNNNNNNNNN...NNNNNNNNNNNNNNNNNNNNNNN 4 dna:chromosome ...   [5] 181538259 NNNNNNNNNNNNNNNNNNNNNNNN...NNNNNNNNNNNNNNNNNNNNNNN 5 dna:chromosome ...   ...       ... ... [520]       993 GCCCCACGTCCGGGAGGGAGGTGG...GAGGGAGGTGGGGGGTCAGCCCT KI270539.1 dna:sc... [521]       990 TTTCATAGAGCATGTTTGAAACAC...TCAGAAACTTGTTGTGATGTGTG KI270385.1 dna:sc... [522]       981 AGATTTCGTTGGAACGGGATAAAC...TCAGCTTTCAAACACTCTTTTTG KI270423.1 dna:sc... [523]       971 ATTTGCGATGTGTGTTCTCAACTA...TTGGATAGCTTTGAAGTTTTCGT KI270392.1 dna:sc... [524]       970 AAGTGGATATTTGGATAGCTTTGA...TCCTCAATAACAGAGTTGAACCT KI270394.1 dna:sc..."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"use-taxonomy-id-for-genome-retrieval-1","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations > Example ENSEMBL:","what":"Use taxonomy id for genome retrieval","title":"Sequence Retrieval","text":"Alternatively, instead specifying scientific name argument organism users can specify taxonomy id corresponding organism. , specify taxonomy id 4932 encodes species Saccharomyces cerevisiae.","code":"# install.packages(\"magrittr\") library(magrittr) # import genome as Biostrings object Scerevisiae_Genome <- getGenome(             db       = \"ensembl\",             organism = \"4932\") %>%     read_genome() Scerevisiae_Genome A DNAStringSet instance of length 17        width seq                            names                 [1]  230218 CCACACCACACCCA...TGGTGTGTGTGGG I dna:chromosome ...  [2]  813184 AAATAGCCCTCATG...TGTGTGGGTGTGT II dna:chromosome...  [3]  316620 CCCACACACCACAC...TGTGGTGTGTGTG III dna:chromosom...  [4] 1531933 ACACCACACCCACA...AAGTAGCTTTTGG IV dna:chromosome...  [5]  576874 CGTCTCCTCCAAGC...CATTTTTTTTTTT V dna:chromosome ...  ...     ... ... [13]  924431 CCACACACACACCA...TGTGTGTGTGGGG XIII dna:chromoso... [14]  784333 CCGGCTTTCTGACC...GTGTGGTGTGGGT XIV dna:chromosom... [15] 1091291 ACACCACACCCACA...GGGTGTGGTGTGT XV dna:chromosome... [16]  948066 AAATAGCCCTCATG...TTTCGGTCAGAAA XVI dna:chromosom... [17]   85779 TTCATAATTAATTT...TATAATATCCATA Mito dna:chromoso..."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"use-assembly_accession-id-for-genome-retrieval-2","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations > Example ENSEMBL:","what":"Use assembly_accession id for genome retrieval","title":"Sequence Retrieval","text":"Alternatively, instead specifying scientific name taxonomy argument organism users can specify assembly_accession id corresponding organism. , specify assembly_accession id GCA_000146045.2 encodes species Saccharomyces cerevisiae.","code":"# install.packages(\"magrittr\") library(magrittr) # import genome as Biostrings object Scerevisiae_Genome <- getGenome(             db       = \"ensembl\",             organism = \"GCA_000146045.2\") %>%     read_genome() Scerevisiae_Genome A DNAStringSet instance of length 17        width seq                                names                 [1]  230218 CCACACCACACCCACA...TGTGGTGTGTGTGGG I dna:chromosome ...  [2]  813184 AAATAGCCCTCATGTA...GGTGTGTGGGTGTGT II dna:chromosome...  [3]  316620 CCCACACACCACACCC...GGTGTGGTGTGTGTG III dna:chromosom...  [4] 1531933 ACACCACACCCACACC...GTAAGTAGCTTTTGG IV dna:chromosome...  [5]  439888 CACACACACCACACCC...GTGTGGTGTGTGTGT IX dna:chromosome...  ...     ... ... [13] 1078177 CACACACACACACCAC...ACATGAGGGCTATTT XII dna:chromosom... [14]  924431 CCACACACACACCACA...GGTGTGTGTGTGGGG XIII dna:chromoso... [15]  784333 CCGGCTTTCTGACCGA...GGGTGTGGTGTGGGT XIV dna:chromosom... [16] 1091291 ACACCACACCCACACC...GTGGGTGTGGTGTGT XV dna:chromosome... [17]  948066 AAATAGCCCTCATGTA...AATTTCGGTCAGAAA XVI dna:chromosom..."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"genomeset-retrieval","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"GenomeSet Retrieval","title":"Sequence Retrieval","text":"getGenomeSet() function enables users retrieve genome files multiple species. convenient users wish bulk download particular set species. Internally, folder named set_genomes generated genomes genome info files stored. addition, users can specify arguments: clean_retrieval gunzip (TRUE default) clean file names automatically unzip downloaded files. Example: download process interrupted, users can re-run function download missing genomes. cases users wish download everything updating existing genomes, may specify argument update = TRUE.","code":"# specify the species names download_species <- c(\"Arabidopsis thaliana\",                        \"Arabidopsis lyrata\",                        \"Capsella rubella\") # retrieve these three species from NCBI RefSeq                        biomartr::getGenomeSet(\"refseq\", organisms = download_species, path = \"set_genomes\")"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"proteome-retrieval","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"Proteome Retrieval","title":"Sequence Retrieval","text":"getProteome() function interface function NCBI RefSeq, NCBI Genbank, ENSEMBL, UniProt databases corresponding proteomes can retrieved. works analogous getGenome(). db argument specifies database proteomes *.fasta file format shall retrieved. Options : db = \"refseq\" retrieval NCBI RefSeq db = \"genbank\" retrieval NCBI Genbank db = \"ensembl\" retrieval ENSEMBL db = \"uniprot\" retrieval UniProt Furthermore, users need specify scientific name organism interest proteomes shall downloaded, e.g. organism = \"Homo sapiens\". Finally, path argument specifies folder path corresponding proteome shall locally stored. case users like store proteome file different location, can specify path = file.path(\"put\",\"\",\"path\",\"\") argument.","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ncbi-refseq-1","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"Example NCBI RefSeq:","title":"Sequence Retrieval","text":"example, getProteome() creates directory named '_ncbi_downloads/proteomes' corresponding genome named GCF_000001405.34_GRCh38.p8_protein.faa.gz downloaded. return value getProteome() folder path downloaded proteome file can used input read_proteome() function. variable HS.proteome.refseq stores path downloaded proteome. Subsequently, users can use read_proteome() function import proteome R session. Users can choose work proteome sequence R either Biostrings object (obj.type = \"Biostrings\") data.table object (obj.type = \"data.table\") specifying obj.type argument read_proteome() function. Alternatively, users can perform pipeline logic magrittr package:","code":"# download the proteome of Homo sapiens from refseq # and store the corresponding proteome file in '_ncbi_downloads/proteomes' HS.proteome.refseq <- getProteome( db       = \"refseq\",                                     organism = \"Homo sapiens\",                                    path     = file.path(\"_ncbi_downloads\",\"proteomes\")) # import proteome as Biostrings object Human_Proteome <- read_proteome(file = HS.proteome.refseq) Human_Proteome A AAStringSet instance of length 113620          width seq                          names                     [1]  1474 MGKNKLLHPSLVL...YNAPCSKDLGNA NP_000005.2 alpha...      [2]   290 MDIEAYFERIGYK...LVPKPGDGSLTI NP_000006.2 aryla...      [3]   421 MAAGFGRCCRVLR...IVAREHIDKYKN NP_000007.1 mediu...      [4]   412 MAAALLARASGPA...VIAGHLLRSYRS NP_000008.1 short...      [5]   655 MQAARMAASLGRQ...RGGVVTSNPLGF NP_000009.1 very ...      ...   ... ... [113616]    98 MPLIYMNIMLAFT...LDYVHNLNLLQC YP_003024034.1 NA... [113617]   459 MLKLIVPTIMLLP...SLNPDIITGFSS YP_003024035.1 NA... [113618]   603 MTMHTTMTTLTLT...FFPLILTLLLIT YP_003024036.1 NA... [113619]   174 MMYALFLLSVGLV...GVYIVIEIARGN YP_003024037.1 NA... [113620]   380 MTPMRKTNPLMKL...ISLIENKMLKWA YP_003024038.1 cy... # install.packages(\"magrittr\") library(magrittr) # import proteome as Biostrings object Human_Proteome <- getProteome( db       = \"refseq\",                                 organism = \"Homo sapiens\",                                path     = file.path(\"_ncbi_downloads\",\"proteomes\")) %>%     read_proteome() Human_Proteome A AAStringSet instance of length 113620          width seq                          names                     [1]  1474 MGKNKLLHPSLVL...YNAPCSKDLGNA NP_000005.2 alpha...      [2]   290 MDIEAYFERIGYK...LVPKPGDGSLTI NP_000006.2 aryla...      [3]   421 MAAGFGRCCRVLR...IVAREHIDKYKN NP_000007.1 mediu...      [4]   412 MAAALLARASGPA...VIAGHLLRSYRS NP_000008.1 short...      [5]   655 MQAARMAASLGRQ...RGGVVTSNPLGF NP_000009.1 very ...      ...   ... ... [113616]    98 MPLIYMNIMLAFT...LDYVHNLNLLQC YP_003024034.1 NA... [113617]   459 MLKLIVPTIMLLP...SLNPDIITGFSS YP_003024035.1 NA... [113618]   603 MTMHTTMTTLTLT...FFPLILTLLLIT YP_003024036.1 NA... [113619]   174 MMYALFLLSVGLV...GVYIVIEIARGN YP_003024037.1 NA... [113620]   380 MTPMRKTNPLMKL...ISLIENKMLKWA YP_003024038.1 cy..."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ncbi-genbank-1","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"Example NCBI Genbank:","title":"Sequence Retrieval","text":"","code":"# download the proteome of Homo sapiens from genbank # and store the corresponding proteome file in '_ncbi_downloads/proteomes' HS.proteome.genbank <- getProteome( db       = \"genbank\",                                     organism = \"Homo sapiens\",                                    path     = file.path(\"_ncbi_downloads\",\"proteomes\")) # import proteome as Biostrings object Human_Proteome <- read_proteome(file = HS.proteome.genbank) Human_Proteome A AAStringSet instance of length 13      width seq                              names                 [1]   318 MPMANLLLLIVPILI...VSMPITISSIPPQT AAB58943.1 NADH d...  [2]   347 MNPLAQPVIYSTIFA...TLLLPISPFMLMIL AAB58944.1 NADH d...  [3]   513 MFADRWLFSTNHKDI...PPYHTFEEPVYMKS AAB58945.1 cytoch...  [4]   227 MAHAAQVGLQDATSP...IPLKIFEMGPVFTL AAB58946.1 cytoch...  [5]    68 MPQLNTTVWPTMITP...WTKICSLHSLPPQS AAB58947.1 ATPase...  ...   ... ...  [9]    98 MPLIYMNIMLAFTIS...YGLDYVHNLNLLQC AAB58951.1 NADH d... [10]   459 MLKLIVPTIMLLPLT...LLSLNPDIITGFSS AAB58952.1 NADH d... [11]   603 MTMHTTMTTLTLTSL...SFFFPLILTLLLIT AAB58953.1 NADH d... [12]   174 MMYALFLLSVGLVMG...FVGVYIVIEIARGN AAB58954.1 NADH d... [13]   380 MTPMRKTNPLMKLIN...PTISLIENKMLKWA AAB58955.3 cytoch..."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ensembl-1","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"Example ENSEMBL:","title":"Sequence Retrieval","text":"Users can also specify release argument denotes database release version ENSEMBL (db = \"ensembl\") case wish download archived vgenome versions. Default release = NULL meaning recent database version used.","code":"# download the proteome of Homo sapiens from ENSEMBL # and store the corresponding proteome file in '_ncbi_downloads/proteomes' HS.proteome.ensembl <- getProteome( db       = \"ensembl\",                                     organism = \"Homo sapiens\",                                    path     = file.path(\"_ncbi_downloads\",\"proteomes\")) # import proteome as Biostrings object Human_Proteome <- read_proteome(file = HS.proteome.ensembl) Human_Proteome A AAStringSet instance of length 107844          width seq                          names                     [1]     3 PSY                          ENSP00000451515.1...      [2]     4 TGGY                         ENSP00000452494.1...      [3]     2 EI                           ENSP00000451042.1...      [4]     4 GTGG                         ENSP00000487941.1...      [5]     4 GTGG                         ENSP00000488240.1...      ...   ... ... [107840]   135 MLQKKIEEKDLKV...LNHICKVPLAIK ENSP00000495237.1... [107841]   166 MEHAFTPLEPLLS...IIQEESLIYLLQ ENSP00000496198.1... [107842]    42 MEVPTAYMISPKE...GLKSENTMLLRC ENSP00000495723.1... [107843]   508 MPSMLERISKNLV...GTLSLLQQLAEA ENSP00000496548.1... [107844]   508 MPSMLERISKNLV...GTLSLLQQLAEA ENSP00000494855.1..."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-retrieval-uniprot","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"Example Retrieval Uniprot:","title":"Sequence Retrieval","text":"Another way retrieving proteome sequences UniProt database.","code":"# download the proteome of Mus musculus from UniProt # and store the corresponding proteome file in '_uniprot_downloads/proteomes' Mm.proteome.uniprot<- getProteome( db       = \"uniprot\",                                     organism = \"Mus musculus\",                                    path     = file.path(\"_uniprot_downloads\",\"proteomes\")) # import proteome as Biostrings object Mouse_Proteome <- read_proteome(file = Mm.proteome.uniprot) Mouse_Proteome A AAStringSet instance of length 84522         width seq                                  names                    [1]   781 MATQADLMELDMAMEPD...LPPGDSNQLAWFDTDL sp|Q02248|CTNB1_M...     [2]  2531 MPRLLTPLLCLTLLPAL...PTTMPSQITHIPEAFK sp|Q01705|NOTC1_M...     [3]   437 MLLLLARCFLVILASSL...LDSETMHPLGMAVKSS sp|Q62226|SHH_MOU...     [4]   380 MKKPIGILSPGVALGTA...VKCKKCTEIVDQFVCK sp|P22725|WNT5A_M...     [5]   387 MEESQSDISLELPLSQE...SRHKKTMVKKVGPDSD sp|P02340|P53_MOU...     ...   ... ... [84518]   459 MLKIILPSLMLLPLTWL...LILLTTSPKLITGLTM tr|A0A0F6PZ84|A0A... [84519]   380 MTNMRKTHPLFKIINHS...LMPISGIIEDKMLKLY tr|U3TEV9|U3TEV9_... [84520]   381 MTNMRKTHPLFKIINHS...MPISGIIEDKMLKLYP tr|A0A0F6PXN8|A0A... [84521]   172 MNNYIFVLSSLFLVGCL...WSLFAGIFIIIEITRD tr|A0A0F6PXK9|A0A... [84522]   381 MTNMRKTHPLFKIINHS...MPISGIIEDKMLKLYP tr|A0A0F6PYR5|A0A..."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"proteomeset-retrieval","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"ProteomeSet Retrieval","title":"Sequence Retrieval","text":"getProteomeSet() function enables users retrieve proteome files multiple species. convenient users wish bulk download particular set species. Internally, folder named set_proteomes generated proteomes proteome info files stored. addition, users can specify arguments: clean_retrieval gunzip (TRUE default) clean file names automatically unzip downloaded files. Example: download process interrupted, users can re-run function download missing genomes. cases users wish download everything updating existing genomes, may specify argument update = TRUE.","code":"# specify the species names download_species <- c(\"Arabidopsis thaliana\",                        \"Arabidopsis lyrata\",                        \"Capsella rubella\") # retrieve these three species from NCBI RefSeq                        biomartr::getProteomeSet(\"refseq\", organisms = download_species, path = \"set_proteomes\")"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"cds-retrieval","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"CDS Retrieval","title":"Sequence Retrieval","text":"getCDS() function interface function NCBI RefSeq, NCBI Genbank, ENSEMBL databases corresponding CDS files can retrieved. works analogous getGenome() getProteome(). db argument specifies database proteomes *.fasta file format shall retrieved. Options : db = \"refseq\" retrieval NCBI RefSeq db = \"genbank\" retrieval NCBI Genbank db = \"ensembl\" retrieval ENSEMBL Furthermore, users need specify scientific name organism interest proteomes shall downloaded, e.g. organism = \"Homo sapiens\". Finally, path argument specifies folder path corresponding CDS file shall locally stored. case users like store CDS file different location, can specify path = file.path(\"put\",\"\",\"path\",\"\") argument.","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ncbi-refseq-2","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"Example NCBI RefSeq:","title":"Sequence Retrieval","text":"example, getCDS() creates directory named '_ncbi_downloads/CDS' corresponding genome named Homo_sapiens_cds_from_genomic_refseq.fna.gz downloaded. return value getCDS() folder path downloaded genome file can used input read_cds() function. variable HS.cds.refseq stores path downloaded CDS file. Subsequently, users can use read_cds() function import genome R session. Users can choose work genome sequence R either Biostrings object (obj.type = \"Biostrings\") data.table object (obj.type = \"data.table\") specifying obj.type argument read_cds() function. Internally, text file named doc_Homo_sapiens_db_refseq.txt generated. information stored log file structured follows: summary, getCDS() read_cds() functions allow users retrieve CDS files specifying scientific name organism interest allow import retrieved CDS file e.g. Biostrings object. Thus, users can perform Biostrings notation work downloaded CDS can rely log file generated getCDS() better document source version CDS used subsequent studies. Alternatively, users can perform pipeline logic magrittr package:","code":"# download the genome of Homo sapiens from refseq # and store the corresponding genome CDS file in '_ncbi_downloads/CDS' HS.cds.refseq <- getCDS( db       = \"refseq\",                           organism = \"Homo sapiens\",                          path     = file.path(\"_ncbi_downloads\",\"CDS\")) # import downloaded CDS as Biostrings object Human_CDS <- read_cds(file     = HS.cds.refseq,                        obj.type = \"Biostrings\") # look at the Biostrings object Human_CDS A BStringSet instance of length 114967           width seq                                                names                     [1]    918 ATGGTGACTGAATTCATTTTTCTG...CACATTCTAGTGTAAAGTTTTAG lcl|NC_000001.11_...      [2]    402 ATGAGTGACAGCATCAACTTCTCT...CAGGACCCAGGCACAGGCATTAG lcl|NC_000001.11_...      [3]    402 ATGAGTGACAGCATCAACTTCTCT...CAGGACCCAGGCACAGGCATTAG lcl|NC_000001.11_...      [4]    402 ATGAGTGACAGCATCAACTTCTCT...CAGGACCCAGGCACAGGCATTAG lcl|NC_000001.11_...      [5]    402 ATGAGTGACAGCATCAACTTCTCT...CAGGACCCAGGCACAGGCATTAG lcl|NC_000001.11_...      ...    ... ... [114963]    297 ATGCCCCTCATTTACATAAATATT...ACCTAAACCTACTCCAATGCTAA lcl|NC_012920.1_c... [114964]   1378 ATGCTAAAACTAATCGTCCCAACA...CATCATTACCGGGTTTTCCTCTT lcl|NC_012920.1_c... [114965]   1812 ATAACCATGCACACTACTATAACC...TAACCCTACTCCTAATCACATAA lcl|NC_012920.1_c... [114966]    525 ATGATGTATGCTTTGTTTCTGTTG...TTGAGATTGCTCGGGGGAATAGG lcl|NC_012920.1_c... [114967]   1141 ATGACCCCAATACGCAAAACTAAC...AAACAAAATACTCAAATGGGCCT lcl|NC_012920.1_c... File Name: Homo_sapiens_cds_from_genomic_refseq.fna.gz Organism Name: Homo_sapiens Database: NCBI refseq URL: ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/405/ GCF_000001405.35_GRCh38.p9/GCF_000001405.35_GRCh38.p9_cds_from_genomic.fna.gz Download_Date: Sun Oct 23 17:19:05 2016 refseq_category: reference genome assembly_accession: GCF_000001405.35 bioproject: PRJNA168 biosample: NA taxid: 9606 infraspecific_name: NA version_status: latest release_type: Patch genome_rep: Full seq_rel_date: 2016-09-26 submitter: Genome Reference Consortium # install.packages(\"magrittr\") library(magrittr) # import CDS as Biostrings object Human_CDS <- getCDS( db       = \"refseq\",                       organism = \"Homo sapiens\",                      path     = file.path(\"_ncbi_downloads\",\"CDS\")) %>%     read_cds(obj.type = \"Biostrings\") Human_CDS A BStringSet instance of length 114967           width seq                                                names                     [1]    918 ATGGTGACTGAATTCATTTTTCTG...CACATTCTAGTGTAAAGTTTTAG lcl|NC_000001.11_...      [2]    402 ATGAGTGACAGCATCAACTTCTCT...CAGGACCCAGGCACAGGCATTAG lcl|NC_000001.11_...      [3]    402 ATGAGTGACAGCATCAACTTCTCT...CAGGACCCAGGCACAGGCATTAG lcl|NC_000001.11_...      [4]    402 ATGAGTGACAGCATCAACTTCTCT...CAGGACCCAGGCACAGGCATTAG lcl|NC_000001.11_...      [5]    402 ATGAGTGACAGCATCAACTTCTCT...CAGGACCCAGGCACAGGCATTAG lcl|NC_000001.11_...      ...    ... ... [114963]    297 ATGCCCCTCATTTACATAAATATT...ACCTAAACCTACTCCAATGCTAA lcl|NC_012920.1_c... [114964]   1378 ATGCTAAAACTAATCGTCCCAACA...CATCATTACCGGGTTTTCCTCTT lcl|NC_012920.1_c... [114965]   1812 ATAACCATGCACACTACTATAACC...TAACCCTACTCCTAATCACATAA lcl|NC_012920.1_c... [114966]    525 ATGATGTATGCTTTGTTTCTGTTG...TTGAGATTGCTCGGGGGAATAGG lcl|NC_012920.1_c... [114967]   1141 ATGACCCCAATACGCAAAACTAAC...AAACAAAATACTCAAATGGGCCT lcl|NC_012920.1_c..."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ncbi-genbank-2","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"Example NCBI Genbank:","title":"Sequence Retrieval","text":"","code":"# download the genome of Homo sapiens from genbank # and store the corresponding genome CDS file in '_ncbi_downloads/CDS' HS.cds.genbank <- getCDS( db       = \"genbank\",                           organism = \"Homo sapiens\",                          path     = file.path(\"_ncbi_downloads\",\"CDS\")) # import downloaded CDS as Biostrings object Human_CDS <- read_cds(file     = HS.cds.genbank,                        obj.type = \"Biostrings\") # look at the Biostrings object Human_CDS A BStringSet instance of length 13      width seq                                                     names                 [1]   956 ATACCCATGGCCAACCTCCTACTCCT...ATCTCCAGCATTCCCCCTCAAACCTA lcl|J01415.2_cds_...  [2]  1042 ATTAATCCCCTGGCCCAACCCGTCAT...CTCCCCTTTTATACTAATAATCTTAT lcl|J01415.2_cds_...  [3]  1542 ATGTTCGCCGACCGTTGACTATTCTC...AAGAACCCGTATACATAAAATCTAGA lcl|J01415.2_cds_...  [4]   684 ATGGCACATGCAGCGCAAGTAGGTCT...AAATAGGGCCCGTATTTACCCTATAG lcl|J01415.2_cds_...  [5]   207 ATGCCCCAACTAAATACTACCGTATG...TTCATTCATTGCCCCCACAATCCTAG lcl|J01415.2_cds_...  ...   ... ...  [9]   297 ATGCCCCTCATTTACATAAATATTAT...ATAACCTAAACCTACTCCAATGCTAA lcl|J01415.2_cds_... [10]  1378 ATGCTAAAACTAATCGTCCCAACAAT...CGACATCATTACCGGGTTTTCCTCTT lcl|J01415.2_cds_... [11]  1812 ATAACCATGCACACTACTATAACCAC...TCCTAACCCTACTCCTAATCACATAA lcl|J01415.2_cds_... [12]   525 ATGATGTATGCTTTGTTTCTGTTGAG...TAATTGAGATTGCTCGGGGGAATAGG lcl|J01415.2_cds_... [13]  1141 ATGACCCCAATACGCAAAACTAACCC...TGAAAACAAAATACTCAAATGGGCCT lcl|J01415.2_cds_..."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ensembl-2","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"Example ENSEMBL:","title":"Sequence Retrieval","text":"Users can also specify release argument denotes database release version ENSEMBL (db = \"ensembl\") case wish download archived vgenome versions. Default release = NULL meaning recent database version used.","code":"# download the genome of Homo sapiens from ensembl # and store the corresponding genome CDS file in '_ncbi_downloads/CDS' HS.cds.ensembl <- getCDS( db       = \"ensembl\",                           organism = \"Homo sapiens\",                          path     = file.path(\"_ncbi_downloads\",\"CDS\")) # import downloaded CDS as Biostrings object Human_CDS <- read_cds(file     = HS.cds.ensembl,                        obj.type = \"Biostrings\") # look at the Biostrings object Human_CDS A BStringSet instance of length 102915           width seq                                                names                     [1]     13 ACTGGGGGATACG                                      ENST00000448914.1...      [2]     12 GGGACAGGGGGC                                       ENST00000631435.1...      [3]     12 GGGACAGGGGGC                                       ENST00000632684.1...      [4]      9 CCTTCCTAC                                          ENST00000434970.2...      [5]      8 GAAATAGT                                           ENST00000415118.1...      ...    ... ... [102911]   1665 ATGCTACTGCCACTGCTGCTGTCC...ATGCAGAAGTCAAGTTCCAATGA ENST00000436984.6... [102912]   1920 ATGCTACTGCCACTGCTGCTGTCC...ATGCAGAAGTCAAGTTCCAATGA ENST00000439889.6... [102913]   2094 ATGCTACTGCCACTGCTGCTGTCC...ATGCAGAAGTCAAGTTCCAATGA ENST00000339313.9... [102914]    466 ATGCTACTGCCACTGCTGCTGTCC...AGCCCTGGACCTCTCTGTGCAGT ENST00000529627.1... [102915]    559 ATGCGGAGATGCTACTGCCACTGC...CCTCACCTGCCATGTGGACTTCT ENST00000530476.1..."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"cdsset-retrieval","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"CDSSet Retrieval","title":"Sequence Retrieval","text":"getCDSSet() function enables users retrieve CDS files multiple species. convenient users wish bulk download particular set species. Internally, folder named set_cds generated CDS CDS info files stored. addition, users can specify arguments: clean_retrieval gunzip (TRUE default) clean file names automatically unzip downloaded files. Example: download process interrupted, users can re-run function download missing genomes. cases users wish download everything updating existing genomes, may specify argument update = TRUE.","code":"# specify the species names download_species <- c(\"Arabidopsis thaliana\",                        \"Arabidopsis lyrata\",                        \"Capsella rubella\") # retrieve these three species from NCBI RefSeq                        biomartr::getCDSSet(\"refseq\", organisms = download_species, path = \"set_cds\")"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"rna-retrieval","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"RNA Retrieval","title":"Sequence Retrieval","text":"getRNA() function interface function NCBI RefSeq, NCBI Genbank, ENSEMBL databases corresponding RNA files can retrieved. works analogous getGenome(), getProteome(), getCDS(). db argument specifies database proteomes *.fasta file format shall retrieved. Options : db = \"refseq\" retrieval NCBI RefSeq db = \"genbank\" retrieval NCBI Genbank db = \"ensembl\" retrieval ENSEMBL Furthermore, users need specify scientific name organism interest proteomes shall downloaded, e.g. organism = \"Homo sapiens\". Finally, path argument specifies folder path corresponding RNA file shall locally stored. case users like store RNA file different location, can specify path = file.path(\"put\",\"\",\"path\",\"\") argument.","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ncbi-refseq-3","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"Example NCBI RefSeq:","title":"Sequence Retrieval","text":"example, getRNA() creates directory named '_ncbi_downloads/RNA' corresponding RNA file named Homo_sapiens_rna_from_genomic_refseq.fna.gz downloaded. return value getRNA() folder path downloaded genome file can used input read_rna() function. variable HS.rna.refseq stores path downloaded RNA file. Subsequently, users can use read_cds() function import genome R session. Users can choose work genome sequence R either Biostrings object (obj.type = \"Biostrings\") data.table object (obj.type = \"data.table\") specifying obj.type argument read_rna() function. Internally, text file named doc_Homo_sapiens_db_refseq.txt generated. information stored log file structured follows: summary, getRNA() read_rna() functions allow users retrieve RNA files specifying scientific name organism interest allow import retrieved RNA file e.g. Biostrings object. Thus, users can perform Biostrings notation work downloaded RNA can rely log file generated getRNA() better document source version RNA used subsequent studies. Alternatively, users can perform pipeline logic magrittr package:","code":"# download the RNA of Homo sapiens from refseq # and store the corresponding RNA file in '_ncbi_downloads/RNA' HS.rna.refseq <- getRNA( db       = \"refseq\",                           organism = \"Homo sapiens\",                          path     = file.path(\"_ncbi_downloads\",\"RNA\")) # import downloaded RNA as Biostrings object Human_rna <- read_rna(file     = HS.rna.refseq,                        obj.type = \"Biostrings\") # look at the Biostrings object Human_rna A BStringSet instance of length 164136           width seq                                                                                       names                     [1]   1652 CTTGCCGTCAGCCTTTTCTTTGACCTCTTCTTTCTGTTCATGT...CACAGCTAGAGATCCTTTATTAAAAGCACACTGTTGGTTTCTG lcl|NC_000001.11_...      [2]   1769 TCCGGCAGAGCGGAAGCGGCGGCGGGAGCTTCCGGGAGGGCGG...ACCAACAGTGTGCTTTTAATAAAGGATCTCTAGCTGTGCAGGA lcl|NC_000001.11_...      [3]     68 TGTGGGAGAGGAACATGGGCTCAGGACAGCGGGTGTCAGCTTGCCTGACCCCCATGTCGCCTCTGTAG                      lcl|NC_000001.11_...      [4]     23 TGACCCCCATGTCGCCTCTGTAG                                                                   lcl|NC_000001.11_...      [5]     23 GAGAGGAACATGGGCTCAGGACA                                                                   lcl|NC_000001.11_...      ...    ... ... [164132]     59 GAGAAAGCTCACAAGAACTGCTAACTCATGCCCCCATGTCTAACAACATGGCTTTCTCA                               lcl|NC_012920.1_t... [164133]     71 ACTTTTAAAGGATAACAGCTATCCATTGGTCTTAGGCCCCAAAAATTTTGGTGCAACTCCAAATAAAAGTA                   lcl|NC_012920.1_t... [164134]     69 GTTCTTGTAGTTGAAATACAACGATGGTTTTTCATATCATTGGTCGTGGTTGTAGTCCGTGCGAGAATA                     lcl|NC_012920.1_t... [164135]     66 GTCCTTGTAGTATAAACTAATACACCAGTCTTGTAAACCGGAGATGAAAACCTTTTTCCAAGGACA                        lcl|NC_012920.1_t... [164136]     68 CAGAGAATAGTTTAAATTAGAATCTTAGCTTTGGGTGCTAATGGTGGAGTTAAAGACTTTTTCTCTGA                      lcl|NC_012920.1_t... File Name: Homo_sapiens_rna_from_genomic_refseq.fna.gz Organism Name: Homo_sapiens Database: NCBI refseq URL: ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/001/405/GCF_000001405.36_GRCh38.p10/GCF_000001405.36_GRCh38.p10_rna_from_genomic.fna.gz Download_Date: Wed Mar 15 16:46:45 2017 refseq_category: reference genome assembly_accession: GCF_000001405.36 bioproject: PRJNA168 biosample: NA taxid: 9606 infraspecific_name: NA version_status: latest release_type: Patch genome_rep: Full seq_rel_date: 2017-01-06 submitter: Genome Reference Consortium # install.packages(\"magrittr\") library(magrittr) # import RNA as Biostrings object Human_rna <- getRNA( db       = \"refseq\",                       organism = \"Homo sapiens\",                      path     = file.path(\"_ncbi_downloads\",\"RNA\")) %>%     read_cds(obj.type = \"Biostrings\") Human_rna A BStringSet instance of length 164136           width seq                                                                                       names                     [1]   1652 CTTGCCGTCAGCCTTTTCTTTGACCTCTTCTTTCTGTTCATGT...CACAGCTAGAGATCCTTTATTAAAAGCACACTGTTGGTTTCTG lcl|NC_000001.11_...      [2]   1769 TCCGGCAGAGCGGAAGCGGCGGCGGGAGCTTCCGGGAGGGCGG...ACCAACAGTGTGCTTTTAATAAAGGATCTCTAGCTGTGCAGGA lcl|NC_000001.11_...      [3]     68 TGTGGGAGAGGAACATGGGCTCAGGACAGCGGGTGTCAGCTTGCCTGACCCCCATGTCGCCTCTGTAG                      lcl|NC_000001.11_...      [4]     23 TGACCCCCATGTCGCCTCTGTAG                                                                   lcl|NC_000001.11_...      [5]     23 GAGAGGAACATGGGCTCAGGACA                                                                   lcl|NC_000001.11_...      ...    ... ... [164132]     59 GAGAAAGCTCACAAGAACTGCTAACTCATGCCCCCATGTCTAACAACATGGCTTTCTCA                               lcl|NC_012920.1_t... [164133]     71 ACTTTTAAAGGATAACAGCTATCCATTGGTCTTAGGCCCCAAAAATTTTGGTGCAACTCCAAATAAAAGTA                   lcl|NC_012920.1_t... [164134]     69 GTTCTTGTAGTTGAAATACAACGATGGTTTTTCATATCATTGGTCGTGGTTGTAGTCCGTGCGAGAATA                     lcl|NC_012920.1_t... [164135]     66 GTCCTTGTAGTATAAACTAATACACCAGTCTTGTAAACCGGAGATGAAAACCTTTTTCCAAGGACA                        lcl|NC_012920.1_t... [164136]     68 CAGAGAATAGTTTAAATTAGAATCTTAGCTTTGGGTGCTAATGGTGGAGTTAAAGACTTTTTCTCTGA                      lcl|NC_012920.1_t..."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ncbi-genbank-3","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"Example NCBI Genbank:","title":"Sequence Retrieval","text":"","code":"# download the RNA of Homo sapiens from genbank # and store the corresponding genome RNA file in '_ncbi_downloads/RNA' HS.rna.genbank <- getRNA( db       = \"genbank\",                           organism = \"Homo sapiens\",                          path     = file.path(\"_ncbi_downloads\",\"RNA\")) # import downloaded RNA as Biostrings object Human_rna <- read_cds(file     = HS.rna.genbank,                        obj.type = \"Biostrings\") # look at the Biostrings object Human_rna A BStringSet instance of length 24      width seq                                                                                            names                 [1]    71 GTTTATGTAGCTTACCTCCTCAAAGCAATACACTGAAAATGTTTAGACGGGCTCACATCACCCCATAAACA                        lcl|J01415.2_trna...  [2]   954 AATAGGTTTGGTCCTAGCCTTTCTATTAGCTCTTAGTAAGATTACA...AAGTCGTAACATGGTAAGTGTACTGGAAAGTGCACTTGGACGAAC lcl|J01415.2_rrna...  [3]    69 CAGAGTGTAGCTTAACACAAAGCACCCAACTTACACTTAGGAGATTTCAACTTAACTTGACCGCTCTGA                          lcl|J01415.2_trna...  [4]  1559 GCTAAACCTAGCCCCAAACCCACTCCACCTTACTACCAGACAACCT...ATCTCAACTTAGTATTATACCCACACCCACCCAAGAACAGGGTTT lcl|J01415.2_rrna...  [5]    75 GTTAAGATGGCAGAGCCCGGTAATCGCATAAAACTTAAAACTTTACAGTCAGAGGTTCAATTCCTCTTCTTAACA                    lcl|J01415.2_trna...  ...   ... ... [20]    59 GAGAAAGCTCACAAGAACTGCTAACTCATGCCCCCATGTCTAACAACATGGCTTTCTCA                                    lcl|J01415.2_trna... [21]    71 ACTTTTAAAGGATAACAGCTATCCATTGGTCTTAGGCCCCAAAAATTTTGGTGCAACTCCAAATAAAAGTA                        lcl|J01415.2_trna... [22]    69 GTTCTTGTAGTTGAAATACAACGATGGTTTTTCATATCATTGGTCGTGGTTGTAGTCCGTGCGAGAATA                          lcl|J01415.2_trna... [23]    66 GTCCTTGTAGTATAAACTAATACACCAGTCTTGTAAACCGGAGATGAAAACCTTTTTCCAAGGACA                             lcl|J01415.2_trna... [24]    68 CAGAGAATAGTTTAAATTAGAATCTTAGCTTTGGGTGCTAATGGTGGAGTTAAAGACTTTTTCTCTGA                           lcl|J01415.2_trna..."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ensembl-3","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"Example ENSEMBL:","title":"Sequence Retrieval","text":"Users can also specify release argument denotes database release version ENSEMBL (db = \"ensembl\") case wish download archived vgenome versions. Default release = NULL meaning recent database version used.","code":"# download the RNA of Homo sapiens from ensembl # and store the corresponding genome RNA file in '_ncbi_downloads/RNA' HS.rna.ensembl <- getRNA( db       = \"ensembl\",                            organism = \"Homo sapiens\",                           path     = file.path(\"_ncbi_downloads\",\"RNA\")) # import downloaded RNA as Biostrings object Human_rna <- read_cds(file     = HS.rna.ensembl,                        obj.type = \"Biostrings\") # look at the Biostrings object Human_rna A BStringSet instance of length 36701          width seq                                                                                        names                    [1]    104 GTGCTCACTTTGGCAACATACATACTAAAATTGGACGGATACAG...GCACAAGGATGACATGCAAATTCATGAAGCATTCCATATTTTT ENST00000516494.2...     [2]    164 TTAACTACCTGACAGAGGAGATACTGTGATCATGAAAGTGGTTT...CATAATTTCTGGTGGTAGGGGACTGCGTTCATGTTCTCCCCTA ENST00000627793.1...     [3]    114 ACACTGGTTTCTCTTCAGATCGAATAAATCTTTCGCCTTTTACT...AGTTATAAGCTAATTTTTTGTAAGCCTTGCCCTGGGGAGGCAG ENST00000629478.1...     [4]     64 CAGTGTTACACCTCTTTTAGAATTTATCTATCAGGTTTTCCAGTGTTCACTGAAATTTGTCTCT                           ENST00000629187.1...     [5]    107 GTGTTGGCCTGGGCAGCACGTATACTAAAGTTGGAATGACACAG...GCGCAAGGATGATGTGCAAATTCGTGACAAGTTCCATATTTTT ENST00000631612.1...     ...    ... ... [36697]     90 GGCTAGTCCAAATGTAGTGGTGTTCCAAACTAATTAATCACAACCAGTTACAGATTTCTTGTTTTCTTTTCCACTCACACTTAGCCTTAA ENST00000410951.1... [36698]    109 GGCTGATCTGAAGATGATGAGTTATCTCAATTGATTGTTCAGCC...TCTATTCTTTCCTCTCTTCTCACTACTGCACTTGGCTAGGAAA ENST00000410462.2... [36699]    109 GGTGGGTCCAAAGGTAGCAAGTTATCTCAATTGATCACAGTCAG...CATTCTATCACCCCTTCTCATTACTGTACTTGACTAGTCTTTT ENST00000364501.1... [36700]    293 GGATATGAGGGCGATCTGGCAGGGACATCTGTCACCCCACTGAT...AAAATTAGCTGGGCATAGTGGCGTGCACCTGTCGTCCTAGCTA ENST00000365097.1... [36701]    172 TTGAAGGCGTGGAGACTGAAGTCCTCTCTATATCCACAGAACAG...AAGAGGGCTGTTCAGTCTCCATGCCCTTCAATCCTTGGCTACT ENST00000615087.1..."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"rnaset-retrieval","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"RNASet Retrieval","title":"Sequence Retrieval","text":"getRNASet() function enables users retrieve RNA files multiple species. convenient users wish bulk download particular set species. Internally, folder named set_rna generated RNA RNA info files stored. addition, users can specify arguments: clean_retrieval gunzip (TRUE default) clean file names automatically unzip downloaded files. Example: download process interrupted, users can re-run function download missing genomes. cases users wish download everything updating existing genomes, may specify argument update = TRUE.","code":"# specify the species names download_species <- c(\"Arabidopsis thaliana\",                        \"Arabidopsis lyrata\",                        \"Capsella rubella\") # retrieve these three species from NCBI RefSeq                        biomartr::getRNASet(\"refseq\", organisms = download_species, path = \"set_rna\")"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"retrieve-the-annotation-file-of-a-particular-genome","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"Retrieve the annotation file of a particular genome","title":"Sequence Retrieval","text":"Finally, users can download corresponding annotation .gff files particular genomes interest using getGFF() alternatively ensembl getGTF() function.","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ncbi-refseq-4","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"Example NCBI RefSeq:","title":"Sequence Retrieval","text":"downloading .gff file, users can import .gff file read_gff().","code":"# download the GFF file of Homo sapiens from refseq # and store the corresponding file in '_ncbi_downloads/annotation' HS.gff.refseq <- getGFF( db       = \"refseq\",                           organism = \"Homo sapiens\",                           path = file.path(\"_ncbi_downloads\",\"annotation\")) # import downloaded GFF file Human_GFF <- read_gff(file = HS.gff.refseq) Human_GFF seqid     source       type start       end score strand phase           <chr>      <chr>      <chr> <int>     <int> <dbl>  <chr> <dbl> 1  NC_000001.11     RefSeq     region     1 248956422     0      +     0 2  NC_000001.11 BestRefSeq       gene 11874     14409     0      +     0 3  NC_000001.11 BestRefSeq transcript 11874     14409     0      +     0 4  NC_000001.11 BestRefSeq       exon 11874     12227     0      +     0 5  NC_000001.11 BestRefSeq       exon 12613     12721     0      +     0 6  NC_000001.11 BestRefSeq       exon 13221     14409     0      +     0 7  NC_000001.11 BestRefSeq       gene 14362     29370     0      -     0 8  NC_000001.11 BestRefSeq transcript 14362     29370     0      -     0 9  NC_000001.11 BestRefSeq       exon 29321     29370     0      -     0 10 NC_000001.11 BestRefSeq       exon 24738     24891     0      -     0"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"removing-corrupt-lines-from-downloaded-gff-files","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations > Example NCBI RefSeq:","what":"Removing corrupt lines from downloaded GFF files","title":"Sequence Retrieval","text":"cases, GFF files stored NCBI databases include corrupt lines 65000 characters. leads problems trying import annotation files R. overcome issue users can specify remove_annotation_outliers = TRUE argument remove outlier lines overwrite downloaded annotation file. make downstream analysis annotation file much reliable. Example:","code":"Ath_path <- biomartr::getGFF(organism = \"Arabidopsis thaliana\", remove_annotation_outliers = TRUE) Starting GFF retrieval of 'Arabidopsis thaliana' from refseq ...   |============================================| 100%   52 MB File _ncbi_downloads/annotation/Arabidopsis_thaliana_genomic_refseq.gff.gz exists already. Thus, download has been skipped. Importing '_ncbi_downloads/annotation/Arabidopsis_thaliana_genomic_refseq.gff.gz' ... |============================================| 100%  434 MB Reading annotation file '_ncbi_downloads/annotation/Arabidopsis_thaliana_genomic_refseq.gff.gz' and removing all outlier lines with number of characters greater 65000 ... Overwriting '_ncbi_downloads/annotation/Arabidopsis_thaliana_genomic_refseq.gff.gz' with removed outlier lines ... Unzipping file _ncbi_downloads/annotation/Arabidopsis_thaliana_genomic_refseq.gff.gz' ... The new annotation file was created and has been stored at '_ncbi_downloads/annotation/Arabidopsis_thaliana_genomic_refseq.gff'. The outlier lines were stored in a separate file to explore at '/var/folders/3x/6bbw6ds1039gpwny1m0hn8r80000gp/T//RtmpuVjnsC/Arabidopsis_thaliana_genomic_refseq.gff.gz_outlier_lines.txt'."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ncbi-genbank-4","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"Example NCBI Genbank:","title":"Sequence Retrieval","text":"downloading .gff file, users can import .gff file read_gff().","code":"# download the GFF file of Homo sapiens from genbank # and store the corresponding file in '_ncbi_downloads/annotation' HS.gff.genbank <- getGFF( db       = \"genbank\",                           organism = \"Homo sapiens\",                           path = file.path(\"_ncbi_downloads\",\"annotation\")) # import downloaded GFF file Human_GFF <- read_gff(file = HS.gff.genbank) # show all elements of the data.frame # options(tibble.print_max = Inf) Human_GFF seqid  source       type     start       end score strand phase         <chr>   <chr>      <chr>     <int>     <int> <dbl>  <chr> <dbl> 1  CM000663.2 Genbank     region         1 248956422     0      +     0 2  CM000663.2 Genbank centromere 122026460 125184587     0      +     0 3  KI270706.1 Genbank     region         1    175055     0      +     0 4  KI270707.1 Genbank     region         1     32032     0      +     0 5  KI270708.1 Genbank     region         1    127682     0      +     0 6  KI270709.1 Genbank     region         1     66860     0      +     0 7  KI270710.1 Genbank     region         1     40176     0      +     0 8  KI270711.1 Genbank     region         1     42210     0      +     0 9  KI270712.1 Genbank     region         1    176043     0      +     0 10 KI270713.1 Genbank     region         1     40745     0      +     0"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"removing-corrupt-lines-from-downloaded-gff-files-1","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations > Example NCBI Genbank:","what":"Removing corrupt lines from downloaded GFF files","title":"Sequence Retrieval","text":"cases, GFF files stored NCBI databases include corrupt lines 65000 characters. leads problems trying import annotation files R. overcome issue users can specify remove_annotation_outliers = TRUE argument remove outlier lines overwrite downloaded annotation file. make downstream analysis annotation file much reliable. Example:","code":"Ath_path <- biomartr::getGFF(db = \"genbank\",              organism = \"Arabidopsis thaliana\",              remove_annotation_outliers = TRUE) Starting GFF retrieval of 'Arabidopsis thaliana' from genbank ...  Completed! Now continue with species download ... GFF download of Arabidopsis_thaliana is completed! Checking md5 hash of file: _ncbi_downloads/annotation/Arabidopsis_thaliana_md5checksums.txt ... The md5 hash of file '_ncbi_downloads/annotation/Arabidopsis_thaliana_md5checksums.txt' matches! Importing '_ncbi_downloads/annotation/Arabidopsis_thaliana_genomic_genbank.gff.gz' ... Reading annotation file '_ncbi_downloads/annotation/Arabidopsis_thaliana_genomic_genbank.gff.gz' and removing all outlier lines with number of characters greater 65000 ... Overwriting '_ncbi_downloads/annotation/Arabidopsis_thaliana_genomic_genbank.gff.gz' with removed outlier lines ... Unzipping file _ncbi_downloads/annotation/Arabidopsis_thaliana_genomic_genbank.gff.gz' ... The new annotation file was created and has been stored at '_ncbi_downloads/annotation/Arabidopsis_thaliana_genomic_genbank.gff'. The outlier lines were stored in a separate file to explore at '/var/folders/3x/6bbw6ds1039gpwny1m0hn8r80000gp/T//RtmpuVjnsC/Arabidopsis_thaliana_genomic_genbank.gff.gz_outlier_lines.txt'."},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ensembl-4","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"Example ENSEMBL:","title":"Sequence Retrieval","text":"downloading .gff file, users can import .gff file read_gff(). Users can also specify release argument denotes database release version ENSEMBL (db = \"ensembl\") case wish download archived vgenome versions. Default release = NULL meaning recent database version used.","code":"# download the GFF file of Homo sapiens from ENSEMBL # and store the corresponding file in 'ensembl/annotation' HS.gff.ensembl <- getGFF( db       = \"ensembl\",                           organism = \"Homo sapiens\",                           path = file.path(\"ensembl\",\"annotation\")) # import downloaded GFF file Human_GFF <- read_gff(file = HS.gff.ensembl) # show all elements of the data.frame # options(tibble.print_max = Inf) Human_GFF seqid source              type start       end   score strand phase    <int>  <chr>             <chr> <int>     <int>   <chr>  <chr> <dbl> 1      1 GRCh38        chromosome     1 248956422       .      .     0 2      1      . biological_region 10469     11240 1.3e+03      .     0 3      1      . biological_region 10650     10657   0.999      +     0 4      1      . biological_region 10655     10657   0.999      -     0 5      1      . biological_region 10678     10687   0.999      +     0 6      1      . biological_region 10681     10688   0.999      -     0 7      1      . biological_region 10707     10716   0.999      +     0 8      1      . biological_region 10708     10718   0.999      -     0 9      1      . biological_region 10735     10747   0.999      -     0 10     1      . biological_region 10737     10744   0.999      +     0"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"removing-corrupt-lines-from-downloaded-gff-files-2","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations > Example ENSEMBL:","what":"Removing corrupt lines from downloaded GFF files","title":"Sequence Retrieval","text":"cases, GFF files stored NCBI databases include corrupt lines 65000 characters. leads problems trying import annotation files R. overcome issue users can specify remove_annotation_outliers = TRUE argument remove outlier lines overwrite downloaded annotation file. make downstream analysis annotation file much reliable. Alternatively getGTF(): Taken together, getGFF() getGTF() combination getGenome(), getProteome(), getRNA() getCDS() allows users retrieve genome information together corresponding .gff gtf annotation file make sure version origin.","code":"# download the GTF file of Homo sapiens from ENSEMBL # and store the corresponding file in 'ensembl/annotation' HS.gtf.ensembl <- getGTF( db       = \"ensembl\",                           organism = \"Homo sapiens\",                           path = file.path(\"ensembl\",\"annotation\"),                          assembly_type = \"primary_assembly\")"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"gffset-retrieval","dir":"Articles","previous_headings":"Downloading Biological Sequences and Annotations","what":"GFFSet Retrieval","title":"Sequence Retrieval","text":"getGFFSet() function enables users retrieve GFF files multiple species. convenient users wish bulk download particular set species. Internally, folder named set_gff generated GFF GFF info files stored. addition, users can specify arguments: clean_retrieval gunzip (TRUE default) clean file names automatically unzip downloaded files. Example: download process interrupted, users can re-run function download missing genomes. cases users wish download everything updating existing genomes, may specify argument update = TRUE. cases, GFF files stored NCBI databases include corrupt lines 65000 characters. leads problems trying import annotation files R. overcome issue users can specify remove_annotation_outliers = TRUE argument remove outlier lines overwrite downloaded annotation file. make downstream analysis annotation file much reliable.","code":"# specify the species names download_species <- c(\"Arabidopsis thaliana\",                        \"Arabidopsis lyrata\",                        \"Capsella rubella\") # retrieve these three species from NCBI RefSeq                        biomartr::getGFFSet(\"refseq\", organisms = download_species, path = \"set_gff\")"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"repeat-masker-retrieval","dir":"Articles","previous_headings":"","what":"Repeat Masker Retrieval","title":"Sequence Retrieval","text":"Repeat Masker tool screening DNA sequences interspersed repeats low complexity DNA sequences. NCBI stores Repeat Masker sevel species databases can retrieved using getRepeatMasker() imported via read_rm().","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ncbi-refseq-5","dir":"Articles","previous_headings":"Repeat Masker Retrieval","what":"Example NCBI RefSeq:","title":"Sequence Retrieval","text":"Now users can import TE annotation file using read_rm().","code":"# download repeat masker annotation file for Homo sapiens Hsapiens_rm <- getRepeatMasker( db       = \"refseq\",                                   organism = \"Homo sapiens\",                                   path = file.path(\"refseq\",\"TEannotation\")) # import TE annotation file Hsapiens_rm_import <- read_rm(\"refseq/TEannotation/Homo_sapiens_rm_refseq.out.gz\") # look at data Hsapiens_rm_import"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"genome-assembly-stats-retrieval","dir":"Articles","previous_headings":"","what":"Genome Assembly Stats Retrieval","title":"Sequence Retrieval","text":"specifying scientific name organism interest corresponding genome assembly stats file storing assembly statistics organism interest can downloaded stored locally.","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ncbi-refseq-6","dir":"Articles","previous_headings":"Genome Assembly Stats Retrieval","what":"Example NCBI RefSeq:","title":"Sequence Retrieval","text":"Now users can import TE annotation file using read_rm().","code":"# download genome assembly stats file for Homo sapiens Hsapiens_stats <- getAssemblyStats( db       = \"refseq\",                                   organism = \"Homo sapiens\",                                   path = file.path(\"refseq\",\"AssemblyStats\")) # import TE annotation file Hsapiens_stats_import <- read_assemblystats(Hsapiens_stats) # look at data Hsapiens_stats_import A tibble: 1,196 x 6    unit_name molecule_name molecule_type sequence_type statistic         value    <chr>     <chr>         <chr>         <chr>         <chr>             <int>  1 all       all           all           all           total-length         NA  2 all       all           all           all           spanned-gaps        661  3 all       all           all           all           unspanned-gaps      349  4 all       all           all           all           region-count        317  5 all       all           all           all           scaffold-count      875  6 all       all           all           all           scaffold-N50   59364414  7 all       all           all           all           scaffold-L50         17  8 all       all           all           all           scaffold-N75   31699399  9 all       all           all           all           scaffold-N90    7557127 10 all       all           all           all           contig-count       1536"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ncbi-genbank-5","dir":"Articles","previous_headings":"Genome Assembly Stats Retrieval","what":"Example NCBI Genbank:","title":"Sequence Retrieval","text":"Now users can import TE annotation file using read_rm().","code":"# download genome assembly stats file for Homo sapiens Hsapiens_stats <- getAssemblyStats( db       = \"genbank\",                                   organism = \"Homo sapiens\",                                   path = file.path(\"genbank\",\"AssemblyStats\")) # import TE annotation file Hsapiens_stats_import <- read_assemblystats(Hsapiens_stats) # look at data Hsapiens_stats_import A tibble: 1,196 x 6    unit_name molecule_name molecule_type sequence_type statistic         value    <chr>     <chr>         <chr>         <chr>         <chr>             <int>  1 all       all           all           all           total-length         NA  2 all       all           all           all           spanned-gaps        661  3 all       all           all           all           unspanned-gaps      349  4 all       all           all           all           region-count        317  5 all       all           all           all           scaffold-count      875  6 all       all           all           all           scaffold-N50   59364414  7 all       all           all           all           scaffold-L50         17  8 all       all           all           all           scaffold-N75   31699399  9 all       all           all           all           scaffold-N90    7557127 10 all       all           all           all           contig-count       1536"},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"collection-retrieval","dir":"Articles","previous_headings":"","what":"Collection Retrieval","title":"Sequence Retrieval","text":"automated retrieval collections (= Genome, Proteome, CDS, RNA, GFF, Repeat Masker, AssemblyStats) make sure genome file organism match CDS, proteome, RNA, GFF, etc file generated using genome assembly version. One aspect genomics studies fail computational biological reproducibility clear whether CDS, proteome, RNA, GFF, etc files used proposed analysis generated using genome assembly file denoting genome assembly version. avoid seemingly trivial mistake encourage users retrieve genome file collections using biomartr function getCollection() attach corresponding output Supplementary Data respective genomics study ensure computational biological reproducibility. specifying scientific name organism interest collection consisting genome file, proteome file, CDS file, RNA file, GFF file, Repeat Masker file, AssemblyStats file organism interest can downloaded stored locally.","code":""},{"path":"https://docs.ropensci.org/biomartr/articles/Sequence_Retrieval.html","id":"example-ncbi-refseq-7","dir":"Articles","previous_headings":"Collection Retrieval","what":"Example NCBI RefSeq:","title":"Sequence Retrieval","text":"Internally, getCollection() function now generate folder named refseq/Collection/Saccharomyces_erevisiae store genome annotation files Saccharomyces cerevisiae folder. addition, exact genoem annotation version logged doc folder. Users can now simply attach output folder supplementary data study state materials sections. way, computational biological reproducibility can standardized indeed become trivial context genome version annotation version.","code":"# download collection for Saccharomyces cerevisiae getCollection( db = \"refseq\",                 organism = \"Saccharomyces cerevisiae\",                 path = file.path(\"refseq\",\"Collections\")) Genome download is completed! Checking md5 hash of file: refseq/Collections/Saccharomyces_cerevisiae_md5checksums.txt ... The md5 hash of file 'refseq/Collections/Saccharomyces_cerevisiae_md5checksums.txt' matches! The genome of 'Saccharomyces_cerevisiae' has been downloaded to 'refseq/Collections' and has been named 'Saccharomyces_cerevisiae_genomic_refseq.fna.gz'. Starting proteome retrieval of 'Saccharomyces cerevisiae' from refseq ...   Proteome download is completed! Checking md5 hash of file: refseq/Collections/Saccharomyces_cerevisiae_md5checksums.txt ... The md5 hash of file 'refseq/Collections/Saccharomyces_cerevisiae_md5checksums.txt' matches! The proteome of 'Saccharomyces_cerevisiae' has been downloaded to 'refseq/Collections' and has been named 'Saccharomyces_cerevisiae_protein_refseq.faa.gz' . Starting CDS retrieval of 'Saccharomyces cerevisiae' from refseq ...   CDS download is completed! Checking md5 hash of file: refseq/Collections/Saccharomyces_cerevisiae_md5checksums.txt ... The md5 hash of file 'refseq/Collections/Saccharomyces_cerevisiae_md5checksums.txt' matches! The genomic CDS of 'Saccharomyces_cerevisiae' has been downloaded to 'refseq/Collections' and has been named 'Saccharomyces_cerevisiae_cds_from_genomic_refseq.fna.gz' . Starting GFF retrieval of 'Saccharomyces cerevisiae' from refseq ...   GFF download is completed! Checking md5 hash of file: refseq/Collections/Saccharomyces_cerevisiae_md5checksums.txt ... The md5 hash of file 'refseq/Collections/Saccharomyces_cerevisiae_md5checksums.txt' matches! The *.gff annotation file of 'Saccharomyces_cerevisiae' has been downloaded to 'refseq/Collections' and has been named 'Saccharomyces_cerevisiae_genomic_refseq.gff.gz'. Starting RNA retrieval of 'Saccharomyces cerevisiae' from refseq ...   RNA download is completed! Checking md5 hash of file: refseq/Collections/Saccharomyces_cerevisiae_md5checksums.txt ... The md5 hash of file 'refseq/Collections/Saccharomyces_cerevisiae_md5checksums.txt' matches! The genomic RNA of 'Saccharomyces_cerevisiae' has been downloaded to 'refseq/Collections' and has been named 'Saccharomyces_cerevisiae_rna_from_genomic_refseq.fna.gz' . Starting Repeat Masker retrieval of 'Saccharomyces cerevisiae' from refseq ...   RepeatMasker download is completed! Checking md5 hash of file: refseq/Collections/Saccharomyces_cerevisiae_md5checksums.txt ... The md5 hash of file 'refseq/Collections/Saccharomyces_cerevisiae_md5checksums.txt' matches! The Repeat Masker output file of 'Saccharomyces_cerevisiae' has been downloaded to 'refseq/Collections' and has been named 'Saccharomyces_cerevisiae_rm_refseq.out.gz'. Starting assembly quality stats retrieval of 'Saccharomyces cerevisiae' from refseq ...  Genome assembly quality stats file download completed! The assembly statistics file of 'Saccharomyces_cerevisiae' has been downloaded to 'refseq/Collections' and has been named 'Saccharomyces_cerevisiae_assembly_stats_refseq.txt'. Collection retrieval finished successfully!   We retrieved the genome assembly and checked the annotation for 'Saccharomyces cerevisiae' (taxid: 559292, strain=S288C) from 'ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/146/045/GCF_000146045.2_R64/GCF_000146045.2_R64_assembly_stats.txt' (accession: GCF_000146045.2, bioproject: PRJNA128, biosample: NA) using the biomartr R package (Drost and Paszkowski, 2017)."},{"path":"https://docs.ropensci.org/biomartr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hajk-Georg Drost. Author, maintainer. Haakon Tjeldnes. Author, contributor.","code":""},{"path":"https://docs.ropensci.org/biomartr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hajk-Georg Drost, Jerzy Paszkowski. Biomartr: genomic data retrieval R. Bioinformatics (2017). https://doi.org/10.1093/bioinformatics/btw821","code":"@Manual{,   entry = {Article},   title = {Biomartr: genomic data retrieval with R},   author = {Drost Hajk-Georg and Paszkowski Jerzy},   journal = {Bioinformatics},   year = {2017},   url = {https://academic.oup.com/bioinformatics/article/doi/10.1093/bioinformatics/btw821/2931816/Biomartr-genomic-data-retrieval-with-R}, }"},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"motivation","dir":"","previous_headings":"Genomic Data Retrieval with R","what":"Motivation:","title":"Genomic Data Retrieval","text":"package born frustration automate genomic data retrieval process create computationally reproducible scripts large-scale genomics studies. Since couldn’t find easy--use fully reproducible software libraries sat tried implement framework enable anyone automate standardize genomic data retrieval process. hope package useful others well helps promote reproducible research genomics studies. happily welcome anyone wishes contribute project :) Just drop email. Please find detailed documentation .","code":""},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"citation","dir":"","previous_headings":"Genomic Data Retrieval with R","what":"Citation","title":"Genomic Data Retrieval","text":"Please cite biomartr helpful research. allow continue maintaining project future. Drost HG, Paszkowski J. Biomartr: genomic data retrieval R. Bioinformatics (2017) 33(8): 1216-1217. doi:10.1093/bioinformatics/btw821.","code":""},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"short-package-description","dir":"","previous_headings":"Genomic Data Retrieval with R","what":"Short package description:","title":"Genomic Data Retrieval","text":"vastly growing number sequenced genomes allows us perform new type biological research. Using comparative approach genomes provide us new insights biological information encoded molecular level information changes evolutionary time. first step, however, genome based study retrieve genomes annotation databases. automate retrieval process information meta-genomic scale, biomartr package provides interface functions genomic sequence retrieval functional annotation retrieval. major aim biomartr facilitate computational reproducibility large-scale handling genomic data (meta-)genomic analyses. addition, biomartr aims address genome version crisis. biomartr users can now control informed genome versions retrieve automatically. Many large scale genomics studies lack information thus, reproducibility data interpretation become nearly impossible documentation genome version information gets neglected. detail, biomartr automates genome, proteome, CDS, RNA, Repeats, GFF/GTF (annotation), genome assembly quality, metagenome project data retrieval major biological databases NCBI RefSeq NCBI Genbank ENSEMBL ENSEMBLGENOMES (April 2019 - ENSEMBL ENSEMBLGENOMES joined - see details ) UniProt Furthermore, interface Ensembl Biomart database allows users retrieve functional annotation genomic loci using novel organism centric search strategy. addition, users can download entire databases NCBI RefSeq NCBI nr NCBI nt NCBI Genbank ENSEMBL one command.","code":""},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"similar-work","dir":"","previous_headings":"Genomic Data Retrieval with R","what":"Similar Work","title":"Genomic Data Retrieval","text":"main difference BiomaRt package biomartr package biomartr extends functional annotation retrieval procedure BiomaRt addition provides useful retrieval functions genomes, proteomes, coding sequences, gff files, RNA sequences, Repeat Masker annotations files, functions retrieval entire databases NCBI nr etc. Please consult Tutorials section details. context functional annotation retrieval biomartr package allows users screen available marts using scientific name organism interest instead first searching marts datasets support particular organism interest (required using BiomaRt package). Furthermore, biomartr allows search particular topics searching attributes filters. aware similar naming packages unfortunate, arose due historical reasons (please find detailed explanation : https://github.com/ropensci/biomartr/blob/master/FAQs.md #11). also dedicated entire vignette compare BiomaRt biomartr package functionality context Functional Annotation (functionality overlaps comprises 20% overall functionality biomartr package).","code":""},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"feedback","dir":"","previous_headings":"Genomic Data Retrieval with R","what":"Feedback","title":"Genomic Data Retrieval","text":"truly value opinion improvement suggestions. Hence, extremely grateful take 1 minute 3 question survey (https://goo.gl/forms/Qaoxxjb1EnNSLpM02) can learn improve biomartr best possible way. Many many thanks advance.","code":""},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Genomic Data Retrieval","text":"biomartr package relies Bioconductor tools thus requires installation following packages: Now users can install biomartr CRAN:","code":"# Install core Bioconductor packages if (!requireNamespace(\"BiocManager\"))     install.packages(\"BiocManager\") BiocManager::install() # Install package dependencies BiocManager::install(\"Biostrings\") BiocManager::install(\"biomaRt\") # install biomartr 1.0.7 from CRAN install.packages(\"biomartr\", dependencies = TRUE)  # install the developer version containing the newest features BiocManager::install(\"ropensci/biomartr\")"},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"installation-with-bioconda","dir":"","previous_headings":"","what":"Installation with Bioconda","title":"Genomic Data Retrieval","text":"activated Bioconda channel (see 2. Set channels), install : update : use docker container: (check r-biomartr/tags valid values )","code":"conda install r-biomartr conda update r-biomartr docker pull quay.io/biocontainers/r-biomartr:<tag>"},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"collection-retrieval","dir":"","previous_headings":"Example","what":"Collection Retrieval","title":"Genomic Data Retrieval","text":"automated retrieval collections (= Genome, Proteome, CDS, RNA, GFF, Repeat Masker, AssemblyStats files) make sure genome file organism match CDS, proteome, RNA, GFF, etc file generated using genome assembly version. One aspect genomics studies fail computational biological reproducibility clear whether CDS, proteome, RNA, GFF, etc files used proposed analysis generated using genome assembly file denoting genome assembly version. avoid seemingly trivial mistake encourage users retrieve genome file collections using biomartr function getCollection() attach corresponding output Supplementary Data respective genomics study ensure computational biological reproducibility. Internally, getCollection() function now generate folder named refseq/Collection/Saccharomyces_cerevisiae store genome annotation files Saccharomyces cerevisiae folder. addition, exact genoem annotation version logged doc folder. Internally, text file named doc_Saccharomyces_cerevisiae_db_refseq.txt generated. information stored log file structured follows: ideal world reference file included supplementary information life science publication relies genomic information reproducibility experiments analyses becomes achievable.","code":"# download collection for Saccharomyces cerevisiae biomartr::getCollection( db = \"refseq\", organism = \"Saccharomyces cerevisiae\") File Name: Saccharomyces_cerevisiae_assembly_stats_refseq.txt Organism Name: Saccharomyces_cerevisiae Database: NCBI refseq URL: ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/146/045/GCF_000146045.2_R64/GCF_000146045.2_R64_assembly_stats.txt Download_Date: Wed Jun 27 15:21:51 2018 refseq_category: reference genome assembly_accession: GCF_000146045.2 bioproject: PRJNA128 biosample: NA taxid: 559292 infraspecific_name: strain=S288C version_status: latest release_type: Major genome_rep: Full seq_rel_date: 2014-12-17 submitter: Saccharomyces Genome Database"},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"genome-retrieval-of-hundreds-of-genomes-using-only-one-command","dir":"","previous_headings":"Example","what":"Genome retrieval of hundreds of genomes using only one command","title":"Genomic Data Retrieval","text":"Download mammalian vertebrate genomes NCBI RefSeq via: geneomes stored folder named according kingdom. case vertebrate_mammalian. Alternatively, users can specify .folder argument define custom output folder path.","code":"# download all vertebrate genomes meta.retrieval(kingdom = \"vertebrate_mammalian\", db = \"refseq\", type = \"genome\")"},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"frequently-asked-questions-faqs","dir":"","previous_headings":"Example","what":"Frequently Asked Questions (FAQs)","title":"Genomic Data Retrieval","text":"Please find FAQs .","code":""},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"discussions-and-bug-reports","dir":"","previous_headings":"Example","what":"Discussions and Bug Reports","title":"Genomic Data Retrieval","text":"happy learn potential improvements concepts functions provided package. Furthermore, case find bugs need additional (flexible) functionality parts package, please let know: https://github.com/HajkD/biomartr/issues","code":""},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"tutorials","dir":"","previous_headings":"","what":"Tutorials","title":"Genomic Data Retrieval","text":"Getting Started biomartr: NCBI Database Retrieval Genomic Sequence Retrieval Meta-Genome Retrieval Functional Annotation BioMart Examples Users can also read tutorials within (Posit (former RStudio)) :","code":"# source the biomartr package library(biomartr)  # look for all tutorials (vignettes) available in the biomartr package # this will open your web browser browseVignettes(\"biomartr\")"},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"news","dir":"","previous_headings":"","what":"NEWS","title":"Genomic Data Retrieval","text":"current status package well detailed history functionality version biomartr can found NEWS section.","code":""},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"install-developer-version","dir":"","previous_headings":"","what":"Install Developer Version","title":"Genomic Data Retrieval","text":"bug fixes new functionality available CRAN yet, developer version GitHub. download install recent version biomartr run:","code":"# install the current version of biomartr on your system if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"ropensci/biomartr\")"},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"meta-genome-retrieval","dir":"","previous_headings":"Genomic Data Retrieval","what":"Meta-Genome Retrieval","title":"Genomic Data Retrieval","text":"meta.retrieval() : Perform Meta-Genome Retieval NCBI species belonging kingdom life taxonomic subgroup meta.retrieval.() : Perform Meta-Genome Retieval NCBI entire kingdom life getMetaGenomes() : Retrieve metagenomes NCBI Genbank getMetaGenomeAnnotations() : Retrieve annotation *.gff files metagenomes NCBI Genbank listMetaGenomes() : List available metagenomes NCBI Genbank getMetaGenomeSummary() : Helper function retrieve assembly_summary.txt file NCBI genbank metagenomes clean.retrieval(): Format meta.retrieval output","code":""},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"genome-retrieval","dir":"","previous_headings":"Genomic Data Retrieval","what":"Genome Retrieval","title":"Genomic Data Retrieval","text":"listGenomes() : List genomes available NCBI ENSEMBL servers listKingdoms() : list number available species per kingdom life NCBI ENSEMBL servers listGroups() : list number available species per group NCBI ENSEMBL servers getKingdoms() : Retrieve available kingdoms life getGroups() : Retrieve available groups kingdom life .genome.available() : Check Genome Availability NCBI ENSEMBL servers getCollection() : Retrieve Collection: Genome, Proteome, CDS, RNA, GFF, Repeat Masker, AssemblyStats getGenome() : Download specific genome stored NCBI ENSEMBL servers getGenomeSet() : Genome Retrieval multiple species getProteome() : Download specific proteome stored NCBI ENSEMBL servers getProteomeSet() : Proteome Retrieval multiple species getCDS() : Download specific CDS file (genome) stored NCBI ENSEMBL servers getCDSSet() : CDS Retrieval multiple species getRNA() : Download specific RNA file stored NCBI ENSEMBL servers getRNASet() : RNA Retrieval multiple species getGFF() : Genome Annotation Retrieval NCBI (*.gff) ENSEMBL (*.gff3) servers getGTF() : Genome Annotation Retrieval (*.gtf) ENSEMBL servers getRepeatMasker() : Repeat Masker TE Annotation Retrieval getAssemblyStats() : Genome Assembly Stats Retrieval NCBI getKingdomAssemblySummary() : Helper function retrieve assembly_summary.txt files NCBI kingdoms getMetaGenomeSummary() : Helper function retrieve assembly_summary.txt files NCBI genbank metagenomes getSummaryFile() : Helper function retrieve assembly_summary.txt file NCBI specific kingdom getENSEMBLInfo() : Retrieve ENSEMBL info file getGENOMEREPORT() : Retrieve GENOME_REPORTS file NCBI","code":""},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"import-downloaded-files","dir":"","previous_headings":"Genomic Data Retrieval","what":"Import Downloaded Files","title":"Genomic Data Retrieval","text":"read_genome() : Import genomes Biostrings data.table object read_proteome() : Import proteome Biostrings data.table object read_cds() : Import CDS Biostrings data.table object read_gff() : Import GFF file read_rna() : Import RNA file read_rm() : Import Repeat Masker output file read_assemblystats() : Import Genome Assembly Stats File","code":""},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"database-retrieval","dir":"","previous_headings":"Genomic Data Retrieval","what":"Database Retrieval","title":"Genomic Data Retrieval","text":"listNCBIDatabases() : Retrieve List Available NCBI Databases Download download.database() : Download NCBI database local hard drive download.database.() : Download complete NCBI Database e.g. NCBI nr local hard drive","code":""},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"biomart-queries","dir":"","previous_headings":"Genomic Data Retrieval","what":"BioMart Queries","title":"Genomic Data Retrieval","text":"biomart() : Main function query BioMart database getMarts() : Retrieve Available BioMart Databases getDatasets() : Retrieve Available Datasets BioMart Database getAttributes() : Retrieve Available Attributes Specific Dataset getFilters() : Retrieve Available Filters Specific Dataset organismBM() : Function organism specific retrieval available BioMart marts datasets organismAttributes() : Function organism specific retrieval available BioMart attributes organismFilters() : Function organism specific retrieval available BioMart filters","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"gene-ontology","dir":"","previous_headings":"Genomic Data Retrieval > Performing Gene Ontology queries","what":"Gene Ontology","title":"Genomic Data Retrieval","text":"getGO() : Function retrieve GO terms given set genes","code":""},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"download-developer-version-on-windows-systems","dir":"","previous_headings":"","what":"Download Developer Version On Windows Systems","title":"Genomic Data Retrieval","text":"","code":"# On Windows, this won't work - see ?build_github_devtools install_github(\"HajkD/biomartr\", build_vignettes = TRUE, dependencies = TRUE)  # When working with Windows, first you need to install the # R package: rtools -> install.packages(\"rtools\")  # Afterwards you can install devtools -> install.packages(\"devtools\") # and then you can run:  devtools::install_github(\"HajkD/biomartr\", build_vignettes = TRUE, dependencies = TRUE)  # and then call it from the library library(\"biomartr\", lib.loc = \"C:/Program Files/R/R-3.1.1/library\")"},{"path":"https://docs.ropensci.org/biomartr/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Genomic Data Retrieval","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/biomart.html","id":null,"dir":"Reference","previous_headings":"","what":"Main BioMart Query Function — biomart","title":"Main BioMart Query Function — biomart","text":"function takes set gene ids biomart specifications performs biomart query given set gene ids.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/biomart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main BioMart Query Function — biomart","text":"","code":"biomart(genes, mart, dataset, attributes, filters, mute_citation = FALSE, ...)"},{"path":"https://docs.ropensci.org/biomartr/reference/biomart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main BioMart Query Function — biomart","text":"genes character vector storing gene ids organisms interest queried BioMart. mart character string specifying mart used. Users can obtain available marts using getMarts. dataset character string specifying dataset within mart used, e.g. dataset = \"hsapiens_gene_ensembl\". attributes character vector specifying attributes shall used, e.g. attributes = c(\"start_position\",\"end_position\",\"description\"). filters character vector specifying filter (query key) BioMart query, e.g. filter = \"ensembl_gene_id\". mute_citation logical value indicating whether citation message muted. ... additional parameters getBM function.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/biomart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main BioMart Query Function — biomart","text":"data.table storing initial query gene vector first column, output gene vector second column, attributes following columns.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/biomart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Main BioMart Query Function — biomart","text":"function main query function biomartr package. enables fastly access annotations given gene set based biomaRt package implemented Steffen Durinck et al.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/biomart.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Main BioMart Query Function — biomart","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/biomart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Main BioMart Query Function — biomart","text":"","code":"if (FALSE) { # 1) select a mart getMarts()  # we will select mart 'plants_mart' and search for available datasets getDatasets(mart = \"plants_mart\")  # we choose dataset 'athaliana_eg_gene' and run biomart() # using mart: 'plants_mart', dataset: \"athaliana_eg_gene\" # attributes: c(\"start_position\",\"end_position\",\"description\") # for an example gene set of Arabidopsis thaliana: # c(\"AT1G06090\", \"AT1G06100\", \"AT1G06110\", \"AT1G06120\", #    \"AT1G06130\", \"AT1G06200\")  biomart(genes      = c(\"AT1G06090\", \"AT1G06100\",                        \"AT1G06110\", \"AT1G06120\",                        \"AT1G06130\", \"AT1G06200\"),         mart       = \"plants_mart\",         dataset    = \"athaliana_eg_gene\",         attributes = c(\"start_position\",\"end_position\",\"description\"),         filters    = \"ensembl_gene_id\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/biomartr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Genomic Data Retrieval — biomartr-package","title":"Genomic Data Retrieval — biomartr-package","text":"package interacts suite web Application Programming Interfaces FTP sites perform automated genomic data retieval annotation information retrieval.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/biomartr-package.html","id":"about","dir":"Reference","previous_headings":"","what":"About","title":"Genomic Data Retrieval — biomartr-package","text":"automate retrieval process meta-genomic scale, package  provides useful interface functions genomic sequence retrieval  functional annotation retrieval.  major aim biomartr facilitate computational  reproducibility large-scale handling genomic data  (meta-)genomic analyses. detail, biomartr aims provide users easy use framework obtain genome, proteome, CDS, GFF (annotation), genome assembly quality, metagenome project data. Furthermore, interface Ensembl Biomart database allows users retrieve functional annotation genomic loci. Users can download entire databases NCBI RefSeq NCBI nr NCBI nt NCBI Genbank NCBI nt Ensembl Ensembl Genomes UniProt","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/biomartr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Genomic Data Retrieval — biomartr-package","text":"Hajk-Georg Drost hajk-georg.drost@tuebingen.mpg.de","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/cachedir.html","id":null,"dir":"Reference","previous_headings":"","what":"Get directory to store back end files like kingdom summaries etc — cachedir","title":"Get directory to store back end files like kingdom summaries etc — cachedir","text":"Get directory store back end files like kingdom summaries etc","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/cachedir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get directory to store back end files like kingdom summaries etc — cachedir","text":"","code":"cachedir(non_temp_cache = \"~/.biomartr_cache_dir.rds\")"},{"path":"https://docs.ropensci.org/biomartr/reference/cachedir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get directory to store back end files like kingdom summaries etc — cachedir","text":"non_temp_cache \"~/.biomartr_cache_dir.rds\",","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/cachedir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get directory to store back end files like kingdom summaries etc — cachedir","text":"reads rds file, returns path local cache, existing, use tempdir().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/cachedir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get directory to store back end files like kingdom summaries etc — cachedir","text":"","code":"cachedir() #> [1] \"/tmp/RtmpAqHRci\""},{"path":"https://docs.ropensci.org/biomartr/reference/cachedir_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set directory to store back end files like kingdom summaries etc — cachedir_set","title":"Set directory to store back end files like kingdom summaries etc — cachedir_set","text":"Set directory store back end files like kingdom summaries etc","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/cachedir_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set directory to store back end files like kingdom summaries etc — cachedir_set","text":"","code":"cachedir_set(path)"},{"path":"https://docs.ropensci.org/biomartr/reference/cachedir_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set directory to store back end files like kingdom summaries etc — cachedir_set","text":"path path cache dir, example \"~/Bio_data/biomartr_cache/\"","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/cachedir_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set directory to store back end files like kingdom summaries etc — cachedir_set","text":"invisible(NULL), save file path location","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/cachedir_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set directory to store back end files like kingdom summaries etc — cachedir_set","text":"","code":"# By default it is tempdir() cachedir() #> [1] \"/tmp/RtmpAqHRci\" # cachedir_set(\"~/Bio_data/biomartr_cache/\") cachedir() #> [1] \"/tmp/RtmpAqHRci\""},{"path":"https://docs.ropensci.org/biomartr/reference/check_annotation_biomartr.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether an annotation file contains outlier lines — check_annotation_biomartr","title":"Check whether an annotation file contains outlier lines — check_annotation_biomartr","text":"annotation files include lines character lengths greater 65000.  causes problems trying import annotation files R using import. overcome issue, function screens lines given annotation file removes lines import can handle file.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/check_annotation_biomartr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether an annotation file contains outlier lines — check_annotation_biomartr","text":"","code":"check_annotation_biomartr(annotation_file, remove_annotation_outliers = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/reference/check_annotation_biomartr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether an annotation file contains outlier lines — check_annotation_biomartr","text":"annotation_file file path annotation file. remove_annotation_outliers shall outlier lines removed input annotation_file?  yes, initial annotation_file overwritten removed outlier lines stored tempdir exploration.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/check_annotation_biomartr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check whether an annotation file contains outlier lines — check_annotation_biomartr","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/check_annotation_biomartr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether an annotation file contains outlier lines — check_annotation_biomartr","text":"","code":"if (FALSE) { # download an example annotation file from NCBI RefSeq Ath_path <- biomartr::getGFF(organism = \"Arabidopsis thaliana\") # run annotation file check on the downloaded file biomartr::check_annotation_biomartr(Ath_path) # several outlier lines were detected, thus we re-run the # function using 'remove_annotation_outliers = TRUE' # to remove the outliers and overwrite the file biomartr::check_annotation_biomartr(Ath_path, remove_annotation_outliers = TRUE) }"},{"path":"https://docs.ropensci.org/biomartr/reference/download.database.all.html","id":null,"dir":"Reference","previous_headings":"","what":"Download all elements of an NCBI databse — download.database.all","title":"Download all elements of an NCBI databse — download.database.all","text":"download.database functions allows users retrieve individual packages NCBI database. function designed retrieve entire database selected users (hence packages  corresponding database).","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/download.database.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download all elements of an NCBI databse — download.database.all","text":"","code":"download.database.all(db, path = NULL)"},{"path":"https://docs.ropensci.org/biomartr/reference/download.database.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download all elements of an NCBI databse — download.database.all","text":"db character string specifying database shall downloaded (selected listDatabases). path character string specifying location (folder) corresponding database shall stored. case folder exist yet, created.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/download.database.all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download all elements of an NCBI databse — download.database.all","text":"character vector storing file paths downloaded databases.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/download.database.all.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download all elements of an NCBI databse — download.database.all","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/download.database.all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download all elements of an NCBI databse — download.database.all","text":"","code":"if (FALSE) { # search for available NCBI databases   listNCBIDatabases(db = \"all\") # choose database NCBI nr and download compelete database   download.database.all(db = \"nr\", path = \"nr\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/download.database.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a NCBI Database to Your Local Hard Drive — download.database","title":"Download a NCBI Database to Your Local Hard Drive — download.database","text":"function allows users download database selected listDatabases local hard drive.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/download.database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a NCBI Database to Your Local Hard Drive — download.database","text":"","code":"download.database(db, path = \"database\")"},{"path":"https://docs.ropensci.org/biomartr/reference/download.database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a NCBI Database to Your Local Hard Drive — download.database","text":"db character string specifying database shall downloaded (selected listDatabases). path character string specifying location (folder) corresponding database shall stored. Default path = \"database\". case folder exist yet, created.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/download.database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a NCBI Database to Your Local Hard Drive — download.database","text":"File path downloaded database file.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/download.database.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download a NCBI Database to Your Local Hard Drive — download.database","text":"function downloads large databases hard drive. purpose folder named database (default) created correspondning database stored folder.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/download.database.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download a NCBI Database to Your Local Hard Drive — download.database","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/download.database.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download a NCBI Database to Your Local Hard Drive — download.database","text":"","code":"if (FALSE) {   # search for available NCBI nr databases   listNCBIDatabases(db = \"nr\")   # select NCBI nr version 27 =  \"nr.27.tar.gz\"   # and download it to your hard drive   # -> please note that large databases take some time for download!   download.database(db = \"nr.27.tar.gz\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/ensembl_divisions.html","id":null,"dir":"Reference","previous_headings":"","what":"List all available ENSEMBL divisions — ensembl_divisions","title":"List all available ENSEMBL divisions — ensembl_divisions","text":"Retrieve list available databases ENSEMBL get.ensembl.info can retrieved.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/ensembl_divisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all available ENSEMBL divisions — ensembl_divisions","text":"","code":"ensembl_divisions()"},{"path":"https://docs.ropensci.org/biomartr/reference/ensembl_divisions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List all available ENSEMBL divisions — ensembl_divisions","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/ensembl_divisions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all available ENSEMBL divisions — ensembl_divisions","text":"","code":"ensembl_divisions() #> [1] \"EnsemblVertebrates\" \"EnsemblPlants\"      \"EnsemblFungi\"       #> [4] \"EnsemblMetazoa\"     \"EnsemblBacteria\"    \"EnsemblProtists\""},{"path":"https://docs.ropensci.org/biomartr/reference/get.ensembl.info.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to retrieve species information from the ENSEMBL API — get.ensembl.info","title":"Helper function to retrieve species information from the ENSEMBL API — get.ensembl.info","text":"function interfaces ENSEMBL API (https://rest.ensembl.org/info/species?content-type=application/json) internally stores output use information subsequent retrieval function calls.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/get.ensembl.info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to retrieve species information from the ENSEMBL API — get.ensembl.info","text":"","code":"get.ensembl.info(update = FALSE, division)"},{"path":"https://docs.ropensci.org/biomartr/reference/get.ensembl.info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to retrieve species information from the ENSEMBL API — get.ensembl.info","text":"update logical, default FALSE. TRUE, force re-download info. division ENSEMBL database (division) information shall retrieved (available options can obtained ensembl_divisions).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/get.ensembl.info.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Helper function to retrieve species information from the ENSEMBL API — get.ensembl.info","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/get.ensembl.info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to retrieve species information from the ENSEMBL API — get.ensembl.info","text":"","code":"if (FALSE) { # Look at available ENSEMBL division options ensembl_divisions() # Retrieve available information for EnsemblVertebrates example <- get.ensembl.info(division = \"EnsemblVertebrates\") example # Update information file stored in the tempdir() folder. example_update <- get.ensembl.info(division = \"EnsemblVertebrates\", update = TRUE) example_update }"},{"path":"https://docs.ropensci.org/biomartr/reference/getAssemblyStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Genome Assembly Stats Retrieval — getAssemblyStats","title":"Genome Assembly Stats Retrieval — getAssemblyStats","text":"Main genome assembly stats retrieval function organism interest. specifying scientific name organism interest corresponding  genome assembly stats file storing assembly statistics organism interest can downloaded stored locally. Genome assembly stats files can retrieved several databases.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getAssemblyStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genome Assembly Stats Retrieval — getAssemblyStats","text":"","code":"getAssemblyStats(   db = \"refseq\",   organism,   reference = FALSE,   skip_bacteria = TRUE,   release = NULL,   type = \"download\",   path = file.path(\"_ncbi_downloads\", \"genomeassembly_stats\"),   mute_citation = FALSE )"},{"path":"https://docs.ropensci.org/biomartr/reference/getAssemblyStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Genome Assembly Stats Retrieval — getAssemblyStats","text":"db character string specifying database genome shall retrieved: db = \"refseq\" db = \"genbank\" db = \"ensembl\" organism character string specifying scientific name organism interest, e.g. organism = \"Homo sapiens\". reference logical value indicating whether genome shall downloaded marked database either reference genome representative genome. skip_bacteria Due enormous dataset size (> 700MB July 2023), bacterial summary file loaded default anymore. users wish gain insights bacterial kingdom needs actively specify skip_bacteria = FALSE. skip_bacteria = FALSE set bacterial summary file downloaded. release recent database version used. release = 75 human give stable GRCh37 release ensembl.  Value must > 46, since ensembl structure data standard format . type shall file retrieved (default) type = \"download\" corresponding file downloaded subsequently imported type = \"import\". path character string specifying location (folder) corresponding file shall stored. Default path = file.path(\"_ncbi_downloads\",\"genomeassembly_stats\"). mute_citation logical value indicating whether citation message muted.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getAssemblyStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Genome Assembly Stats Retrieval — getAssemblyStats","text":"File path downloaded genome assembly stats file.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getAssemblyStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Genome Assembly Stats Retrieval — getAssemblyStats","text":"Internally function loads overview.txt file NCBI: refseq: ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/ genbank: ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/ retrieve available scientific names organisms creates directory '_ncbi_downloads/genomeassembly_stats' store Genome Assembly Stats interest text file future processing. case corresponding fasta file already exists within '_ncbi_downloads/genomeassembly_stats' folder accessible within workspace, download process performed. example genome assembly stats file can found : ftp://ftp.ncbi.nlm.nih.gov/genomes//GCF/000/001/405/ GCF_000001405.36_GRCh38.p10/GCF_000001405.36_GRCh38.p10_assembly_stats.txt.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getAssemblyStats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Genome Assembly Stats Retrieval — getAssemblyStats","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getAssemblyStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Genome Assembly Stats Retrieval — getAssemblyStats","text":"","code":"if (FALSE) { # download the genome assembly stats file of Saccharomyces cerevisiae # from NCBI RefSeq # and store the corresponding genome file in # '_ncbi_downloads/genomeassembly_stats' file_path <- getAssemblyStats( db = \"refseq\",                  organism = \"Saccharomyces cerevisiae\",                  path = file.path(\"_ncbi_downloads\",\"genomeassembly_stats\")) # import the raw file as it is downloaded Scerevisiae.stats <- read_assemblystats(file_path, type = \"raw\")  # download the genome assembly stats file of Saccharomyces cerevisiae # from NCBI RefSeq # and import overall statistics of the genome assembly Scerevisiae.stats.import <- getAssemblyStats( db = \"refseq\",                  organism = \"Saccharomyces cerevisiae\",                  type = \"import\",                  path = file.path(\"_ncbi_downloads\",\"genomeassembly_stats\")) }"},{"path":"https://docs.ropensci.org/biomartr/reference/getAttributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve All Available Attributes for a Specific Dataset — getAttributes","title":"Retrieve All Available Attributes for a Specific Dataset — getAttributes","text":"function queries BioMart Interface returns table storing available attributes specific dataset.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getAttributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve All Available Attributes for a Specific Dataset — getAttributes","text":"","code":"getAttributes(mart, dataset, mute_citation = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/reference/getAttributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve All Available Attributes for a Specific Dataset — getAttributes","text":"mart character string specifying database (mart) datasets shall listed. dataset character string specifying dataset attributes shall listed. mute_citation logical value indicating whether citation message muted.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getAttributes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve All Available Attributes for a Specific Dataset — getAttributes","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getAttributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve All Available Attributes for a Specific Dataset — getAttributes","text":"","code":"if (FALSE) { # search for available datasets getMarts()  # choose database (mart): ENSEMBL_MART_ENSEMBL # and get a table of all available datasets from this BioMart database head(getDatasets(mart = \"ENSEMBL_MART_ENSEMBL\"), 10)  # choose dataset: \"hsapiens_gene_ensembl\" head(getAttributes(mart = \"ENSEMBL_MART_ENSEMBL\",                    dataset = \"hsapiens_gene_ensembl\") , 5) }"},{"path":"https://docs.ropensci.org/biomartr/reference/getBio.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper to all bio getters, selected with 'type' argument — getBio","title":"A wrapper to all bio getters, selected with 'type' argument — getBio","text":"wrapper bio getters, selected 'type' argument","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getBio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper to all bio getters, selected with 'type' argument — getBio","text":"","code":"getBio(   db = \"refseq\",   organism,   type,   reference = FALSE,   release = NULL,   gunzip = FALSE,   update = FALSE,   skip_bacteria = TRUE,   path = paste0(\"set_\", toupper(type)),   remove_annotation_outliers = FALSE,   analyse_genome = FALSE,   assembly_type = \"toplevel\",   format = \"gff3\",   mute_citation = FALSE )"},{"path":"https://docs.ropensci.org/biomartr/reference/getBio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper to all bio getters, selected with 'type' argument — getBio","text":"db character string specifying database genome shall retrieved: db = \"refseq\" db = \"genbank\" db = \"ensembl\" organism Organism selector id, three options characterize organism: scientific name: e.g. organism = \"Homo sapiens\" database specific accession identifier: e.g. organism = \"GCF_000001405.37\" (= NCBI RefSeq identifier Homo sapiens) taxonomic identifier NCBI Taxonomy: e.g. organism = \"9606\" (= taxid Homo sapiens) type biological sequence type. (alternatives : genome, gff, cds, rna, proteome, assembly_stats, repeat_masker, collection (others)) reference logical value indicating whether genome shall downloaded marked database either reference genome representative genome. release numeric, database release version ENSEMBL (db = \"ensembl\"). Default release = NULL meaning recent database version used. release = 75 human give stable GRCh37 release ensembl. Value must > 46, since ensembl structure data standard format . gunzip logical, indicating whether files unzipped. update logical, default FALSE. Updated backend cached files needed. Usually keep false, make ut run much faster. set TRUE, believe cache outdated (Species exist newest release etc) skip_bacteria Due enormous dataset size (> 700MB July 2023), bacterial summary file loaded default anymore. users wish gain insights bacterial kingdom needs actively specify skip_bacteria = FALSE. skip_bacteria = FALSE set bacterial summary file downloaded. path character, default location paste0(\"set_\", toupper(type)) remove_annotation_outliers shall outlier lines removed input annotation_file? yes, initial annotation_file overwritten removed outlier lines stored tempdir exploration. analyse_genome logical, default FALSE. TRUE, get general genome statistics like gc content etc. details, see ?summary_genome assembly_type character, default c(\"primary_assembly\", \"toplevel\"). Used ensembl , specifies genome assembly type. Searches primary toplevel, found, uses first order (primary prioritized default). Primary assembly usually used exists. \"primary assembly\" contains top-level sequence regions, excluding alternative haplotypes patches. primary assembly file present species (defined standard model organisms), indicates haplotype/patch regions, cases, 'toplevel file used. details see: ensembl tutorial format \"gff3\", alternative \"gtf\" ensembl. mute_citation logical, default FALSE, indicating whether citation message muted.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getBio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper to all bio getters, selected with 'type' argument — getBio","text":"File path downloaded genome.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getBio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A wrapper to all bio getters, selected with 'type' argument — getBio","text":"Internally function loads overview.txt file NCBI: refseq: ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/ genbank: ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/ creates directory relative file type, get fasta genomes _ncbi_downloads/genomes'. case corresponding fasta file already exists within '_ncbi_downloads/genomes' folder accessible within workspace, download process performed. file types rule applies.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getBio.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A wrapper to all bio getters, selected with 'type' argument — getBio","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getBioSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic Bio data set extractor — getBioSet","title":"Generic Bio data set extractor — getBioSet","text":"Usually want use one specific set extractors","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getBioSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic Bio data set extractor — getBioSet","text":"","code":"getBioSet(   db = \"refseq\",   organisms,   set_type,   reference = FALSE,   release = NULL,   gunzip = TRUE,   update = FALSE,   skip_bacteria = TRUE,   path = paste0(\"set_\", toupper(set_type)),   remove_annotation_outliers = FALSE,   assembly_type = \"toplevel\",   format = \"gff3\",   mute_citation = FALSE )"},{"path":"https://docs.ropensci.org/biomartr/reference/getBioSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic Bio data set extractor — getBioSet","text":"db character string specifying database genome shall retrieved: db = \"refseq\" db = \"genbank\" db = \"ensembl\" organisms character vector storing names organisms shall retrieved. three available options characterize organism: set_type biological sequence type shall retrieved. Available options set_type = \"genome\" set_type = \"proteome\" set_type = \"cds\" set_type = \"gff\" set_type = \"rna\" set_type = \"assembly_stats\" set_type = \"repeat_masker\" set_type = \"collection\" (others) reference logical value indicating whether genome shall downloaded marked database either reference genome representative genome. release numeric, database release version ENSEMBL (db = \"ensembl\"). Default release = NULL meaning recent database version used. release = 75 human give stable GRCh37 release ensembl. Value must > 46, since ensembl structure data standard format . gunzip logical, indicating whether files unzipped. update logical, default FALSE. Updated backend cached files needed. Usually keep false, make ut run much faster. set TRUE, believe cache outdated (Species exist newest release etc) skip_bacteria Due enormous dataset size (> 700MB July 2023), bacterial summary file loaded default anymore. users wish gain insights bacterial kingdom needs actively specify skip_bacteria = FALSE. skip_bacteria = FALSE set bacterial summary file downloaded. path character, default location paste0(\"set_\", toupper(set_type)) remove_annotation_outliers shall outlier lines removed input annotation_file? yes, initial annotation_file overwritten removed outlier lines stored tempdir exploration. assembly_type character, default c(\"primary_assembly\", \"toplevel\"). Used ensembl , specifies genome assembly type. Searches primary toplevel, found, uses first order (primary prioritized default). Primary assembly usually used exists. \"primary assembly\" contains top-level sequence regions, excluding alternative haplotypes patches. primary assembly file present species (defined standard model organisms), indicates haplotype/patch regions, cases, 'toplevel file used. details see: ensembl tutorial format \"gff3\", alternative \"gtf\" ensembl. mute_citation logical, default FALSE, indicating whether citation message muted.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getBioSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic Bio data set extractor — getBioSet","text":"File path downloaded genomes (names identifiers: 'new' (file downloaded now), 'old' files already exist)","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getBioSet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic Bio data set extractor — getBioSet","text":"Internally function loads overview.txt file NCBI: refseq: ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/ genbank: ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/ creates directory 'set_CDSs' store CDSs interest fasta files future processing. case corresponding fasta file already exists within 'set_CDSs' folder accessible within workspace, download process performed.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getBioSet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generic Bio data set extractor — getBioSet","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getBioSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generic Bio data set extractor — getBioSet","text":"","code":"if (FALSE) { getBioSet(\"refseq\", organisms = c(\"Arabidopsis thaliana\",                                   \"Arabidopsis lyrata\",                                   \"Capsella rubella\"),                                   set_type = \"cds\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/getCDS.html","id":null,"dir":"Reference","previous_headings":"","what":"Coding Sequence Retrieval — getCDS","title":"Coding Sequence Retrieval — getCDS","text":"Main retrieval function coding sequences (CDS) organism interest. specifying scientific name organism interest corresponding fasta-file storing CDS information organism interest can downloaded stored locally. CDS files can retrieved several databases.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getCDS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coding Sequence Retrieval — getCDS","text":"","code":"getCDS(   db = \"refseq\",   organism,   reference = FALSE,   skip_bacteria = TRUE,   release = NULL,   gunzip = FALSE,   path = file.path(\"_ncbi_downloads\", \"CDS\"),   mute_citation = FALSE )"},{"path":"https://docs.ropensci.org/biomartr/reference/getCDS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coding Sequence Retrieval — getCDS","text":"db character string specifying database genome shall retrieved: db = \"refseq\" db = \"genbank\" db = \"ensembl\" organism Organism selector id, three options characterize organism: scientific name: e.g. organism = \"Homo sapiens\" database specific accession identifier: e.g. organism = \"GCF_000001405.37\" (= NCBI RefSeq identifier Homo sapiens) taxonomic identifier NCBI Taxonomy: e.g. organism = \"9606\" (= taxid Homo sapiens) reference logical value indicating whether genome shall downloaded marked database either reference genome representative genome. skip_bacteria Due enormous dataset size (> 700MB July 2023), bacterial summary file loaded default anymore. users wish gain insights bacterial kingdom needs actively specify skip_bacteria = FALSE. skip_bacteria = FALSE set bacterial summary file downloaded. release numeric, database release version ENSEMBL (db = \"ensembl\"). Default release = NULL meaning recent database version used. release = 75 human give stable GRCh37 release ensembl. Value must > 46, since ensembl structure data standard format . gunzip logical, indicating whether files unzipped. path character string specifying location (folder) corresponding CDS file shall stored. Default path = file.path(\"_ncbi_downloads\",\"CDS\"). mute_citation logical, default FALSE, indicating whether citation message muted.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getCDS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coding Sequence Retrieval — getCDS","text":"File path downloaded genome.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getCDS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coding Sequence Retrieval — getCDS","text":"Internally function loads overview.txt file NCBI: refseq: ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/ genbank: ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/ creates directory relative file type, get fasta genomes _ncbi_downloads/genomes'. case corresponding fasta file already exists within '_ncbi_downloads/genomes' folder accessible within workspace, download process performed. file types rule applies.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getCDS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coding Sequence Retrieval — getCDS","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getCDS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coding Sequence Retrieval — getCDS","text":"","code":"if (FALSE) { # download the genome of Arabidopsis thaliana from refseq # and store the corresponding genome CDS file in '_ncbi_downloads/CDS' file_path <- getCDS( db       = \"refseq\",              organism = \"Arabidopsis thaliana\",              path     = file.path(\"_ncbi_downloads\",\"CDS\"))  Ath_CDS <- read_cds(file_path, format = \"fasta\")  }"},{"path":"https://docs.ropensci.org/biomartr/reference/getCDSSet.html","id":null,"dir":"Reference","previous_headings":"","what":"CDS retrieval of multiple species — getCDSSet","title":"CDS retrieval of multiple species — getCDSSet","text":"Main CDS retrieval function set organism interest. specifying scientific names organisms interest corresponding fasta-files storing CDS organisms interest downloaded stored locally. CDS files can retrieved several databases.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getCDSSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CDS retrieval of multiple species — getCDSSet","text":"","code":"getCDSSet(   db = \"refseq\",   organisms,   reference = FALSE,   release = NULL,   gunzip = TRUE,   update = FALSE,   path = \"set_CDS\" )"},{"path":"https://docs.ropensci.org/biomartr/reference/getCDSSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CDS retrieval of multiple species — getCDSSet","text":"db character string specifying database genome shall retrieved: db = \"refseq\" db = \"genbank\" db = \"ensembl\" organisms character vector storing names organisms shall retrieved. three available options characterize organism: reference logical value indicating whether genome shall downloaded marked database either reference genome representative genome. release numeric, database release version ENSEMBL (db = \"ensembl\"). Default release = NULL meaning recent database version used. release = 75 human give stable GRCh37 release ensembl. Value must > 46, since ensembl structure data standard format . gunzip logical, indicating whether files unzipped. update logical, default FALSE. Updated backend cached files needed. Usually keep false, make ut run much faster. set TRUE, believe cache outdated (Species exist newest release etc) path character, default location paste0(\"set_\", toupper(set_type))","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getCDSSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CDS retrieval of multiple species — getCDSSet","text":"File path downloaded genomes (names identifiers: 'new' (file downloaded now), 'old' files already exist)","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getCDSSet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CDS retrieval of multiple species — getCDSSet","text":"Internally function loads overview.txt file NCBI: refseq: ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/ genbank: ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/ creates directory 'set_CDSs' store CDSs interest fasta files future processing. case corresponding fasta file already exists within 'set_CDSs' folder accessible within workspace, download process performed.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getCDSSet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CDS retrieval of multiple species — getCDSSet","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getCDSSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CDS retrieval of multiple species — getCDSSet","text":"","code":"if (FALSE) { getBioSet(\"refseq\", organisms = c(\"Arabidopsis thaliana\",                                   \"Arabidopsis lyrata\",                                   \"Capsella rubella\"),                                   set_type = \"cds\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/getCollection.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a Collection: Genome, Proteome, CDS, RNA, GFF, Repeat Masker, AssemblyStats — getCollection","title":"Retrieve a Collection: Genome, Proteome, CDS, RNA, GFF, Repeat Masker, AssemblyStats — getCollection","text":"Main collection retrieval function organism interest. specifying scientific name organism interest collection consisting genome file, proteome file, CDS file, RNA file, GFF file, Repeat Masker file, AssemblyStats file organism interest can downloaded stored locally. Collections can retrieved several databases.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getCollection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a Collection: Genome, Proteome, CDS, RNA, GFF, Repeat Masker, AssemblyStats — getCollection","text":"","code":"getCollection(   db = \"refseq\",   organism,   reference = TRUE,   skip_bacteria = TRUE,   release = NULL,   assembly_type = \"toplevel\",   analyse_genome = FALSE,   remove_annotation_outliers = FALSE,   gunzip = FALSE,   path = file.path(\"_db_downloads\", \"collections\"),   mute_citation = FALSE )"},{"path":"https://docs.ropensci.org/biomartr/reference/getCollection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a Collection: Genome, Proteome, CDS, RNA, GFF, Repeat Masker, AssemblyStats — getCollection","text":"db character string specifying database genome shall retrieved: db = \"refseq\" db = \"genbank\" db = \"ensembl\" organism Organism selector id, three options characterize organism: scientific name: e.g. organism = \"Homo sapiens\" database specific accession identifier: e.g. organism = \"GCF_000001405.37\" (= NCBI RefSeq identifier Homo sapiens) taxonomic identifier NCBI Taxonomy: e.g. organism = \"9606\" (= taxid Homo sapiens) reference logical value indicating whether genome shall downloaded marked database either reference genome representative genome. skip_bacteria Due enormous dataset size (> 700MB July 2023), bacterial summary file loaded default anymore. users wish gain insights bacterial kingdom needs actively specify skip_bacteria = FALSE. skip_bacteria = FALSE set bacterial summary file downloaded. release numeric, database release version ENSEMBL (db = \"ensembl\"). Default release = NULL meaning recent database version used. release = 75 human give stable GRCh37 release ensembl. Value must > 46, since ensembl structure data standard format . assembly_type character, default c(\"primary_assembly\", \"toplevel\"). Used ensembl , specifies genome assembly type. Searches primary toplevel, found, uses first order (primary prioritized default). Primary assembly usually used exists. \"primary assembly\" contains top-level sequence regions, excluding alternative haplotypes patches. primary assembly file present species (defined standard model organisms), indicates haplotype/patch regions, cases, 'toplevel file used. details see: ensembl tutorial analyse_genome logical, default FALSE. TRUE, get general genome statistics like gc content etc. details, see ?summary_genome remove_annotation_outliers shall outlier lines removed input annotation_file? yes, initial annotation_file overwritten removed outlier lines stored tempdir exploration. gunzip logical, indicating whether files unzipped. path character string specifying location (folder) corresponding collection shall stored. Default path = file.path(\"_db_downloads\",\"collections\"). mute_citation logical, default FALSE, indicating whether citation message muted.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getCollection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a Collection: Genome, Proteome, CDS, RNA, GFF, Repeat Masker, AssemblyStats — getCollection","text":"File path downloaded genome.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getCollection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve a Collection: Genome, Proteome, CDS, RNA, GFF, Repeat Masker, AssemblyStats — getCollection","text":"Internally function loads overview.txt file NCBI: refseq: ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/ genbank: ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/ creates directory relative file type, get fasta genomes _ncbi_downloads/genomes'. case corresponding fasta file already exists within '_ncbi_downloads/genomes' folder accessible within workspace, download process performed. file types rule applies.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getCollection.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve a Collection: Genome, Proteome, CDS, RNA, GFF, Repeat Masker, AssemblyStats — getCollection","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getCollection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a Collection: Genome, Proteome, CDS, RNA, GFF, Repeat Masker, AssemblyStats — getCollection","text":"","code":"if (FALSE) { # download the collection of Homo sapiens from refseq # and store the corresponding genome file in '_ncbi_downloads/collection'  Hsap_collection <- getCollection( db       = \"refseq\",              organism = \"Homo sapiens\",              path = file.path(\"_db_downloads\",\"collections\")) # download the collection of Homo sapiens from genbank # and store the corresponding genome file in '_ncbi_downloads/collection'  Hsap_collection <- getCollection( db       = \"genbank\",              organism = \"Homo sapiens\",              path = file.path(\"_db_downloads\",\"collections\")) # download the collection of Homo sapiens from ensembl # and store the corresponding genome file in '_ncbi_downloads/collection'  Hsap_collection <- getCollection( db       = \"ensembl\",              organism = \"Homo sapiens\",              path = file.path(\"_db_downloads\",\"collections\")) }"},{"path":"https://docs.ropensci.org/biomartr/reference/getCollectionSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a Collection: Genome, Proteome, CDS, RNA, GFF, Repeat Masker, AssemblyStats of multiple species — getCollectionSet","title":"Retrieve a Collection: Genome, Proteome, CDS, RNA, GFF, Repeat Masker, AssemblyStats of multiple species — getCollectionSet","text":"Main collection retrieval function organism interest. specifying scientific name organism interest collection consisting genome file, proteome file, CDS file, RNA file, GFF file, Repeat Masker file, AssemblyStats file organism interest can downloaded stored locally. Collections can retrieved several databases.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getCollectionSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a Collection: Genome, Proteome, CDS, RNA, GFF, Repeat Masker, AssemblyStats of multiple species — getCollectionSet","text":"","code":"getCollectionSet(   db = \"refseq\",   organisms,   reference = FALSE,   release = NULL,   skip_bacteria = TRUE,   gunzip = TRUE,   update = FALSE,   remove_annotation_outliers = TRUE,   path = \"set_collections\",   mute_citation = FALSE )"},{"path":"https://docs.ropensci.org/biomartr/reference/getCollectionSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a Collection: Genome, Proteome, CDS, RNA, GFF, Repeat Masker, AssemblyStats of multiple species — getCollectionSet","text":"db character string specifying database genome shall retrieved: db = \"refseq\" db = \"genbank\" db = \"ensembl\" organisms character vector storing names organisms shall retrieved. three available options characterize organism: reference logical value indicating whether genome shall downloaded marked database either reference genome representative genome. release numeric, database release version ENSEMBL (db = \"ensembl\"). Default release = NULL meaning recent database version used. release = 75 human give stable GRCh37 release ensembl. Value must > 46, since ensembl structure data standard format . skip_bacteria Due enormous dataset size (> 700MB July 2023), bacterial summary file loaded default anymore. users wish gain insights bacterial kingdom needs actively specify skip_bacteria = FALSE. skip_bacteria = FALSE set bacterial summary file downloaded. gunzip logical, indicating whether files unzipped. update logical, default FALSE. Updated backend cached files needed. Usually keep false, make ut run much faster. set TRUE, believe cache outdated (Species exist newest release etc) remove_annotation_outliers shall outlier lines removed input annotation_file? yes, initial annotation_file overwritten removed outlier lines stored tempdir exploration. path character string specifying location (folder) corresponding collection shall stored. Default path = file.path(\"_db_downloads\",\"collections\"). mute_citation logical, default FALSE, indicating whether citation message muted.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getCollectionSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a Collection: Genome, Proteome, CDS, RNA, GFF, Repeat Masker, AssemblyStats of multiple species — getCollectionSet","text":"File path downloaded genomes (names identifiers: 'new' (file downloaded now), 'old' files already exist)","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getCollectionSet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve a Collection: Genome, Proteome, CDS, RNA, GFF, Repeat Masker, AssemblyStats of multiple species — getCollectionSet","text":"Internally function loads overview.txt file NCBI: refseq: ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/ genbank: ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/ creates directory 'set_CDSs' store CDSs interest fasta files future processing. case corresponding fasta file already exists within 'set_CDSs' folder accessible within workspace, download process performed.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getCollectionSet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve a Collection: Genome, Proteome, CDS, RNA, GFF, Repeat Masker, AssemblyStats of multiple species — getCollectionSet","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getCollectionSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a Collection: Genome, Proteome, CDS, RNA, GFF, Repeat Masker, AssemblyStats of multiple species — getCollectionSet","text":"","code":"if (FALSE) { getBioSet(\"refseq\", organisms = c(\"Arabidopsis thaliana\",                                   \"Arabidopsis lyrata\",                                   \"Capsella rubella\"),                                   set_type = \"cds\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/getDatasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve All Available Datasets for a BioMart Database — getDatasets","title":"Retrieve All Available Datasets for a BioMart Database — getDatasets","text":"funcion queries BioMart API returns table storing available datasets selected BioMart databases.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getDatasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve All Available Datasets for a BioMart Database — getDatasets","text":"","code":"getDatasets(mart, mute_citation = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/reference/getDatasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve All Available Datasets for a BioMart Database — getDatasets","text":"mart character string specifying database (mart) datasets shall listed. mute_citation logical value indicating whether citation message muted.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getDatasets.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve All Available Datasets for a BioMart Database — getDatasets","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getDatasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve All Available Datasets for a BioMart Database — getDatasets","text":"","code":"if (FALSE) { # search for available datasets # getMarts() # choose database: \"ENSEMBL_MART_ENSEMBL\" head(getDatasets(\"ENSEMBL_MART_ENSEMBL\"), 10) }"},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBL.Seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for retrieving biological sequence files from ENSEMBL — getENSEMBL.Seq","title":"Helper function for retrieving biological sequence files from ENSEMBL — getENSEMBL.Seq","text":"function downloads gff files query organisms ENSEMBL.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBL.Seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for retrieving biological sequence files from ENSEMBL — getENSEMBL.Seq","text":"","code":"getENSEMBL.Seq(   organism,   type = \"dna\",   id.type = \"toplevel\",   release = NULL,   path )"},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBL.Seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for retrieving biological sequence files from ENSEMBL — getENSEMBL.Seq","text":"organism Organism selector id, three options characterize organism: scientific name: e.g. organism = \"Homo sapiens\" database specific accession identifier: e.g. organism = \"GCF_000001405.37\" (= NCBI RefSeq identifier Homo sapiens) taxonomic identifier NCBI Taxonomy: e.g. organism = \"9606\" (= taxid Homo sapiens) type character, biological sequence type (e.g. \"dna\", \"cds\") id.type character, default \"toplevel\". id type assembly, either \"toplevel\" \"primary_assembly\" genomes. Can strings, non genome objects. release numeric, database release version ENSEMBL (db = \"ensembl\"). Default release = NULL meaning recent database version used. release = 75 human give stable GRCh37 release ensembl. Value must > 46, since ensembl structure data standard format . path location file shall stored.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBL.Seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for retrieving biological sequence files from ENSEMBL — getENSEMBL.Seq","text":"either character path downloaded file, logical FALSE, specifying failure.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBL.Seq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Helper function for retrieving biological sequence files from ENSEMBL — getENSEMBL.Seq","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBL.gtf.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for retrieving gtf files from ENSEMBL — getENSEMBL.gtf","title":"Helper function for retrieving gtf files from ENSEMBL — getENSEMBL.gtf","text":"function downloads gff files query organisms ENSEMBL.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBL.gtf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for retrieving gtf files from ENSEMBL — getENSEMBL.gtf","text":"","code":"getENSEMBL.gtf(organism, type = \"dna\", path, release = NULL)"},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBL.gtf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for retrieving gtf files from ENSEMBL — getENSEMBL.gtf","text":"organism Organism selector id, three options characterize organism: scientific name: e.g. organism = \"Homo sapiens\" database specific accession identifier: e.g. organism = \"GCF_000001405.37\" (= NCBI RefSeq identifier Homo sapiens) taxonomic identifier NCBI Taxonomy: e.g. organism = \"9606\" (= taxid Homo sapiens) type character, biological sequence type (e.g. \"dna\", \"cds\") path location file shall stored. release numeric, database release version ENSEMBL (db = \"ensembl\"). Default release = NULL meaning recent database version used. release = 75 human give stable GRCh37 release ensembl. Value must > 46, since ensembl structure data standard format .","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBL.gtf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function for retrieving gtf files from ENSEMBL — getENSEMBL.gtf","text":"character filepath download file, returns FALSE failed.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBL.gtf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Helper function for retrieving gtf files from ENSEMBL — getENSEMBL.gtf","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBL.html","id":null,"dir":"Reference","previous_headings":"","what":"Download sequence or annotation from ENSEMBL — getENSEMBL","title":"Download sequence or annotation from ENSEMBL — getENSEMBL","text":"Backend function retrieving files sequence annotation files ENSEMBL ftp server","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download sequence or annotation from ENSEMBL — getENSEMBL","text":"","code":"getENSEMBL(   organism,   type = \"dna\",   id.type = \"toplevel\",   release = NULL,   path,   format )"},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download sequence or annotation from ENSEMBL — getENSEMBL","text":"organism Organism selector id, three options characterize organism: scientific name: e.g. organism = \"Homo sapiens\" database specific accession identifier: e.g. organism = \"GCF_000001405.37\" (= NCBI RefSeq identifier Homo sapiens) taxonomic identifier NCBI Taxonomy: e.g. organism = \"9606\" (= taxid Homo sapiens) type character, biological sequence type (e.g. \"dna\", \"cds\") id.type character, default \"toplevel\". id type assembly, either \"toplevel\" \"primary_assembly\" genomes. Can strings, non genome objects. release numeric, database release version ENSEMBL (db = \"ensembl\"). Default release = NULL meaning recent database version used. release = 75 human give stable GRCh37 release ensembl. Value must > 46, since ensembl structure data standard format . path location file shall stored. format \"gff3\", alternative \"gtf\" ensembl.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download sequence or annotation from ENSEMBL — getENSEMBL","text":"either character path downloaded file, logical FALSE, specifying failure.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBL.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download sequence or annotation from ENSEMBL — getENSEMBL","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBLGENOMESInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve ENSEMBLGENOMES info file — getENSEMBLGENOMESInfo","title":"Retrieve ENSEMBLGENOMES info file — getENSEMBLGENOMESInfo","text":"Retrieve species genome information http://rest.ensemblgenomes.org/info/species?content-type=application/json/.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBLGENOMESInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve ENSEMBLGENOMES info file — getENSEMBLGENOMESInfo","text":"","code":"getENSEMBLGENOMESInfo()"},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBLGENOMESInfo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve ENSEMBLGENOMES info file — getENSEMBLGENOMESInfo","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBLGENOMESInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve ENSEMBLGENOMES info file — getENSEMBLGENOMESInfo","text":"","code":"if (FALSE) { info.file <- getENSEMBLGENOMESInfo() info.file }"},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBLInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve ENSEMBL info file — getENSEMBLInfo","title":"Retrieve ENSEMBL info file — getENSEMBLInfo","text":"Retrieve species genome information http://rest.ensembl.org/info/species?content-type=application/json/.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBLInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve ENSEMBL info file — getENSEMBLInfo","text":"","code":"getENSEMBLInfo(update = FALSE, divisions = ensembl_divisions())"},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBLInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve ENSEMBL info file — getENSEMBLInfo","text":"update logical, default FALSE. TRUE, update cached list, FALSE use existing cache (exists). cache location see cachedir() divisions character, name divisions check, default ensembl_divisions(). NULL, also used.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBLInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve ENSEMBL info file — getENSEMBLInfo","text":"tibble table storing info available ENSEMBL divisions.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBLInfo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve ENSEMBL info file — getENSEMBLInfo","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getENSEMBLInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve ENSEMBL info file — getENSEMBLInfo","text":"","code":"if (FALSE) { # look at available divisions ensembl_divisions() # retrieve information for all ENSEMBL divisions at once test <- getENSEMBLInfo() test # retrieve information for a particular ENSEMBL division (e.g. EnsemblVertebrates) test_vertebrates <- get.ensembl.info(update = TRUE, division = \"EnsemblVertebrates\") test_vertebrates }"},{"path":"https://docs.ropensci.org/biomartr/reference/getFilters.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve All Available Filters for a Specific Dataset — getFilters","title":"Retrieve All Available Filters for a Specific Dataset — getFilters","text":"funcion queries BioMart API returns table storing available filters specific dataset.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getFilters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve All Available Filters for a Specific Dataset — getFilters","text":"","code":"getFilters(mart, dataset, mute_citation = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/reference/getFilters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve All Available Filters for a Specific Dataset — getFilters","text":"mart character string specifying database (mart) datasets shall listed. dataset character string specifying dataset filters shall listed. mute_citation logical value indicating whether citation message muted.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getFilters.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve All Available Filters for a Specific Dataset — getFilters","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getFilters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve All Available Filters for a Specific Dataset — getFilters","text":"","code":"if (FALSE) { # search for available datasets # getMarts() # choose database (mart): \"ENSEMBL_MART_ENSEMBL\" # head(getDatasets(mart = \"ENSEMBL_MART_ENSEMBL\"), 10) # choose dataset: \"hsapiens_gene_ensembl\" head(getFilters(mart = \"ENSEMBL_MART_ENSEMBL\",                 dataset = \"hsapiens_gene_ensembl\") , 5) }"},{"path":"https://docs.ropensci.org/biomartr/reference/getGENOMEREPORT.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve NCBI GENOME_REPORTS file — getGENOMEREPORT","title":"Retrieve NCBI GENOME_REPORTS file — getGENOMEREPORT","text":"Retrieves NCBI GENOME_REPORTS file ftp://ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/overview.txt.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGENOMEREPORT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve NCBI GENOME_REPORTS file — getGENOMEREPORT","text":"","code":"getGENOMEREPORT(   local_file = file.path(cachedir(), \"_ncbi_downloads\", \"overview.txt\") )"},{"path":"https://docs.ropensci.org/biomartr/reference/getGENOMEREPORT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve NCBI GENOME_REPORTS file — getGENOMEREPORT","text":"local_file character, file path, default: file.path(cachedir(), \"_ncbi_downloads\", \"overview.txt\")","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGENOMEREPORT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve NCBI GENOME_REPORTS file — getGENOMEREPORT","text":"tibble object report","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGENOMEREPORT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve NCBI GENOME_REPORTS file — getGENOMEREPORT","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGENOMEREPORT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve NCBI GENOME_REPORTS file — getGENOMEREPORT","text":"","code":"if (FALSE) { report <- getGENOMEREPORT() report }"},{"path":"https://docs.ropensci.org/biomartr/reference/getGFF.html","id":null,"dir":"Reference","previous_headings":"","what":"Genome Annotation Retrieval (GFF3) — getGFF","title":"Genome Annotation Retrieval (GFF3) — getGFF","text":"Main retrieval function GFF files organism interest. specifying scientific name organism interest corresponding gff file storing annotation  organism interest can downloaded stored locally. GFF files can retrieved several databases.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGFF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genome Annotation Retrieval (GFF3) — getGFF","text":"","code":"getGFF(   db = \"refseq\",   organism,   reference = FALSE,   skip_bacteria = TRUE,   release = NULL,   gunzip = FALSE,   remove_annotation_outliers = FALSE,   path = file.path(\"_ncbi_downloads\", \"annotation\"),   mute_citation = FALSE,   format = \"gff3\" )"},{"path":"https://docs.ropensci.org/biomartr/reference/getGFF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Genome Annotation Retrieval (GFF3) — getGFF","text":"db character string specifying database genome shall retrieved: db = \"refseq\" db = \"genbank\" db = \"ensembl\" organism Organism selector id, three options characterize organism: scientific name: e.g. organism = \"Homo sapiens\" database specific accession identifier: e.g. organism = \"GCF_000001405.37\" (= NCBI RefSeq identifier Homo sapiens) taxonomic identifier NCBI Taxonomy: e.g. organism = \"9606\" (= taxid Homo sapiens) reference logical value indicating whether genome shall downloaded marked database either reference genome representative genome. skip_bacteria Due enormous dataset size (> 700MB July 2023), bacterial summary file loaded default anymore. users wish gain insights bacterial kingdom needs actively specify skip_bacteria = FALSE. skip_bacteria = FALSE set bacterial summary file downloaded. release numeric, database release version ENSEMBL (db = \"ensembl\"). Default release = NULL meaning recent database version used. release = 75 human give stable GRCh37 release ensembl. Value must > 46, since ensembl structure data standard format . gunzip logical, indicating whether files unzipped. remove_annotation_outliers shall outlier lines removed input annotation_file? yes, initial annotation_file overwritten removed outlier lines stored tempdir exploration. path character string specifying location (folder) corresponding annotation file shall stored. Default path = file.path(\"_ncbi_downloads\",\"annotation\"). mute_citation logical, default FALSE, indicating whether citation message muted. format \"gff3\", alternative \"gtf\" ensembl.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGFF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Genome Annotation Retrieval (GFF3) — getGFF","text":"File path downloaded genome.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGFF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Genome Annotation Retrieval (GFF3) — getGFF","text":"Internally function loads overview.txt file NCBI: refseq: ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/ genbank: ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/ creates directory relative file type, get fasta genomes _ncbi_downloads/genomes'. case corresponding fasta file already exists within '_ncbi_downloads/genomes' folder accessible within workspace, download process performed. file types rule applies.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getGFF.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Genome Annotation Retrieval (GFF3) — getGFF","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGFF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Genome Annotation Retrieval (GFF3) — getGFF","text":"","code":"if (FALSE) { # download the annotation of Arabidopsis thaliana from refseq # and store the corresponding genome file in '_ncbi_downloads/annotation' Athal_gff <- getGFF( db       = \"refseq\",                organism = \"Arabidopsis thaliana\",                path = file.path(\"_ncbi_downloads\",\"annotation\"),                remove_annotation_outliers = TRUE) Athal_gff_import <- read_gff(Athal_gff)   # download the genome of Arabidopsis thaliana from genbank # and store the corresponding genome file in '_ncbi_downloads/annotation' Athal_gff <- getGFF( db       = \"genbank\",                organism = \"Arabidopsis thaliana\",                path = file.path(\"_ncbi_downloads\",\"annotation\"),                remove_annotation_outliers = TRUE) Athal_gff_import <- read_gff(Athal_gff)  # download the genome of Homo sapiens from ensembl # and store the corresponding genome file in '_ncbi_downloads/annotation' Hsap_gff <- getGFF( db       = \"ensembl\",                organism = \"Homo sapiens\",                path = file.path(\"_ncbi_downloads\",\"annotation\"),                remove_annotation_outliers = TRUE) Hsap_gff_import <- read_gff(Hsap_gff)  }"},{"path":"https://docs.ropensci.org/biomartr/reference/getGFFSet.html","id":null,"dir":"Reference","previous_headings":"","what":"GFF retrieval of multiple species — getGFFSet","title":"GFF retrieval of multiple species — getGFFSet","text":"Main GFF retrieval function set organism interest. specifying scientific names organisms interest corresponding fasta-files storing GFF organisms interest downloaded stored locally. GFF files can retrieved several databases.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGFFSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GFF retrieval of multiple species — getGFFSet","text":"","code":"getGFFSet(   db = \"refseq\",   organisms,   reference = FALSE,   release = NULL,   skip_bacteria = TRUE,   gunzip = TRUE,   remove_annotation_outliers = FALSE,   update = FALSE,   format = \"gff3\",   path = \"set_GFF\",   mute_citation = FALSE )"},{"path":"https://docs.ropensci.org/biomartr/reference/getGFFSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GFF retrieval of multiple species — getGFFSet","text":"db character string specifying database genome shall retrieved: db = \"refseq\" db = \"genbank\" db = \"ensembl\" organisms character vector storing names organisms shall retrieved. three available options characterize organism: reference logical value indicating whether genome shall downloaded marked database either reference genome representative genome. release numeric, database release version ENSEMBL (db = \"ensembl\"). Default release = NULL meaning recent database version used. release = 75 human give stable GRCh37 release ensembl. Value must > 46, since ensembl structure data standard format . skip_bacteria Due enormous dataset size (> 700MB July 2023), bacterial summary file loaded default anymore. users wish gain insights bacterial kingdom needs actively specify skip_bacteria = FALSE. skip_bacteria = FALSE set bacterial summary file downloaded. gunzip logical, indicating whether files unzipped. remove_annotation_outliers shall outlier lines removed input annotation_file? yes, initial annotation_file overwritten removed outlier lines stored tempdir exploration. update logical, default FALSE. Updated backend cached files needed. Usually keep false, make ut run much faster. set TRUE, believe cache outdated (Species exist newest release etc) format \"gff3\", alternative \"gtf\" ensembl. path character, default location paste0(\"set_\", toupper(set_type)) mute_citation logical, default FALSE, indicating whether citation message muted.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGFFSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GFF retrieval of multiple species — getGFFSet","text":"File path downloaded genomes (names identifiers: 'new' (file downloaded now), 'old' files already exist)","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGFFSet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GFF retrieval of multiple species — getGFFSet","text":"Internally function loads overview.txt file NCBI: refseq: ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/ genbank: ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/ creates directory 'set_CDSs' store CDSs interest fasta files future processing. case corresponding fasta file already exists within 'set_CDSs' folder accessible within workspace, download process performed.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getGFFSet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"GFF retrieval of multiple species — getGFFSet","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGFFSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GFF retrieval of multiple species — getGFFSet","text":"","code":"if (FALSE) { getBioSet(\"refseq\", organisms = c(\"Arabidopsis thaliana\",                                   \"Arabidopsis lyrata\",                                   \"Capsella rubella\"),                                   set_type = \"cds\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/getGO.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene Ontology Query — getGO","title":"Gene Ontology Query — getGO","text":"function takes gene id character vector given  query organism returns corresponding GO terms additional GO  information.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene Ontology Query — getGO","text":"","code":"getGO(organism, genes, filters, ...)"},{"path":"https://docs.ropensci.org/biomartr/reference/getGO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene Ontology Query — getGO","text":"organism character string specifying scientific name  query organism. genes character vector storing gene ids organisms  interest queried Ensembl Biomart. filters character vector specifying filter (query key)  Ensembl Biomart query, e.g. filter = \"ensembl_gene_id\". ... additional parameters can passed  biomart function.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGO.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gene Ontology Query — getGO","text":"function takes scientific name query organism, set genes  GO terms additional information shall retrieved,  filter argument specifies attribute query genes.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getGO.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gene Ontology Query — getGO","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGO.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gene Ontology Query — getGO","text":"","code":"if (FALSE) {  GO_tbl <- getGO(organism = \"Arabidopsis thaliana\",                  genes    = c(\"AT1G06090\", \"AT1G06100\"),                 filters  = \"ensembl_gene_id\")  # look at the result head(GO_tbl) }"},{"path":"https://docs.ropensci.org/biomartr/reference/getGTF.html","id":null,"dir":"Reference","previous_headings":"","what":"Genome Annotation Retrieval (GTF) — getGTF","title":"Genome Annotation Retrieval (GTF) — getGTF","text":"Main retrieval function GTF files organism interest. specifying scientific name organism interest corresponding GTF file storing annotation  organism interest can downloaded stored locally. GTF files can retrieved several databases.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGTF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genome Annotation Retrieval (GTF) — getGTF","text":"","code":"getGTF(   db = \"ensembl\",   organism,   remove_annotation_outliers = FALSE,   path = file.path(\"ensembl\", \"annotation\"),   release = NULL,   mute_citation = FALSE )"},{"path":"https://docs.ropensci.org/biomartr/reference/getGTF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Genome Annotation Retrieval (GTF) — getGTF","text":"db character string specifying database genome shall retrieved: db = \"refseq\" db = \"genbank\" db = \"ensembl\" organism Organism selector id, three options characterize organism: scientific name: e.g. organism = \"Homo sapiens\" database specific accession identifier: e.g. organism = \"GCF_000001405.37\" (= NCBI RefSeq identifier Homo sapiens) taxonomic identifier NCBI Taxonomy: e.g. organism = \"9606\" (= taxid Homo sapiens) remove_annotation_outliers shall outlier lines removed input annotation_file? yes, initial annotation_file overwritten removed outlier lines stored tempdir exploration. path character string specifying location (folder) corresponding annotation file shall stored. Default path = file.path(\"_ncbi_downloads\",\"annotation\"). release numeric, database release version ENSEMBL (db = \"ensembl\"). Default release = NULL meaning recent database version used. release = 75 human give stable GRCh37 release ensembl. Value must > 46, since ensembl structure data standard format . mute_citation logical, default FALSE, indicating whether citation message muted.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGTF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Genome Annotation Retrieval (GTF) — getGTF","text":"File path downloaded genome.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGTF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Genome Annotation Retrieval (GTF) — getGTF","text":"Internally function loads overview.txt file NCBI: refseq: ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/ genbank: ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/ creates directory relative file type, get fasta genomes _ncbi_downloads/genomes'. case corresponding fasta file already exists within '_ncbi_downloads/genomes' folder accessible within workspace, download process performed. file types rule applies.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getGTF.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Genome Annotation Retrieval (GTF) — getGTF","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGTF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Genome Annotation Retrieval (GTF) — getGTF","text":"","code":"if (FALSE) { # download the annotation of Homo sapiens from ensembl # and store the corresponding genome file in 'ensembl/annotation' getGTF(db            = \"ensembl\",        organism      = \"Homo sapiens\",        path          = file.path(\"ensembl\",\"annotation\"))  getGTF(db            = \"ensembl\",        organism      = \"Homo sapiens\",        path          = file.path(\"ensembl\",\"annotation\"),        assembly_type = \"primary_assembly\")  }"},{"path":"https://docs.ropensci.org/biomartr/reference/getGenome.html","id":null,"dir":"Reference","previous_headings":"","what":"Genome Retrieval — getGenome","title":"Genome Retrieval — getGenome","text":"Main genome retrieval function organism interest. specifying scientific name organism interest corresponding fasta-file storing genome organism interest can downloaded stored locally. Genome files can retrieved several databases. addition, genome summary statistics retrieved species stored locally provide users insights regarding genome assembly quality (see summary_genome details). useful comparing genomes large difference genome assembly qualities.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGenome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genome Retrieval — getGenome","text":"","code":"getGenome(   db = \"refseq\",   organism,   reference = FALSE,   skip_bacteria = TRUE,   release = NULL,   gunzip = FALSE,   path = file.path(\"_ncbi_downloads\", \"genomes\"),   assembly_type = \"toplevel\",   mute_citation = FALSE,   analyse_genome = FALSE )"},{"path":"https://docs.ropensci.org/biomartr/reference/getGenome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Genome Retrieval — getGenome","text":"db character string specifying database genome shall retrieved: db = \"refseq\" db = \"genbank\" db = \"ensembl\" organism Organism selector id, three options characterize organism: scientific name: e.g. organism = \"Homo sapiens\" database specific accession identifier: e.g. organism = \"GCF_000001405.37\" (= NCBI RefSeq identifier Homo sapiens) taxonomic identifier NCBI Taxonomy: e.g. organism = \"9606\" (= taxid Homo sapiens) reference logical value indicating whether genome shall downloaded marked database either reference genome representative genome. skip_bacteria Due enormous dataset size (> 700MB July 2023), bacterial summary file loaded default anymore. users wish gain insights bacterial kingdom needs actively specify skip_bacteria = FALSE. skip_bacteria = FALSE set bacterial summary file downloaded. release numeric, database release version ENSEMBL (db = \"ensembl\"). Default release = NULL meaning recent database version used. release = 75 human give stable GRCh37 release ensembl. Value must > 46, since ensembl structure data standard format . gunzip logical, indicating whether files unzipped. path character, default location paste0(\"set_\", toupper(type)) assembly_type character, default c(\"primary_assembly\", \"toplevel\"). Used ensembl , specifies genome assembly type. Searches primary toplevel, found, uses first order (primary prioritized default). Primary assembly usually used exists. \"primary assembly\" contains top-level sequence regions, excluding alternative haplotypes patches. primary assembly file present species (defined standard model organisms), indicates haplotype/patch regions, cases, 'toplevel file used. details see: ensembl tutorial mute_citation logical, default FALSE, indicating whether citation message muted. analyse_genome logical, default FALSE. TRUE, get general genome statistics like gc content etc. details, see ?summary_genome","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGenome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Genome Retrieval — getGenome","text":"File path downloaded genome.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGenome.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Genome Retrieval — getGenome","text":"Internally function loads overview.txt file NCBI: refseq: ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/ genbank: ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/ creates directory relative file type, get fasta genomes _ncbi_downloads/genomes'. case corresponding fasta file already exists within '_ncbi_downloads/genomes' folder accessible within workspace, download process performed. file types rule applies.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getGenome.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Genome Retrieval — getGenome","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGenomeSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Genome Retrieval of multiple species — getGenomeSet","title":"Genome Retrieval of multiple species — getGenomeSet","text":"Main genome retrieval function set organism interest. specifying scientific names organisms interest corresponding fasta-files storing genome organisms interest downloaded stored locally. Genome files can retrieved several databases.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGenomeSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genome Retrieval of multiple species — getGenomeSet","text":"","code":"getGenomeSet(   db = \"refseq\",   organisms,   reference = FALSE,   release = NULL,   skip_bacteria = TRUE,   gunzip = TRUE,   update = FALSE,   path = \"set_genomes\",   assembly_type = \"toplevel\",   mute_citation = FALSE )"},{"path":"https://docs.ropensci.org/biomartr/reference/getGenomeSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Genome Retrieval of multiple species — getGenomeSet","text":"db character string specifying database genome shall retrieved: db = \"refseq\" db = \"genbank\" db = \"ensembl\" organisms character vector storing names organisms shall retrieved. three available options characterize organism: reference logical value indicating whether genome shall downloaded marked database either reference genome representative genome. release numeric, database release version ENSEMBL (db = \"ensembl\"). Default release = NULL meaning recent database version used. release = 75 human give stable GRCh37 release ensembl. Value must > 46, since ensembl structure data standard format . skip_bacteria Due enormous dataset size (> 700MB July 2023), bacterial summary file loaded default anymore. users wish gain insights bacterial kingdom needs actively specify skip_bacteria = FALSE. skip_bacteria = FALSE set bacterial summary file downloaded. gunzip logical, indicating whether files unzipped. update logical, default FALSE. Updated backend cached files needed. Usually keep false, make ut run much faster. set TRUE, believe cache outdated (Species exist newest release etc) path character string specifying location (folder) corresponding genomes shall stored. Default path = \"set_genomes\". assembly_type character, default c(\"primary_assembly\", \"toplevel\"). Used ensembl , specifies genome assembly type. Searches primary toplevel, found, uses first order (primary prioritized default). Primary assembly usually used exists. \"primary assembly\" contains top-level sequence regions, excluding alternative haplotypes patches. primary assembly file present species (defined standard model organisms), indicates haplotype/patch regions, cases, 'toplevel file used. details see: ensembl tutorial mute_citation logical, default FALSE, indicating whether citation message muted.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGenomeSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Genome Retrieval of multiple species — getGenomeSet","text":"File path downloaded genomes (names identifiers: 'new' (file downloaded now), 'old' files already exist)","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGenomeSet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Genome Retrieval of multiple species — getGenomeSet","text":"Internally function loads overview.txt file NCBI: refseq: ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/ genbank: ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/ creates directory 'set_CDSs' store CDSs interest fasta files future processing. case corresponding fasta file already exists within 'set_CDSs' folder accessible within workspace, download process performed.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getGenomeSet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Genome Retrieval of multiple species — getGenomeSet","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGenomeSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Genome Retrieval of multiple species — getGenomeSet","text":"","code":"if (FALSE) { getBioSet(\"refseq\", organisms = c(\"Arabidopsis thaliana\",                                   \"Arabidopsis lyrata\",                                   \"Capsella rubella\"),                                   set_type = \"cds\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/getGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve available groups for a kingdom of life (only available for NCBI RefSeq and NCBI Genbank) — getGroups","title":"Retrieve available groups for a kingdom of life (only available for NCBI RefSeq and NCBI Genbank) — getGroups","text":"short list available groups kingdom life.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve available groups for a kingdom of life (only available for NCBI RefSeq and NCBI Genbank) — getGroups","text":"","code":"getGroups(db = \"refseq\", kingdom)"},{"path":"https://docs.ropensci.org/biomartr/reference/getGroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve available groups for a kingdom of life (only available for NCBI RefSeq and NCBI Genbank) — getGroups","text":"db character string specifying database genome  shall retrieved: db = \"refseq\" db = \"genbank\" Default db = \"refseq\". kingdom character string specifying kingdom life  groups shall retrieved. See getKingdoms details.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getGroups.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve available groups for a kingdom of life (only available for NCBI RefSeq and NCBI Genbank) — getGroups","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getGroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve available groups for a kingdom of life (only available for NCBI RefSeq and NCBI Genbank) — getGroups","text":"","code":"# get possible kigdom names getKingdoms(db = \"refseq\") #> [1] \"archaea\"              \"bacteria\"             \"fungi\"                #> [4] \"invertebrate\"         \"plant\"                \"protozoa\"             #> [7] \"vertebrate_mammalian\" \"vertebrate_other\"     \"viral\"                if (FALSE) { # retrieve subgroups for vertebrate_mammalian available from refseq getGroups(db = \"refseq\", kingdom = \"vertebrate_mammalian\")  # get possible kigdom names getKingdoms(db = \"genbank\") # retrieve subgroups for vertebrate_mammalian available from genbank getGroups(db = \"genbank\", kingdom = \"vertebrate_mammalian\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/getKingdomAssemblySummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve and summarise the assembly_summary.txt files from\nNCBI for all kingdoms — getKingdomAssemblySummary","title":"Retrieve and summarise the assembly_summary.txt files from\nNCBI for all kingdoms — getKingdomAssemblySummary","text":"Retrieval function assembly_summary.txt file NCBI kingdoms. assembly_summary.txt files store available species NCBI.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getKingdomAssemblySummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve and summarise the assembly_summary.txt files from\nNCBI for all kingdoms — getKingdomAssemblySummary","text":"","code":"getKingdomAssemblySummary(   db,   skip_bacteria = TRUE,   file = assemblies_info_path(db) )"},{"path":"https://docs.ropensci.org/biomartr/reference/getKingdomAssemblySummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve and summarise the assembly_summary.txt files from\nNCBI for all kingdoms — getKingdomAssemblySummary","text":"db database name. E.g. refseq genbank. skip_bacteria Due enormous dataset size (> 700MB July 2023), bacterial summary file loaded default anymore. users wish gain insights bacterial kingdom needs actively specify skip_bacteria = FALSE. skip_bacteria = FALSE set bacterial summary file downloaded. file path, local path total summary file, default tmp folder.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getKingdomAssemblySummary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve and summarise the assembly_summary.txt files from\nNCBI for all kingdoms — getKingdomAssemblySummary","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getKingdomAssemblySummary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve and summarise the assembly_summary.txt files from\nNCBI for all kingdoms — getKingdomAssemblySummary","text":"","code":"if (FALSE) { # This example will run the default version of this function # whereby information for Bacteria are not downloaded test <- getKingdomAssemblySummary(db = \"genbank\", skip_bacteria = TRUE) test # Users can then retrieve information for Bacteria by skip_bacteria = FALSE test2 <- getKingdomAssemblySummary(db = \"genbank\", skip_bacteria = FALSE) test2 }"},{"path":"https://docs.ropensci.org/biomartr/reference/getKingdoms.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve available kingdoms of life — getKingdoms","title":"Retrieve available kingdoms of life — getKingdoms","text":"short list available kingdoms life","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getKingdoms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve available kingdoms of life — getKingdoms","text":"","code":"getKingdoms(db = \"refseq\")"},{"path":"https://docs.ropensci.org/biomartr/reference/getKingdoms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve available kingdoms of life — getKingdoms","text":"db character string specifying database genome shall retrieved: db = \"refseq\", db = \"genbank\", db = \"ensembl\", db = \"ensemblgenomes\". Default db = \"refseq\".","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getKingdoms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve available kingdoms of life — getKingdoms","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getKingdoms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve available kingdoms of life — getKingdoms","text":"","code":"# retrieve kingdoms available from refseq getKingdoms(db = \"refseq\") #> [1] \"archaea\"              \"bacteria\"             \"fungi\"                #> [4] \"invertebrate\"         \"plant\"                \"protozoa\"             #> [7] \"vertebrate_mammalian\" \"vertebrate_other\"     \"viral\"                 # retrieve kingdoms available from genbank getKingdoms(db = \"genbank\") #> [1] \"archaea\"              \"bacteria\"             \"fungi\"                #> [4] \"invertebrate\"         \"plant\"                \"protozoa\"             #> [7] \"vertebrate_mammalian\" \"vertebrate_other\""},{"path":"https://docs.ropensci.org/biomartr/reference/getMarts.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve information about available Ensembl Biomart databases — getMarts","title":"Retrieve information about available Ensembl Biomart databases — getMarts","text":"funcion queries Ensembl Biomart API returns table storing information available Ensembl Biomart databases.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getMarts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve information about available Ensembl Biomart databases — getMarts","text":"","code":"getMarts(update = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/reference/getMarts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve information about available Ensembl Biomart databases — getMarts","text":"update logical, default FALSE. FALSE, use cached file exists. Set TRUE force new update","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getMarts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve information about available Ensembl Biomart databases — getMarts","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getMarts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve information about available Ensembl Biomart databases — getMarts","text":"","code":"if (FALSE) { # get a table of all available databases from Ensembl Biomart getMarts()  }"},{"path":"https://docs.ropensci.org/biomartr/reference/getMetaGenomeAnnotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve annotation *.gff files for metagenomes from NCBI Genbank — getMetaGenomeAnnotations","title":"Retrieve annotation *.gff files for metagenomes from NCBI Genbank — getMetaGenomeAnnotations","text":"Retrieve available annotation *.gff files metagenomes  NCBI Genbank. NCBI Genbank allows users download entire metagenomes annotations several metagenome  projects. function downloads available metagenomes can  downloaded via getMetaGenomes.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getMetaGenomeAnnotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve annotation *.gff files for metagenomes from NCBI Genbank — getMetaGenomeAnnotations","text":"","code":"getMetaGenomeAnnotations(   name,   path = file.path(\"_ncbi_downloads\", \"metagenome\", \"annotations\") )"},{"path":"https://docs.ropensci.org/biomartr/reference/getMetaGenomeAnnotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve annotation *.gff files for metagenomes from NCBI Genbank — getMetaGenomeAnnotations","text":"name metagenome name retrieved listMetaGenomes. path character string specifying location (folder)  corresponding metagenome annotations shall stored.  Default path = file.path(\"_ncbi_downloads\",\"metagenome\",\"annotations\").","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getMetaGenomeAnnotations.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve annotation *.gff files for metagenomes from NCBI Genbank — getMetaGenomeAnnotations","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getMetaGenomeAnnotations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve annotation *.gff files for metagenomes from NCBI Genbank — getMetaGenomeAnnotations","text":"","code":"if (FALSE) { # Frist, retrieve a list of available metagenomes listMetaGenomes()  # Now, retrieve the 'human gut metagenome' getMetaGenomeAnnotations(name = \"human gut metagenome\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/getMetaGenomeSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the assembly_summary.txt file from NCBI genbank metagenomes — getMetaGenomeSummary","title":"Retrieve the assembly_summary.txt file from NCBI genbank metagenomes — getMetaGenomeSummary","text":"Retrieval function assembly_summary.txt file NCBI genbank metagenomes. files stores available metagenome projects NCBI Genbank.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getMetaGenomeSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the assembly_summary.txt file from NCBI genbank metagenomes — getMetaGenomeSummary","text":"","code":"getMetaGenomeSummary(   local_file = file.path(cachedir(), \"assembly_summary_metagenomes_genbank.txt\") )"},{"path":"https://docs.ropensci.org/biomartr/reference/getMetaGenomeSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the assembly_summary.txt file from NCBI genbank metagenomes — getMetaGenomeSummary","text":"local_file store backend file, default: file.path(cachedir(), \"assembly_summary_metagenomes_genbank.txt\")","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getMetaGenomeSummary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve the assembly_summary.txt file from NCBI genbank metagenomes — getMetaGenomeSummary","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getMetaGenomeSummary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the assembly_summary.txt file from NCBI genbank metagenomes — getMetaGenomeSummary","text":"","code":"if (FALSE) { meta.summary <- getMetaGenomeSummary() meta.summary }"},{"path":"https://docs.ropensci.org/biomartr/reference/getMetaGenomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve metagenomes from NCBI Genbank — getMetaGenomes","title":"Retrieve metagenomes from NCBI Genbank — getMetaGenomes","text":"Retrieve available metagenomes NCBI Genbank.  NCBI Genbank allows users download entire metagenomes several  metagenome projects. function downloads available metagenomes can  downloaded via getMetaGenomes.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getMetaGenomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve metagenomes from NCBI Genbank — getMetaGenomes","text":"","code":"getMetaGenomes(name, path = file.path(\"_ncbi_downloads\", \"metagenome\"))"},{"path":"https://docs.ropensci.org/biomartr/reference/getMetaGenomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve metagenomes from NCBI Genbank — getMetaGenomes","text":"name metagenome name retrieved listMetaGenomes. path character string specifying location (folder)  corresponding metagenome shall stored.  Default path = file.path(\"_ncbi_downloads\",\"metagenome\").","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getMetaGenomes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve metagenomes from NCBI Genbank — getMetaGenomes","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getMetaGenomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve metagenomes from NCBI Genbank — getMetaGenomes","text":"","code":"if (FALSE) { # Frist, retrieve a list of available metagenomes listMetaGenomes()  # Now, retrieve the 'human gut metagenome' getMetaGenomes(name = \"human gut metagenome\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/getProteome.html","id":null,"dir":"Reference","previous_headings":"","what":"Proteome Retrieval — getProteome","title":"Proteome Retrieval — getProteome","text":"Main proteome retrieval function organism interest. specifying scientific name organism interest corresponding fasta-file storing proteome organism interest can downloaded stored locally. Proteome files can retrieved several databases.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getProteome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proteome Retrieval — getProteome","text":"","code":"getProteome(   db = \"refseq\",   organism,   reference = TRUE,   skip_bacteria = TRUE,   release = NULL,   gunzip = FALSE,   update = TRUE,   path = file.path(\"_ncbi_downloads\", \"proteomes\"),   mute_citation = FALSE )"},{"path":"https://docs.ropensci.org/biomartr/reference/getProteome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proteome Retrieval — getProteome","text":"db character string specifying database genome shall retrieved: db = \"refseq\" db = \"genbank\" db = \"ensembl\" organism Organism selector id, three options characterize organism: scientific name: e.g. organism = \"Homo sapiens\" database specific accession identifier: e.g. organism = \"GCF_000001405.37\" (= NCBI RefSeq identifier Homo sapiens) taxonomic identifier NCBI Taxonomy: e.g. organism = \"9606\" (= taxid Homo sapiens) reference logical value indicating whether genome shall downloaded marked database either reference genome representative genome. skip_bacteria Due enormous dataset size (> 700MB July 2023), bacterial summary file loaded default anymore. users wish gain insights bacterial kingdom needs actively specify skip_bacteria = FALSE. skip_bacteria = FALSE set bacterial summary file downloaded. release numeric, database release version ENSEMBL (db = \"ensembl\"). Default release = NULL meaning recent database version used. release = 75 human give stable GRCh37 release ensembl. Value must > 46, since ensembl structure data standard format . gunzip logical, indicating whether files unzipped. update logical, default TRUE. (Uniprot now!) species info file exists already, re download, makes faster file can old, .e. longer complete . path character string specifying location (folder) corresponding proteome shall stored. Default path = file.path(\"_ncbi_downloads\",\"proteomes\"). mute_citation logical, default FALSE, indicating whether citation message muted.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getProteome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Proteome Retrieval — getProteome","text":"File path downloaded proteome.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getProteome.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Proteome Retrieval — getProteome","text":"Internally function loads overview.txt file NCBI: refseq: ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/ genbank: ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/ creates directory '_ncbi_downloads/proteomes' store proteome interest fasta file future processing.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getProteome.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Proteome Retrieval — getProteome","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getProteome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proteome Retrieval — getProteome","text":"","code":"if (FALSE) { # download the proteome of Arabidopsis thaliana from NCBI RefSeq # and store the corresponding proteome file in '_ncbi_downloads/refseq/proteomes' file_path <- getProteome( db       = \"refseq\",              organism = \"Arabidopsis thaliana\",              path     = file.path(\"_ncbi_downloads\",\"refseq\",\"proteomes\") ) # import proteome into R session Ath_proteome <- read_proteome(file_path, format = \"fasta\")  # download the proteome of Arabidopsis thaliana from NCBI Genbank # and store the corresponding proteome file in '_ncbi_downloads/genbank/proteomes' file_path <- getProteome( db       = \"genbank\",              organism = \"Arabidopsis thaliana\",              path     = file.path(\"_ncbi_downloads\",\"genbank\",\"proteomes\") ) # import proteome into R session Ath_proteome <- read_proteome(file_path, format = \"fasta\")  # and store the corresponding proteome file in '_downloads/uniprot/proteomes' file_path <- getProteome( db       = \"uniprot\",              organism = \"Arabidopsis thaliana\",              path     = file.path(\"_downloads\",\"uniprot\",\"proteomes\") ) # import proteome into R session Ath_proteome <- read_proteome(file_path, format = \"fasta\")  # download the proteome of Arabidopsis thaliana from ENSEMBL # and store the corresponding proteome file in '_downloads/ensembl/proteomes' file_path <- getProteome( db       = \"ensembl\",              organism = \"Arabidopsis thaliana\",              path     = file.path(\"_downloads\",\"ensembl\",\"proteomes\") ) # import proteome into R session Ath_proteome <- read_proteome(file_path, format = \"fasta\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/getProteomeSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Proteome retrieval of multiple species — getProteomeSet","title":"Proteome retrieval of multiple species — getProteomeSet","text":"Main proteome retrieval function set organism interest. specifying scientific names organisms interest corresponding fasta-files storing proteome organisms interest downloaded stored locally. proteome files can retrieved several databases.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getProteomeSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proteome retrieval of multiple species — getProteomeSet","text":"","code":"getProteomeSet(   db = \"refseq\",   organisms,   reference = FALSE,   release = NULL,   skip_bacteria = TRUE,   gunzip = TRUE,   update = FALSE,   path = \"set_proteomes\",   mute_citation = FALSE )"},{"path":"https://docs.ropensci.org/biomartr/reference/getProteomeSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proteome retrieval of multiple species — getProteomeSet","text":"db character string specifying database genome shall retrieved: db = \"refseq\" db = \"genbank\" db = \"ensembl\" organisms character vector storing names organisms shall retrieved. three available options characterize organism: reference logical value indicating whether genome shall downloaded marked database either reference genome representative genome. release numeric, database release version ENSEMBL (db = \"ensembl\"). Default release = NULL meaning recent database version used. release = 75 human give stable GRCh37 release ensembl. Value must > 46, since ensembl structure data standard format . skip_bacteria Due enormous dataset size (> 700MB July 2023), bacterial summary file loaded default anymore. users wish gain insights bacterial kingdom needs actively specify skip_bacteria = FALSE. skip_bacteria = FALSE set bacterial summary file downloaded. gunzip logical, indicating whether files unzipped. update logical, default FALSE. Updated backend cached files needed. Usually keep false, make ut run much faster. set TRUE, believe cache outdated (Species exist newest release etc) path character string specifying location (folder) corresponding proteomes shall stored. Default path = \"set_proteomes\". mute_citation logical, default FALSE, indicating whether citation message muted.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getProteomeSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Proteome retrieval of multiple species — getProteomeSet","text":"File path downloaded genomes (names identifiers: 'new' (file downloaded now), 'old' files already exist)","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getProteomeSet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Proteome retrieval of multiple species — getProteomeSet","text":"Internally function loads overview.txt file NCBI: refseq: ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/ genbank: ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/ creates directory 'set_CDSs' store CDSs interest fasta files future processing. case corresponding fasta file already exists within 'set_CDSs' folder accessible within workspace, download process performed.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getProteomeSet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Proteome retrieval of multiple species — getProteomeSet","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getProteomeSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proteome retrieval of multiple species — getProteomeSet","text":"","code":"if (FALSE) { # download the proteomes of three different species at the same time #### Database: NCBI RefSeq file_paths <- getProteomeSet(db = \"refseq\", organisms = c(\"Arabidopsis thaliana\",                                       \"Arabidopsis lyrata\",                                        \"Capsella rubella\")) # look at file paths file_paths  #### Database: NCBI Genbank file_paths <- getProteomeSet(db = \"genbank\", organisms = c(\"Arabidopsis thaliana\",                                       \"Arabidopsis lyrata\",                                        \"Capsella rubella\")) # look at file paths file_paths  # download the proteomes of three different species at the same time #### Database: ENSEMBL file_paths <- getProteomeSet(db = \"ensembl\", organisms = c(\"Homo sapiens\",                                       \"Mus musculus\",                                        \"Caenorhabditis elegans\")) # look at file paths file_paths  # download the proteomes of three different species at the same time #### Database: UniProt file_paths <- getProteomeSet(db = \"uniprot\", organisms = c(\"Homo sapiens\",                                       \"Mus musculus\",                                        \"Caenorhabditis elegans\")) # look at file paths file_paths }"},{"path":"https://docs.ropensci.org/biomartr/reference/getRNA.html","id":null,"dir":"Reference","previous_headings":"","what":"RNA Sequence Retrieval — getRNA","title":"RNA Sequence Retrieval — getRNA","text":"Main retrieval function RNA sequences organism interest. specifying scientific name organism interest corresponding fasta-file storing RNA information organism interest can downloaded stored locally. RNA files can retrieved several databases.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getRNA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RNA Sequence Retrieval — getRNA","text":"","code":"getRNA(   db = \"refseq\",   organism,   reference = FALSE,   skip_bacteria = TRUE,   release = NULL,   assembly_type = \"toplevel\",   path = file.path(\"_ncbi_downloads\", \"RNA\"),   gunzip = FALSE,   mute_citation = FALSE )"},{"path":"https://docs.ropensci.org/biomartr/reference/getRNA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RNA Sequence Retrieval — getRNA","text":"db character string specifying database genome shall retrieved: db = \"refseq\" db = \"genbank\" db = \"ensembl\" organism Organism selector id, three options characterize organism: scientific name: e.g. organism = \"Homo sapiens\" database specific accession identifier: e.g. organism = \"GCF_000001405.37\" (= NCBI RefSeq identifier Homo sapiens) taxonomic identifier NCBI Taxonomy: e.g. organism = \"9606\" (= taxid Homo sapiens) reference logical value indicating whether genome shall downloaded marked database either reference genome representative genome. skip_bacteria Due enormous dataset size (> 700MB July 2023), bacterial summary file loaded default anymore. users wish gain insights bacterial kingdom needs actively specify skip_bacteria = FALSE. skip_bacteria = FALSE set bacterial summary file downloaded. release numeric, database release version ENSEMBL (db = \"ensembl\"). Default release = NULL meaning recent database version used. release = 75 human give stable GRCh37 release ensembl. Value must > 46, since ensembl structure data standard format . assembly_type character, default c(\"primary_assembly\", \"toplevel\"). Used ensembl , specifies genome assembly type. Searches primary toplevel, found, uses first order (primary prioritized default). Primary assembly usually used exists. \"primary assembly\" contains top-level sequence regions, excluding alternative haplotypes patches. primary assembly file present species (defined standard model organisms), indicates haplotype/patch regions, cases, 'toplevel file used. details see: ensembl tutorial path character string specifying location (folder) corresponding CDS file shall stored. Default path = file.path(\"_ncbi_downloads\",\"RNA\"). gunzip logical, indicating whether files unzipped. mute_citation logical, default FALSE, indicating whether citation message muted.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getRNA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RNA Sequence Retrieval — getRNA","text":"File path downloaded genome.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getRNA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"RNA Sequence Retrieval — getRNA","text":"Internally function loads overview.txt file NCBI: refseq: ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/ genbank: ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/ creates directory relative file type, get fasta genomes _ncbi_downloads/genomes'. case corresponding fasta file already exists within '_ncbi_downloads/genomes' folder accessible within workspace, download process performed. file types rule applies.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getRNA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"RNA Sequence Retrieval — getRNA","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getRNA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RNA Sequence Retrieval — getRNA","text":"","code":"if (FALSE) { # download the RNA of Arabidopsis thaliana from refseq # and store the corresponding RNA file in '_ncbi_downloads/RNA' file_path <- getRNA( db       = \"refseq\",              organism = \"Arabidopsis thaliana\",              path     = file.path(\"_ncbi_downloads\",\"RNA\"))  Ath_RNA <- read_rna(file_path, format = \"fasta\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/getRNASet.html","id":null,"dir":"Reference","previous_headings":"","what":"RNA Retrieval of multiple species — getRNASet","title":"RNA Retrieval of multiple species — getRNASet","text":"Main RNA retrieval function set organism interest. specifying scientific names organisms interest corresponding fasta-files storing RNA organisms interest downloaded stored locally. RNA files can retrieved several databases.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getRNASet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RNA Retrieval of multiple species — getRNASet","text":"","code":"getRNASet(   db = \"refseq\",   organisms,   reference = FALSE,   release = NULL,   skip_bacteria = TRUE,   gunzip = TRUE,   update = FALSE,   path = \"set_RNAs\",   mute_citation = FALSE )"},{"path":"https://docs.ropensci.org/biomartr/reference/getRNASet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RNA Retrieval of multiple species — getRNASet","text":"db character string specifying database genome shall retrieved: db = \"refseq\" db = \"genbank\" db = \"ensembl\" organisms character vector storing names organisms shall retrieved. three available options characterize organism: reference logical value indicating whether genome shall downloaded marked database either reference genome representative genome. release numeric, database release version ENSEMBL (db = \"ensembl\"). Default release = NULL meaning recent database version used. release = 75 human give stable GRCh37 release ensembl. Value must > 46, since ensembl structure data standard format . skip_bacteria Due enormous dataset size (> 700MB July 2023), bacterial summary file loaded default anymore. users wish gain insights bacterial kingdom needs actively specify skip_bacteria = FALSE. skip_bacteria = FALSE set bacterial summary file downloaded. gunzip logical, indicating whether files unzipped. update logical, default FALSE. Updated backend cached files needed. Usually keep false, make ut run much faster. set TRUE, believe cache outdated (Species exist newest release etc) path character string specifying location (folder) corresponding RNAs shall stored. Default path = \"set_RNAs\". mute_citation logical, default FALSE, indicating whether citation message muted.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getRNASet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RNA Retrieval of multiple species — getRNASet","text":"File path downloaded genomes (names identifiers: 'new' (file downloaded now), 'old' files already exist)","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getRNASet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"RNA Retrieval of multiple species — getRNASet","text":"Internally function loads overview.txt file NCBI: refseq: ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/ genbank: ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/ creates directory 'set_CDSs' store CDSs interest fasta files future processing. case corresponding fasta file already exists within 'set_CDSs' folder accessible within workspace, download process performed.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getRNASet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"RNA Retrieval of multiple species — getRNASet","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getRNASet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RNA Retrieval of multiple species — getRNASet","text":"","code":"if (FALSE) { getBioSet(\"refseq\", organisms = c(\"Arabidopsis thaliana\",                                   \"Arabidopsis lyrata\",                                   \"Capsella rubella\"),                                   set_type = \"cds\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/getReleases.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve available database releases or versions\nof ENSEMBL — getReleases","title":"Retrieve available database releases or versions\nof ENSEMBL — getReleases","text":"Retrieve available database releases versions ENSEMBL.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getReleases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve available database releases or versions\nof ENSEMBL — getReleases","text":"","code":"getReleases(db = \"ensembl\")"},{"path":"https://docs.ropensci.org/biomartr/reference/getReleases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve available database releases or versions\nof ENSEMBL — getReleases","text":"db character string specifying database available resease versions shall retrieved: db = \"ensembl\"","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getReleases.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve available database releases or versions\nof ENSEMBL — getReleases","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getReleases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve available database releases or versions\nof ENSEMBL — getReleases","text":"","code":"if (FALSE) { # retrieve available resease versions of ENSEMBL getReleases(\"ensembl\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/getRepeatMasker.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeat Masker Retrieval — getRepeatMasker","title":"Repeat Masker Retrieval — getRepeatMasker","text":"Main Repeat Masker output retrieval function organism interest. specifying scientific name organism interest corresponding Repeat Masker file storing genome organism interest can downloaded stored locally. Repeat Masker files can retrieved several databases.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getRepeatMasker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeat Masker Retrieval — getRepeatMasker","text":"","code":"getRepeatMasker(   db = \"refseq\",   organism,   reference = FALSE,   skip_bacteria = TRUE,   release = NULL,   gunzip = FALSE,   path = file.path(\"_ncbi_downloads\", \"repeatmasker\"),   mute_citation = FALSE )"},{"path":"https://docs.ropensci.org/biomartr/reference/getRepeatMasker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeat Masker Retrieval — getRepeatMasker","text":"db character string specifying database genome shall retrieved: db = \"refseq\" db = \"genbank\" organism character string specifying scientific name organism interest, e.g. organism = \"Homo sapiens\". reference logical value indicating whether genome shall downloaded marked database either reference genome representative genome. skip_bacteria Due enormous dataset size (> 700MB July 2023), bacterial summary file loaded default anymore. users wish gain insights bacterial kingdom needs actively specify skip_bacteria = FALSE. skip_bacteria = FALSE set bacterial summary file downloaded. release recent database version used. release = 75 human give stable GRCh37 release ensembl.  Value must > 46, since ensembl structure data standard format . gunzip logical, indicating whether files unzipped. path character string specifying location (folder) corresponding file shall stored. Default path = file.path(\"_ncbi_downloads\",\"repeatmasker\"). mute_citation logical value indicating whether citation message muted.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getRepeatMasker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeat Masker Retrieval — getRepeatMasker","text":"File path downloaded Repeat Masker output file.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getRepeatMasker.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repeat Masker Retrieval — getRepeatMasker","text":"Internally function loads overview.txt file NCBI: refseq: ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/ genbank: ftp://ftp.ncbi.nlm.nih.gov/genomes/genbank/ creates directory '_ncbi_downloads/repeatmasker' store files interest fasta file future processing. case corresponding fasta file already exists within '_ncbi_downloads/repeatmasker' folder accessible within workspace, download process performed.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getRepeatMasker.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeat Masker Retrieval — getRepeatMasker","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getRepeatMasker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeat Masker Retrieval — getRepeatMasker","text":"","code":"if (FALSE) {  # download the Repeat Masker output file of Homo sapiens from refseq # and store the corresponding genome file in '_ncbi_downloads/genomes' file_path <- getRepeatMasker( db       = \"refseq\",              organism = \"Homo sapiens\",              path = file.path(\"_ncbi_downloads\",\"repeatmasker\"))  Hsap_repeatmasker <- read_rm(file_path)  }"},{"path":"https://docs.ropensci.org/biomartr/reference/getSummaryFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to retrieve the assembly_summary.txt file from NCBI — getSummaryFile","title":"Helper function to retrieve the assembly_summary.txt file from NCBI — getSummaryFile","text":"Retrieval function assembly_summary.txt file NCBI.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getSummaryFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to retrieve the assembly_summary.txt file from NCBI — getSummaryFile","text":"","code":"getSummaryFile(db, kingdom, file = assemblies_info_path(db, kingdom))"},{"path":"https://docs.ropensci.org/biomartr/reference/getSummaryFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to retrieve the assembly_summary.txt file from NCBI — getSummaryFile","text":"db database name. E.g. refseq genbank. kingdom kingdom assembly_summary.txt file shall retrieved. See also getKingdoms. file path, local path total summary file, default tmp folder.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/getSummaryFile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Helper function to retrieve the assembly_summary.txt file from NCBI — getSummaryFile","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getSummaryFile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to retrieve the assembly_summary.txt file from NCBI — getSummaryFile","text":"","code":"if (FALSE) { test <- getSummaryFile(\"refseq\",\"plant\") test }"},{"path":"https://docs.ropensci.org/biomartr/reference/getUniProtInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Get uniprot info from organism — getUniProtInfo","title":"Get uniprot info from organism — getUniProtInfo","text":"Get uniprot info organism","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getUniProtInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get uniprot info from organism — getUniProtInfo","text":"","code":"getUniProtInfo(organism, path = cachedir(), update = TRUE)"},{"path":"https://docs.ropensci.org/biomartr/reference/getUniProtInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get uniprot info from organism — getUniProtInfo","text":"organism character, name organism path path info file shall stored locally. update shall internal cachedir file deleted info file freshly downloaded UniProt API?","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getUniProtSTATS.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve UniProt Database Information File (STATS) — getUniProtSTATS","title":"Retrieve UniProt Database Information File (STATS) — getUniProtSTATS","text":"UniProt stores STATS file summarise available information reference proteomes. Users can now download file process biomartr.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getUniProtSTATS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve UniProt Database Information File (STATS) — getUniProtSTATS","text":"","code":"getUniProtSTATS(update = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/reference/getUniProtSTATS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve UniProt Database Information File (STATS) — getUniProtSTATS","text":"update shall internal cachedir file deleted STATS file freshly downloaded UniProt FTP servers?","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getUniProtSTATS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve UniProt Database Information File (STATS) — getUniProtSTATS","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/getUniProtSTATS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve UniProt Database Information File (STATS) — getUniProtSTATS","text":"","code":"if (FALSE) { # retrieve STATS file from UniProt uniprot_info <- getUniProtSTATS(update = TRUE) # look at results uniprot_info }"},{"path":"https://docs.ropensci.org/biomartr/reference/is.genome.available.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Genome Availability — is.genome.available","title":"Check Genome Availability — is.genome.available","text":"function checks availability given genome NBCI servers specified scientific name.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/is.genome.available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Genome Availability — is.genome.available","text":"","code":"is.genome.available(   db = \"refseq\",   organism,   skip_bacteria = TRUE,   details = FALSE )"},{"path":"https://docs.ropensci.org/biomartr/reference/is.genome.available.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Genome Availability — is.genome.available","text":"db character string specifying database genome shall retrieved: db = \"refseq\" db = \"genbank\" db = \"ensembl\" db = \"uniprot\" organism three options characterize organism: scientific name: e.g. organism = \"Homo sapiens\" database specific accession identifier: e.g. organism = \"GCF_000001405.37\" (= NCBI RefSeq identifier Homo sapiens) taxonomic identifier NCBI Taxonomy: e.g. organism = \"9606\" (= taxid Homo sapiens) skip_bacteria Due enormous dataset size (> 700MB July 2023), bacterial summary file loaded default anymore. users wish gain insights bacterial kingdom needs actively specify skip_bacteria = FALSE. skip_bacteria = FALSE set bacterial summary file downloaded. details logical value specifying whether details genome size, kingdom, etc. shall printed console intead boolean value.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/is.genome.available.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Genome Availability — is.genome.available","text":"logical value specifing whether genome input organism available. case details = TRUE character string specifying genome details returned.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/is.genome.available.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Genome Availability — is.genome.available","text":"Internally function calls listGenomes function detect available genomes checks whether specified organism available download.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/is.genome.available.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check Genome Availability — is.genome.available","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/is.genome.available.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Genome Availability — is.genome.available","text":"","code":"if (FALSE) { # checking whether the Homo sapiens genome is stored on NCBI is.genome.available(organism = \"Homo sapiens\", db = \"refseq\")  # and printing details is.genome.available(organism = \"Homo sapiens\", db = \"refseq\", details = TRUE)  # checking whether the Homo sapiens genome is stored on ENSEMBL is.genome.available(organism = \"Homo sapiens\", db = \"ensembl\")  # and printing details is.genome.available(organism = \"Homo sapiens\",                     details = TRUE,                     db = \"ensembl\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/listDatabases.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a List of Available NCBI Databases for Download — listDatabases","title":"Retrieve a List of Available NCBI Databases for Download — listDatabases","text":"function allows retrieve list database names  versions can downloaded correspondning servers. Database retrieval crucial biological studies analyses. vast diversity databases can accessed remotely  can downloaded local machine. function provides interface  databases can downloaded NCBI servers lists available databases database version able select appropriate  database download download.database.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/listDatabases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a List of Available NCBI Databases for Download — listDatabases","text":"","code":"listDatabases(db = \"nr\", update = FALSE)  listNCBIDatabases(db = \"nr\", update = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/reference/listDatabases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a List of Available NCBI Databases for Download — listDatabases","text":"db character string specifying name database shall  searched . update logical value specifying whether local  listDatabases.txt file shall updated remote access NCBI.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/listDatabases.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve a List of Available NCBI Databases for Download — listDatabases","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/listDatabases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a List of Available NCBI Databases for Download — listDatabases","text":"","code":"if (FALSE) { # retrieve all versions of the NCBI 'nr' database that can be downloaded listNCBIDatabases(db = \"nr\")  # analogous: # listNCBIDatabases(db = \"cdd\") # listNCBIDatabases(db = \"nt\") # listNCBIDatabases(db = \"gss\") # listNCBIDatabases(db = \"refseq_protein\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/listGenomes.html","id":null,"dir":"Reference","previous_headings":"","what":"List All Available Genomes either by kingdom, group, or subgroup — listGenomes","title":"List All Available Genomes either by kingdom, group, or subgroup — listGenomes","text":"function retrieves names genomes available NCBI ftp:// server stores results file named 'overview.txt' inside directory _ncbi_downloads' built inside workspace.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/listGenomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List All Available Genomes either by kingdom, group, or subgroup — listGenomes","text":"","code":"listGenomes(   db = \"refseq\",   type = \"all\",   subset = NULL,   details = FALSE,   update = FALSE,   skip_bacteria = FALSE )"},{"path":"https://docs.ropensci.org/biomartr/reference/listGenomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List All Available Genomes either by kingdom, group, or subgroup — listGenomes","text":"db character string specifying database genome availability shall checked. Available options : db = \"refseq\" db = \"genbank\" db = \"ensembl\" type character string specifying potential filter available genomes. Available options : type = \"\", subset type = \"kingdom\", subset kingdom type = \"group\", subset group type = \"subgroup\", subset subgroup subset character string character vector specifying subset type. E.g. users interested retrieving Eukaryota species, can specify: type = \"kingdom\" subset = \"Eukaryota\". details boolean value specifying whether scientific names stored genomes shall returned (details = FALSE) information organism_name kingdoms group subgroup file_size_MB, etc. update logical, default FALSE. TRUE, update cached list, FALSE use existing cache (exists). cache location see cachedir() skip_bacteria Due enormous dataset size (> 700MB July 2023), bacterial summary file loaded default anymore. users wish gain insights bacterial kingdom needs actively specify skip_bacteria = FALSE. skip_bacteria = FALSE set bacterial summary file downloaded.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/listGenomes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List All Available Genomes either by kingdom, group, or subgroup — listGenomes","text":"Internally function loads overview.txt file NCBI creates directory '_ncbi_downloads' temdir() folder store overview.txt file future processing. case overview.txt file already exists within '_ncbi_downloads' folder accessible within workspace, download process performed .","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/listGenomes.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"List All Available Genomes either by kingdom, group, or subgroup — listGenomes","text":"Please note ftp:// connection relies NCBI ENSEMBL server accurately accessed via proxy.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/listGenomes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List All Available Genomes either by kingdom, group, or subgroup — listGenomes","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/listGenomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List All Available Genomes either by kingdom, group, or subgroup — listGenomes","text":"","code":"if (FALSE) { # print details for refseq listGenomes(db = \"refseq\") # print details for all plants in refseq listGenomes(db = \"refseq\", type = \"kingdom\") # print details for all plant groups in refseq listGenomes(db = \"refseq\", type = \"group\") # print details for all plant subgroups in refseq listGenomes(db = \"refseq\", type = \"subgroup\") # Ensembl listGenomes(db = \"ensembl\", type = \"kingdom\", subset = \"EnsemblVertebrates\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/listGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"List number of available genomes in each taxonomic group — listGroups","title":"List number of available genomes in each taxonomic group — listGroups","text":"Users can retrieve available number sequenced  genomes per group. available db = \"refseq\"  db = \"genbank\".","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/listGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List number of available genomes in each taxonomic group — listGroups","text":"","code":"listGroups(db = \"refseq\", kingdom = \"all\", details = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/reference/listGroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List number of available genomes in each taxonomic group — listGroups","text":"db character string specifying database genome  availability shall checked. Available options : db = \"refseq\" db = \"genbank\" kingdom kingdom specification retrieved  getKingdoms. details shall species corresponding specified  kingdom returned? Default details = FALSE.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/listGroups.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List number of available genomes in each taxonomic group — listGroups","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/listGroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List number of available genomes in each taxonomic group — listGroups","text":"","code":"if (FALSE) { # example for refseq listGroups(db = \"refseq\") # example for genbank listGroups(db = \"genbank\") ### in case groups should be specified by kingdom # first, retrieve available kingdom names listKingdoms() # now we choose kingdom \"bacteria\" listGroups(db = \"refseq\", kingdom = \"bacteria\") # or listGroups(db = \"genbank\", kingdom = \"bacteria\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/listKingdoms.html","id":null,"dir":"Reference","previous_headings":"","what":"List number of available genomes in each kingdom of life — listKingdoms","title":"List number of available genomes in each kingdom of life — listKingdoms","text":"Users can retrieve available number sequenced  genomes per kingdom.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/listKingdoms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List number of available genomes in each kingdom of life — listKingdoms","text":"","code":"listKingdoms(db = \"refseq\")"},{"path":"https://docs.ropensci.org/biomartr/reference/listKingdoms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List number of available genomes in each kingdom of life — listKingdoms","text":"db character string specifying database genome  availability shall checked,  e.g. db = \"refseq\", db = \"genbank\", db = \"ensembl\".","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/listKingdoms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List number of available genomes in each kingdom of life — listKingdoms","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/listKingdoms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List number of available genomes in each kingdom of life — listKingdoms","text":"","code":"if (FALSE) { # list number of available genomes in refseq for each kingdom of life listKingdoms(db = \"refseq\") # example for genbank listKingdoms(db = \"genbank\") # example for ensembl listKingdoms(db = \"ensembl\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/listMetaGenomes.html","id":null,"dir":"Reference","previous_headings":"","what":"List available metagenomes on NCBI Genbank — listMetaGenomes","title":"List available metagenomes on NCBI Genbank — listMetaGenomes","text":"List available metagenomes NCBI genbank. NCBI genbank  allows users download entire metagenomes several metagenome projects.  function lists available metagenomes can downloaded via getMetaGenomes.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/listMetaGenomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List available metagenomes on NCBI Genbank — listMetaGenomes","text":"","code":"listMetaGenomes(details = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/reference/listMetaGenomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List available metagenomes on NCBI Genbank — listMetaGenomes","text":"details boolean value specifying whether scientific names  stored metagenomes shall returned (details = FALSE)  information \"organism_name\",\"bioproject\",  etc (details = TRUE).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/listMetaGenomes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List available metagenomes on NCBI Genbank — listMetaGenomes","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/listMetaGenomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List available metagenomes on NCBI Genbank — listMetaGenomes","text":"","code":"if (FALSE) { # retrieve available metagenome projects at NCBI Genbank listMetaGenomes() # retrieve detailed information on available metagenome projects  # at NCBI Genbank listMetaGenomes(details = TRUE) }"},{"path":"https://docs.ropensci.org/biomartr/reference/meta.retrieval.all.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Meta-Genome Retrieval of all organisms in all kingdoms of life — meta.retrieval.all","title":"Perform Meta-Genome Retrieval of all organisms in all kingdoms of life — meta.retrieval.all","text":"Download genomes, proteomes, cds, gff, rna, assembly stats files individual species kingdoms life.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/meta.retrieval.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Meta-Genome Retrieval of all organisms in all kingdoms of life — meta.retrieval.all","text":"","code":"meta.retrieval.all(db = \"refseq\", type = \"genome\", reference = FALSE)"},{"path":"https://docs.ropensci.org/biomartr/reference/meta.retrieval.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Meta-Genome Retrieval of all organisms in all kingdoms of life — meta.retrieval.all","text":"db character string specifying database genome shall retrieved: db = \"refseq\" db = \"genbank\" db = \"emsembl\" db = \"ensemblgenomes\" type type sequences shall retrieved. Options : type = \"genome\" :  genome assembly retrieval; see also getGenome), type = \"proteome\" :  (proteome retrieval; see also getProteome), type = \"cds\" :  (coding sequence retrieval; see also getCDS), type = \"gff\" : (annotation file retrieval gff format; see also getGFF), type = \"gtf\" : (annotation file retrieval gtf format (ensembl ensemblgenomes); see also getGTF), type = \"rna\" :  (RNA file retrieval fasta format; see also getRNA), type = \"rm\" :  (Repeat Masker output file retrieval; see also  getRepeatMasker), type = \"assemblystats\" (genome assembly quality stats  file retrieval; see also getAssemblyStats). reference logical value indicating whether genome shall downloaded marked database either reference genome representative genome. Options : reference = FALSE (Default): organisms (reference, representative, non-representative genomes) downloaded. reference = TRUE: organisms downloaded must either reference representative genome. Thus, genomes usually non-reference genomes downloaded.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/meta.retrieval.all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Meta-Genome Retrieval of all organisms in all kingdoms of life — meta.retrieval.all","text":"character vector storing file paths retrieved files.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/meta.retrieval.all.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform Meta-Genome Retrieval of all organisms in all kingdoms of life — meta.retrieval.all","text":"function aims perform bulk retrieval genomes species kingdoms life.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/meta.retrieval.all.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Perform Meta-Genome Retrieval of all organisms in all kingdoms of life — meta.retrieval.all","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/meta.retrieval.all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Meta-Genome Retrieval of all organisms in all kingdoms of life — meta.retrieval.all","text":"","code":"if (FALSE) { # download all genomes from refseq meta.retrieval.all(db = \"refseq\", type = \"genome\") # download all vertebrate genomes from genbank meta.retrieval.all(db = \"genbank\", type = \"genome\") # download all vertebrate genomes from ensemblgenomes meta.retrieval.all(db = \"genbank\", type = \"ensemblgenomes\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/meta.retrieval.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Meta-Genome Retrieval — meta.retrieval","title":"Perform Meta-Genome Retrieval — meta.retrieval","text":"Download genomes, proteomes, cds, gff, rna, assembly stats files species within kingdom life.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/meta.retrieval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Meta-Genome Retrieval — meta.retrieval","text":"","code":"meta.retrieval(   db = \"refseq\",   kingdom,   group = NULL,   type = \"genome\",   restart_at_last = TRUE,   reference = FALSE,   combine = FALSE,   path = NULL )"},{"path":"https://docs.ropensci.org/biomartr/reference/meta.retrieval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Meta-Genome Retrieval — meta.retrieval","text":"db character string specifying database genome shall retrieved: db = \"refseq\" db = \"genbank\" db = \"emsembl\" kingdom character string specifying kingdom organisms interest, e.g. NCBI RefSeq: kingdom = \"archaea\" kingdom = \"bacteria\" kingdom = \"fungi\" kingdom = \"invertebrate\" kingdom = \"plant\" kingdom = \"protozoa\" kingdom = \"viral\" kingdom = \"vertebrate_mammalian\" kingdom = \"vertebrate_other\" NCBI Genbank: kingdom = \"archaea\" kingdom = \"bacteria\" kingdom = \"fungi\" kingdom = \"invertebrate\" kingdom = \"plant\" kingdom = \"protozoa\" kingdom = \"vertebrate_mammalian\" kingdom = \"vertebrate_other\" ENSEMBL: kingdom = \"EnsemblVertebrates\" kingdom = \"EnsemblPlants\" kingdom = \"EnsemblFungi\" kingdom = \"EnsemblMetazoa\" kingdom = \"EnsemblBacteria\" kingdom = \"EnsemblProtists\" Available kingdoms can retrieved getKingdoms. group species belonging subgroup downloaded. Groups can retrieved getGroups. type type sequences shall retrieved. Options : type = \"genome\" :  (genome assembly retrieval; see also getGenome), type = \"proteome\" :  (proteome retrieval; see also getProteome), type = \"cds\" :  (coding sequence retrieval; see also getCDS), type = \"gff\" : (annotation file retrieval gff format; see also getGFF), type = \"gtf\" : (annotation file retrieval gtf format (ensembl  ensemblgenomes); see also getGTF) type = \"rna\" :  (RNA file retrieval fasta format; see also getRNA), type = \"rm\" :  (Repeat Masker output file retrieval; see also  getRepeatMasker), type = \"assemblystats\" :  (genome assembly quality stats file retrieval;  see also getAssemblyStats). restart_at_last logical value indicating whether meta.retrieval pick last species re-running function. restart_at_last = TRUE (Default) meta.retrieval skip organisms already present folder start downloading remaining species. However, way meta.wretrieval able check whether already downloaded organism files corrupted checking md5 checksum. restart_at_last = FALSE meta.retrieval start beginning crawl already downloaded organism files check whether already downloaded organism files corrupted checking md5 checksum. checking existing files function start downloading remaining organisms. reference logical value indicating whether genome shall downloaded marked database either reference genome representative genome. Options : reference = FALSE (Default): organisms (reference, representative, non-representative genomes) downloaded. reference = TRUE: organisms downloaded must either reference representative genome. Thus, genomes usually non-reference genomes downloaded. combine just case type = \"assemblystats\" specified, shall assemby stats individual species imported combined data.frame? path path folder downloaded genomes shall stored. default kingdom name used name output folder.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/meta.retrieval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Meta-Genome Retrieval — meta.retrieval","text":"character vector storing file paths retrieved files.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/meta.retrieval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform Meta-Genome Retrieval — meta.retrieval","text":"function aims perform bulk retrieval genomes, proteomes, cds, etc. species belong kingdom life subgroup.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/meta.retrieval.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Perform Meta-Genome Retrieval — meta.retrieval","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/meta.retrieval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Meta-Genome Retrieval — meta.retrieval","text":"","code":"if (FALSE) { # get all available kingdoms for refseq getKingdoms(db = \"refseq\") # download all vertebrate genomes from refseq meta.retrieval(kingdom = \"vertebrate_mammalian\",                db = \"refseq\",                type = \"genome\")  # get all available kingdoms for genbank getKingdoms(db = \"genbank\") # download all vertebrate genomes from genbank meta.retrieval(kingdom = \"vertebrate_mammalian\",                db = \"genbank\",                type = \"genome\")   # In case users do not wish to retrieve genomes from an entire kingdom, # but rather from a subgoup (e.g. from species belonging to the # Gammaproteobacteria class, a subgroup of the bacteria kingdom), # they can use the following workflow\" # First, users can again consult the getKingdoms() function to retrieve # kingdom information. getKingdoms(db = \"refseq\")  # In this example, we will choose the bacteria kingdom. # Now, the getGroups() function allows users to obtain available # subgroups of the bacteria kingdom. getGroups(db = \"refseq\", kingdom = \"bacteria\")  # Now we choose the group Gammaproteobacteria and specify # the group argument in the meta.retrieval() function meta.retrieval(kingdom = \"bacteria\",    roup = \"Gammaproteobacteria\",    db = \"refseq\",    type = \"genome\") }"},{"path":"https://docs.ropensci.org/biomartr/reference/organismAttributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Ensembl Biomart attributes for a query organism — organismAttributes","title":"Retrieve Ensembl Biomart attributes for a query organism — organismAttributes","text":"addition organismBM function,  function returns available attributes can accessed  different marts datasets given query organism.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/organismAttributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Ensembl Biomart attributes for a query organism — organismAttributes","text":"","code":"organismAttributes(organism, update = FALSE, topic = NULL)"},{"path":"https://docs.ropensci.org/biomartr/reference/organismAttributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Ensembl Biomart attributes for a query organism — organismAttributes","text":"organism character string specifying scientific name  query organism. update logical value specifying whether local  listMart.txt, listDatasets.txt, listAttributes_organism.txt files shall  updated remote access BioMart. topic character string specifying topic (category) attributes,  e.g. topic = \"id\".","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/organismAttributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Ensembl Biomart attributes for a query organism — organismAttributes","text":"data.frame storing corresponding attribute names, description,  datasets, marts.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/organismAttributes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Ensembl Biomart attributes for a query organism — organismAttributes","text":"given query organism, function retrieves available attributes  can accessed different marts datasets. Sometimes attribute names correspond different datasets  marts causing problems using getMarts. approach  introduced function provides () organism centric way  accessing organism specific attributes. topic argument allows user search specific attribute  topics/categories faster filtering.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/organismAttributes.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Retrieve Ensembl Biomart attributes for a query organism — organismAttributes","text":"run function first time, data retrieval procedure  take time, due remote access BioMart. corresponding  result saved *.txt file within tempdir directory named \"_biomart/listMarts.txt\",\"_biomart/listDatasets.txt\",  \"_biomart/listAttributes_organism.txt\", allowing subsequent queries  perform much faster.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/organismAttributes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Retrieve Ensembl Biomart attributes for a query organism — organismAttributes","text":"http://biomart.org/ Mapping identifiers integration genomic datasets R/Bioconductor package biomaRt. Steffen Durinck, Paul T. Spellman, Ewan Birney Wolfgang Huber, Nature Protocols 4, 1184-1191 (2009). BioMart Bioconductor: powerful link biological databases microarray data analysis. Steffen Durinck, Yves Moreau, Arek Kasprzyk, Sean Davis, Bart De Moor, Alvis Brazma Wolfgang Huber, Bioinformatics 21, 3439-3440 (2005).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/organismAttributes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve Ensembl Biomart attributes for a query organism — organismAttributes","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/organismAttributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Ensembl Biomart attributes for a query organism — organismAttributes","text":"","code":"if (FALSE) {  # search for attribute topic id head(organismAttributes(\"Homo sapiens\", topic = \"id\"), 20) }"},{"path":"https://docs.ropensci.org/biomartr/reference/organismBM.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Ensembl Biomart marts and datasets for a query organism — organismBM","title":"Retrieve Ensembl Biomart marts and datasets for a query organism — organismBM","text":"function returns either available biomart connections available organisms biomart access possible, (specified) returns organism specific biomart connections.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/organismBM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Ensembl Biomart marts and datasets for a query organism — organismBM","text":"","code":"organismBM(organism = NULL, update = FALSE, mute_citation = TRUE)"},{"path":"https://docs.ropensci.org/biomartr/reference/organismBM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Ensembl Biomart marts and datasets for a query organism — organismBM","text":"organism character string specifying scientific name query organism. Default organism = NULL. case available biomart connections returned. update logical value specifying whether local listMart.txt listDatasets.txt files shall updated remote access  BioMart. mute_citation logical value indicating whether citation message muted.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/organismBM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Ensembl Biomart marts and datasets for a query organism — organismBM","text":"function collects available biomart connections returns table storing organism biomart connections available well corresponding mart database.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/organismBM.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Retrieve Ensembl Biomart marts and datasets for a query organism — organismBM","text":"run function first time, data retrieval procedure take time, due remote access BioMart. corresponding result saved *.txt file named \"_biomart/listDatasets.txt\" tempdir directory, allowing subsequent queries perform  much faster.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/organismBM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Retrieve Ensembl Biomart marts and datasets for a query organism — organismBM","text":"http://biomart.org/ Mapping identifiers integration genomic datasets R/Bioconductor package biomaRt. Steffen Durinck, Paul T. Spellman, Ewan Birney Wolfgang Huber, Nature Protocols 4, 1184-1191 (2009). BioMart Bioconductor: powerful link biological databases microarray data analysis. Steffen Durinck, Yves Moreau, Arek Kasprzyk, Sean Davis, Bart De Moor, Alvis Brazma Wolfgang Huber, Bioinformatics 21, 3439-3440 (2005).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/organismBM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve Ensembl Biomart marts and datasets for a query organism — organismBM","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/organismBM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Ensembl Biomart marts and datasets for a query organism — organismBM","text":"","code":"if (FALSE) { # returning all available biomart connections head(organismBM(), 20) # retrieving all available datasets and biomart connections for # a specific query organism (scientific name) organismBM(organism = \"Homo sapiens\") # you can also update the downloaded version using # the \"update = TRUE\" argument head(organismBM(update = TRUE), 20) }"},{"path":"https://docs.ropensci.org/biomartr/reference/organismFilters.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Ensembl Biomart filters for a query organism — organismFilters","title":"Retrieve Ensembl Biomart filters for a query organism — organismFilters","text":"addition organismBM organismAttributes functions, function returns available filters can accessed different marts datasets given query organism.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/organismFilters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Ensembl Biomart filters for a query organism — organismFilters","text":"","code":"organismFilters(organism, update = FALSE, topic = NULL)"},{"path":"https://docs.ropensci.org/biomartr/reference/organismFilters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Ensembl Biomart filters for a query organism — organismFilters","text":"organism character string specifying scientific name query organism. update logical value specifying whether local listMart.txt, listDatasets.txt, listFilters_organism.txt files shall updated remote access BioMart. topic character string specifying topic (category) filters, e.g. topic = \"id\".","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/organismFilters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Ensembl Biomart filters for a query organism — organismFilters","text":"data.frame storing corresponding filter names, description, datasets, marts.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/organismFilters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Ensembl Biomart filters for a query organism — organismFilters","text":"given query organism, function retrieves available filters can accessed different marts datasets. Sometimes filter names correspond different datasets marts causing problems using getMarts. approach introduced function provides () organism centric way accessing organism specific filters. topic argument allows user search specific filters topics/categories faster selection.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/organismFilters.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Retrieve Ensembl Biomart filters for a query organism — organismFilters","text":"run function first time, data retrieval procedure take time, due remote access BioMart. corresponding result saved *.txt file within tempdir directory  named \"_biomart/listMarts.txt\",\"_biomart/listDatasets.txt\", \"_biomart/listFilters_organism.txt\", allowing subsequent queries perform much faster.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/organismFilters.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Retrieve Ensembl Biomart filters for a query organism — organismFilters","text":"http://biomart.org/ Mapping identifiers integration genomic datasets R/Bioconductor package biomaRt. Steffen Durinck, Paul T. Spellman, Ewan Birney Wolfgang Huber, Nature Protocols 4, 1184-1191 (2009). BioMart Bioconductor: powerful link biological databases microarray data analysis. Steffen Durinck, Yves Moreau, Arek Kasprzyk, Sean Davis, Bart De Moor, Alvis Brazma Wolfgang Huber, Bioinformatics 21, 3439-3440 (2005).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/organismFilters.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve Ensembl Biomart filters for a query organism — organismFilters","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/organismFilters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Ensembl Biomart filters for a query organism — organismFilters","text":"","code":"if (FALSE) { # search for filter topic \"id\" head(organismFilters(\"Homo sapiens\", topic = \"id\"), 20) }"},{"path":"https://docs.ropensci.org/biomartr/reference/read_assemblystats.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Genome Assembly Stats File — read_assemblystats","title":"Import Genome Assembly Stats File — read_assemblystats","text":"function reads organism specific Genome Assembly Stats file retrieved getAssemblyStats.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_assemblystats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Genome Assembly Stats File — read_assemblystats","text":"","code":"read_assemblystats(file, type = \"raw\")"},{"path":"https://docs.ropensci.org/biomartr/reference/read_assemblystats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Genome Assembly Stats File — read_assemblystats","text":"file character string specifying path file storing Genome Assembly Stats file. type tibble object, either type = \"raw\" import entire genome assembly stats file type = \"stats\" import overall statistics including chromosomes, mitochondria plastids.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_assemblystats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import Genome Assembly Stats File — read_assemblystats","text":"function takes string specifying path Genome Assembly Stats file interest (e.g. path returned getAssemblyStats) imports .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/read_assemblystats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Import Genome Assembly Stats File — read_assemblystats","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_cds.html","id":null,"dir":"Reference","previous_headings":"","what":"Import CDS as Biostrings or data.table object — read_cds","title":"Import CDS as Biostrings or data.table object — read_cds","text":"function reads organism specific CDS stored defined file format.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_cds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import CDS as Biostrings or data.table object — read_cds","text":"","code":"read_cds(   file,   format = \"fasta\",   obj.type = \"Biostrings\",   delete_corrupt = FALSE,   ... )"},{"path":"https://docs.ropensci.org/biomartr/reference/read_cds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import CDS as Biostrings or data.table object — read_cds","text":"file character string specifying path file storing CDS. format character string specifying file format used store genome, e.g. format = \"fasta\" (default) format = \"gbk\". obj.type character string specifying object stype genomic sequence shall represented. Either obj.type = \"Biostrings\" (default) obj.type = \"data.table\". delete_corrupt logical value specifying whether potential CDS sequences divided 3 shall excluded dataset. Default delete_corrupt = FALSE. ... additional arguments used read.fasta.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_cds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import CDS as Biostrings or data.table object — read_cds","text":"data.table storing gene id first column corresponding sequence string second column.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_cds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import CDS as Biostrings or data.table object — read_cds","text":"read.cds function takes string specifying path cds file interest first argument. possible read different proteome file standards fasta genebank. CDS stored fasta files can downloaded http://www.ensembl.org/info/data/ftp/index.html.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/read_cds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Import CDS as Biostrings or data.table object — read_cds","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_genome.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Genome Assembly as Biostrings or data.table object — read_genome","title":"Import Genome Assembly as Biostrings or data.table object — read_genome","text":"function reads organism specific genome stored defined file format.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_genome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Genome Assembly as Biostrings or data.table object — read_genome","text":"","code":"read_genome(file, format = \"fasta\", obj.type = \"Biostrings\", ...)"},{"path":"https://docs.ropensci.org/biomartr/reference/read_genome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Genome Assembly as Biostrings or data.table object — read_genome","text":"file character string specifying path file storing genome. format character string specifying file format used store genome, e.g. format = \"fasta\" (default) format = \"gbk\". obj.type character string specifying object stype genomic sequence shall represented. Either obj.type = \"Biostrings\" (default) obj.type = \"data.table\". ... additional arguments used read.fasta function.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_genome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Genome Assembly as Biostrings or data.table object — read_genome","text":"Either Biostrings data.table object.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_genome.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import Genome Assembly as Biostrings or data.table object — read_genome","text":"function takes string specifying path genome file interest first argument (e.g. path returned getGenome).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/read_genome.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Import Genome Assembly as Biostrings or data.table object — read_genome","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_gff.html","id":null,"dir":"Reference","previous_headings":"","what":"Import GFF File — read_gff","title":"Import GFF File — read_gff","text":"function reads organism specific CDS stored defined file format.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_gff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import GFF File — read_gff","text":"","code":"read_gff(file)"},{"path":"https://docs.ropensci.org/biomartr/reference/read_gff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import GFF File — read_gff","text":"file character string specifying path file storing CDS.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_gff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import GFF File — read_gff","text":"Either Biostrings data.table object.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_gff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import GFF File — read_gff","text":"function takes string specifying path GFF file interest (e.g. path returned getGFF).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/read_gff.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Import GFF File — read_gff","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_proteome.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Proteome as Biostrings or data.table object — read_proteome","title":"Import Proteome as Biostrings or data.table object — read_proteome","text":"function reads organism specific proteome stored defined file format.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_proteome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Proteome as Biostrings or data.table object — read_proteome","text":"","code":"read_proteome(file, format = \"fasta\", obj.type = \"Biostrings\", ...)"},{"path":"https://docs.ropensci.org/biomartr/reference/read_proteome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Proteome as Biostrings or data.table object — read_proteome","text":"file character string specifying path file storing proteome. format character string specifying file format used store genome, e.g. format = \"fasta\" (default) format = \"gbk\". obj.type character string specifying object stype genomic sequence shall represented. Either obj.type = \"Biostrings\" (default) obj.type = \"data.table\". ... additional arguments used read.fasta.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_proteome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Proteome as Biostrings or data.table object — read_proteome","text":"Either Biostrings data.table object.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_proteome.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import Proteome as Biostrings or data.table object — read_proteome","text":"function takes string specifying path proteome file interest first argument. possible read different proteome file standards fasta genebank.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/read_proteome.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Import Proteome as Biostrings or data.table object — read_proteome","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_rm.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Repeat Masker output file — read_rm","title":"Import Repeat Masker output file — read_rm","text":"function reads organism specific  Repeat Masker output file.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_rm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Repeat Masker output file — read_rm","text":"","code":"read_rm(file)"},{"path":"https://docs.ropensci.org/biomartr/reference/read_rm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Repeat Masker output file — read_rm","text":"file character string specifying path file  storing Repeat Masker output (e.g. retrieved getRepeatMasker).","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_rm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import Repeat Masker output file — read_rm","text":"function takes string specifying path  Repeat Masker output file interest first argument.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/read_rm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Import Repeat Masker output file — read_rm","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_rna.html","id":null,"dir":"Reference","previous_headings":"","what":"Import RNA as Biostrings or data.table object — read_rna","title":"Import RNA as Biostrings or data.table object — read_rna","text":"function reads organism specific RNA stored defined file format.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_rna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import RNA as Biostrings or data.table object — read_rna","text":"","code":"read_rna(file, format = \"fasta\", obj.type = \"Biostrings\", ...)"},{"path":"https://docs.ropensci.org/biomartr/reference/read_rna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import RNA as Biostrings or data.table object — read_rna","text":"file character string specifying path file storing RNA. format character string specifying file format used store genome, e.g. format = \"fasta\" (default) format = \"gbk\". obj.type character string specifying object stype genomic sequence shall represented. Either obj.type = \"Biostrings\" (default) obj.type = \"data.table\". ... additional arguments used read.fasta.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_rna.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import RNA as Biostrings or data.table object — read_rna","text":"data.table storing gene id first column corresponding sequence string second column.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/read_rna.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import RNA as Biostrings or data.table object — read_rna","text":"function takes string specifying path RNA file interest first argument. possible read different proteome file standards fasta genebank.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/read_rna.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Import RNA as Biostrings or data.table object — read_rna","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/refseqOrganisms.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve All Organism Names Stored on refseq — refseqOrganisms","title":"Retrieve All Organism Names Stored on refseq — refseqOrganisms","text":"function extracts organism names (scientific names) genomes, proteomes, CDS files stored  NCBI refseq server.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/refseqOrganisms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve All Organism Names Stored on refseq — refseqOrganisms","text":"","code":"refseqOrganisms()"},{"path":"https://docs.ropensci.org/biomartr/reference/refseqOrganisms.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve All Organism Names Stored on refseq — refseqOrganisms","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/summary_cds.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve summary statistics for a coding sequence (CDS) file — summary_cds","title":"Retrieve summary statistics for a coding sequence (CDS) file — summary_cds","text":"summary statistics specific CDS features returned.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/summary_cds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve summary statistics for a coding sequence (CDS) file — summary_cds","text":"","code":"summary_cds(file, organism)"},{"path":"https://docs.ropensci.org/biomartr/reference/summary_cds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve summary statistics for a coding sequence (CDS) file — summary_cds","text":"file file path CDS file fasta format. organism character string specifying organism hand.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/summary_cds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve summary statistics for a coding sequence (CDS) file — summary_cds","text":"summary statistics include: total_seqs: nnn_abs: total number NNN's  (chromosomes/scaffolds/contigs) coding sequences combined nnn_perc: percentage (relative frequency) NNN's  (chromosomes/scaffolds/contigs) compared total number  nucleotides coding sequences","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/summary_cds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve summary statistics for a coding sequence (CDS) file — summary_cds","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/summary_genome.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve summary statistics for a genome assembly file — summary_genome","title":"Retrieve summary statistics for a genome assembly file — summary_genome","text":"summary statistics specific genome features generated. statistics useful assess genome quality retrieved genome assemblies performing comparative genomics tasks. way, users can assess whether patterns found based genome comparisons just technical artifact differences genome assembly quality.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/summary_genome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve summary statistics for a genome assembly file — summary_genome","text":"","code":"summary_genome(file, organism)"},{"path":"https://docs.ropensci.org/biomartr/reference/summary_genome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve summary statistics for a genome assembly file — summary_genome","text":"file file path genome assembly file fasta format. organism character string specifying organism hand.","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/summary_genome.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve summary statistics for a genome assembly file — summary_genome","text":"summary statistics include: genome_size_mbp: Genome size mega base pairs n50_mbp: N50 contig size genome assembly mega base pairs n_seqs: number chromosomes/scaffolds/contigs genome assembly file n_nnn: absolute number NNNs (chromosomes scaffolds contigs) genome assembly file rel_nnn: percentage (relative frequency) NNNs (chromosomes scaffolds contigs) compared total number nucleotides genome assembly file genome_entropy: Shannon Entropy genome assembly file (median entropy individual chromosome entropies) n_gc: total number GCs (chromosomes scaffolds contigs) genome assembly file rel_gc: (relative frequency) GCs (chromosomes scaffolds contigs) compared total number nucleotides genome assembly file","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/reference/summary_genome.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve summary statistics for a genome assembly file — summary_genome","text":"Hajk-Georg Drost","code":""},{"path":"https://docs.ropensci.org/biomartr/reference/summary_genome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve summary statistics for a genome assembly file — summary_genome","text":"","code":"if (FALSE) { # retrieve genome from NCBI RefSeq Sc <- biomartr::getGenome(db = \"refseq\", organism = \"Saccharomyces cerevisiae\") # compute genome assembly summary statistics Sc_genome_summary <- summary_genome(file = Sc, organism = \"Saccharomyces cerevisiae\") # look at results Sc_genome_summary }"},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"biomartr-107","dir":"Changelog","previous_headings":"","what":"biomartr 1.0.7","title":"biomartr 1.0.7","text":"CRAN release: 2023-12-02","code":""},{"path":[]},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"generalization-of-biomart-database-access-1-0-7","dir":"Changelog","previous_headings":"New features","what":"Generalization of Biomart database access #108","title":"biomartr 1.0.7","text":"Generalized biomart database interface (now uses https port 433) added cache biomart database overview added unit tests listGenomes() biomart()","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"bug-fixes-1-0-7","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"biomartr 1.0.7","text":"fixed listGenomes() filter error #107 Bacteria collection corner case bug fixed #109","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"biomartr-106","dir":"Changelog","previous_headings":"","what":"biomartr 1.0.6","title":"biomartr 1.0.6","text":"CRAN release: 2023-10-24","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"new-features-1-0-6","dir":"Changelog","previous_headings":"","what":"New features","title":"biomartr 1.0.6","text":"cool new generalization, check function biomartr:::supported_biotypes(db = \"refseq\"). function simplify lot stuff downstream. (#104) Tests now much quicker run, biomartr::.genome.available (used basically everywhere) now reads files data.table instead reader. (#104)","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"bug-fixes-1-0-6","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"biomartr 1.0.6","text":"Fixing bug .genome.available() skip_bacteria argument passed internally .genome.available.refseq.genbank() (#105)","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"biomartr-105","dir":"Changelog","previous_headings":"","what":"biomartr 1.0.5","title":"biomartr 1.0.5","text":"CRAN release: 2023-10-04","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"package-generalization-1-0-5","dir":"Changelog","previous_headings":"","what":"Package generalization","title":"biomartr 1.0.5","text":"5000 lines edited, removed (#100), generalize package make safe future development. progress still ongoing.","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"new-features-1-0-5","dir":"Changelog","previous_headings":"","what":"New features","title":"biomartr 1.0.5","text":"Ensembl genomes longer different database compared ensembl biomaRt, since split artifical. adviced use “ensembl” db now , “ensemblgenomes” still work. Annotation mean gff, gff gtf getter, format specification, now fixed generalized. Added new kingdom ensembl: protists supportwith correct collection getters retrieval UniProt database now updated new API/FTP path system. Now users can retrieve proteomes using functions getProteome(db = \"uniprot\", ...) getProteomeSet(db = \"uniprot\", ...) (see #82) new function getBioSet: Generic Bio data set extractor new function getBio: wrapper bio getters, selected ‘type’ argument new function getUniProtSTATS(): Retrieve UniProt Database Information File (STATS)","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"power-user-cache-1-0-5","dir":"Changelog","previous_headings":"","what":"Power user cache","title":"biomartr 1.0.5","text":"package now supports caching back end files used saved /tmp folder (.e. lost computer restart). make easy power users want higher speed. info, see function ?cachedir_set","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"bug-fixes-1-0-5","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"biomartr 1.0.5","text":"Fixed many wrong urls non working functions, tests added make sure work. Fixed fungi collection accessor ensembl","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"biomartr-104","dir":"Changelog","previous_headings":"","what":"biomartr 1.0.4","title":"biomartr 1.0.4","text":"CRAN release: 2023-06-20","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"new-features-1-0-4","dir":"Changelog","previous_headings":"","what":"New Features","title":"biomartr 1.0.4","text":"getSummaryFile() columns assembly_summary.txt now specified names correct data types (#92) get*() functions, getKingdomAssemblySummary(), .genome.available.refseq.genbank() receive new argument skip_bacteria set TRUE default. ensures huge dataset file bacteria downloaded default retrieving summary files GenBank. Users wish retrieved data particular bacteria can actively set skip_bacteria = TRUE get*() functions.","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"bug-fixes-1-0-4","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"biomartr 1.0.4","text":"whenever low-level function getKingdomAssemblySummary() called get*() functions, due error assembly_summary.txt file viruses total gene count stored character integer (case assembly_summary.txt files), error occurred stating dplyr::bind_rows() join column $X35 due differences data types. now resolved parsing correct data types readr. Many thanks … pointing . (#92) fixing md5checks get*() functions","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"biomartr-103","dir":"Changelog","previous_headings":"","what":"biomartr 1.0.3","title":"biomartr 1.0.3","text":"CRAN release: 2023-05-07 adding pull request #88 fixes issues http https curl requests (Many thanks @Roleren)","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"biomartr-102","dir":"Changelog","previous_headings":"","what":"biomartr 1.0.2","title":"biomartr 1.0.2","text":"CRAN release: 2022-02-23","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"new-functions-1-0-2","dir":"Changelog","previous_headings":"","what":"New Functions","title":"biomartr 1.0.2","text":"New function check_annotation_biomartr() helps check whether downloaded GFF GTF files corrupt. Find details new function getCollectionSet() allows users retrieve Collection: Genome, Proteome, CDS, RNA, GFF, Repeat Masker, AssemblyStats multiple species Example:","code":"# define scientific names of species for which # collections shall be retrieved organism_list <- c(\"Arabidopsis thaliana\",                     \"Arabidopsis lyrata\",                     \"Capsella rubella\") # download the collection of Arabidopsis thaliana from refseq # and store the corresponding genome file in '_ncbi_downloads/collection'  getCollectionSet( db       = \"refseq\",               organism = organism_list,               path = \"set_collections\")"},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"new-features-1-0-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"biomartr 1.0.2","text":"getGFF() function receives new argument remove_annotation_outliers enable users remove corrupt lines GFF file Example: getGFFSet() function receives new argument remove_annotation_outliers enable users remove corrupt lines GFF file getGTF() function receives new argument remove_annotation_outliers enable users remove corrupt lines GTF file adding new message system biomartr::organismBM(), biomartr::organismAttributes(), biomartr::organismFilters() large API queries don’t seem unresponsive getCollection() receives new arguments release, remove_annotation_outliers, gunzip now passed downstream retrieval functions getGTF(), getGenome() getGenomeSet() functions receives new argument assembly_type = \"toplevel\" enable users choose toplevel primary assembly using ensembl database. Setting assembly_type = \"primary_assembly\" save lot space hard drives people using large ensembl genomes. get*() functions release argument now check ENSEMBL release >45 (Many thanks @Roleren #31 #61) get*() functions, readr::write_tsv(path = ) exchanged readr::write_tsv(file = ), since readr package version > 1.4.0 depreciating path argument. tbl_df() deprecated dplyr 1.0.0. Please use tibble::as_tibble() instead. -> adjusted organismBM() accordingly custom_download(), getGENOMEREPORT(), download functions now specified withr::local_options(timeout = max(30000000, getOption(\"timeout\"))) extends default 60sec timeout 30000000sec","code":"Ath_path <- biomartr::getGFF(organism = \"Arabidopsis thaliana\", remove_annotation_outliers = TRUE)"},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"bug-fixes-1-0-2","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"biomartr 1.0.2","text":"Fixing bug genome availability check getCollection() performed NCBI RefSeq databases due constant used .genome.available() rather variable (Many thanks Takahiro Yamada catching bug) #53 fixing issue caused read_cds() function fail data.table mode (Many thanks Clement Kent) #57 fixing SSL bug found Ubuntu 20.04 systems #66 (Many thanks Håkon Tjeldnes) fixing global variable issue caused clean.retrieval() fail documentation file meta.retrieval() folder NCBI recently started adding NA values FTP file paths species summary files species without reference genomes. result meta.retrieval() stopped working, FTP paths found species. issue now fixed adding filter rule !.na(ftp_path) get*() functions (Many thanks making aware issue Ashok Kumar Sharma #34 Dominik Merges #72) Fixing issue custom_download() method argument causing issues downloading https directed ftp sites (Many thanks @cmatKhan) #76 Fixing issue trying combine multiple summary-stats files NA’s present list item passed along combination meta.retrieval() #73 (Many thanks Dominik Merges) Fixing bug download.database.() lack removing listed file *-metadata.json caused corruption download process (Many thanks Jaruwatana Lotharukpong) biomartr 0.9.2 - minor changes comply CRAN policy regarding Internet access failure -> Instead using warnings error messages, gentle messages allowed used","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"biomartr-090","dir":"Changelog","previous_headings":"","what":"biomartr 0.9.0","title":"biomartr 0.9.0","text":"CRAN release: 2019-05-21 Please aware April 2019, ENSEMBLGENOMES retired (see details ). Hence, biomartr functions updated won’t support data retrieval ENSEMBLGENOMES servers anymore.","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"new-functions-0-9-0","dir":"Changelog","previous_headings":"","what":"New Functions","title":"biomartr 0.9.0","text":"New function clean.retrieval() enables formatting automatic unzipping meta.retrieval output (find : https://docs.ropensci.org/biomartr/articles/MetaGenome_Retrieval.html#un-zipping-downloaded-files) New function getGenomeSet() allows users easily retrieve genomes multiple specified species. addition, genome summary statistics retrieved species stored well provide users insights regarding genome assembly quality species. file can used Supplementary Information file publications facilitate reproducible research. New function getProteomeSet() allows users easily retrieve proteomes multiple specified species New function getCDSSet() allows users easily retrieve coding sequences multiple specified species New function getGFFSet() allows users easily retrieve GFF annotation files multiple specified species New function getRNASet() allows users easily retrieve RNA sequences multiple specified species New function summary_genome() allows users retrieve summary statistics genome assembly file assess influence genome assembly qualities performing comparative genomics tasks New function summary_cds() allows users retrieve summary statistics coding sequence (CDS) file. noticed, many CDS files stored NCBI ENSEMBL databases contain sequences aren’t divisible 3 (division codons). makes difficult divide CDS codons e.g. codon alignments translation protein sequences. addition, CDS files contain significant amount sequences start AUG (start codon). function enables users quantify many sequences exist downloaded CDS file process files according analyses hand.","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"new-features-of-existing-functions-0-9-0","dir":"Changelog","previous_headings":"","what":"New Features of Existing Functions","title":"biomartr 0.9.0","text":"default value argument reference meta.retrieval() changed reference = TRUE reference = FALSE. way genomes (reference non-reference) genomes downloaded default. users seem prefer. getCollection() now also retrieves GTF files db = 'ensembl' getAssemblyStats() now also performs md5 checksum test md5 checksum tests now retrieve new md5checkfile format NCBI RefSeq Genbank getGTF(): users can now specify NCBI Taxonomy ID Accession ID addition scientific name argument ‘organism’ retrieve genome assemblies getGFF(): users can now specify NCBI Taxonomy ID Accession ID ENSEMBL addition scientific name argument ‘organism’ retrieve genome assemblies getMarts() now throw error BioMart servers reached (#36) getGenome() now also stores genome summary statistics (see ?summary_genome()) retrieved species documentation folder provide users insights regarding genome assembly quality get*() functions default argument reference now set reference = TRUE reference = FALSE (= new default) get*() functions now received new argument release allows users retrieve specific release versions genomes, proteomes, etc ENSEMBL ENSEMBLGENOMES get*() functions received two new arguments clean_retrieval gunzip allows users upzip downloaded files directly get*() function call rename file convenient downstream analyses","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"biomartr-080","dir":"Changelog","previous_headings":"","what":"biomartr 0.8.0","title":"biomartr 0.8.0","text":"CRAN release: 2018-06-27","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"new-functions-0-8-0","dir":"Changelog","previous_headings":"","what":"New Functions","title":"biomartr 0.8.0","text":"new function getCollection() retrieval collection: genome sequence, protein sequences, gff files, etc particular species","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"new-functionality-of-existing-functions-0-8-0","dir":"Changelog","previous_headings":"","what":"New Functionality of Existing Functions","title":"biomartr 0.8.0","text":"getProteome() can now retrieve proteomes UniProt database specifying getProteome(db = \"uniprot\"). .genome.available() now prints useful interactive messages searching available organisms .genome.available() can now handle taxids assembly_accession ids addition scientific name specifying argument organism .genome.available() can now check organism availability UniProt database getGenome(): users can now specify NCBI Taxonomy ID Accession ID addition scientific name argument ‘organism’ retrieve genome assemblies getProteome(): users can now specify NCBI Taxonomy ID Accession ID addition scientific name argument ‘organism’ retrieve proteomes getCDS(): users can now specify NCBI Taxonomy ID Accession ID addition scientific name argument ‘organism’ retrieve CDS getRNA(): users can now specify NCBI Taxonomy ID Accession ID addition scientific name argument ‘organism’ retrieve RNAs .genome.available(): argument order changed .genome.available(organism, details, db) .genome.available(db, organism, details) logically consistent get*() functions meta.retrieval receives new argument restart_at_last indicate whether download process re-running meta.retrieval function shall pick last species whether crawl existing files check md5checksum meta.retrieval now generates csv overview file doc folder stores genome version, date, origin, etc information downloaded organisms can directly used Supplementary Data file publications increase computational biological reproducibility genomics study download.database.() can now skip already downloaded files internally removes corrupted files non-matching md5checksum. Re-downloading currupted files performed simply re-running download.database.() command","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"biomartr-070","dir":"Changelog","previous_headings":"","what":"biomartr 0.7.0","title":"biomartr 0.7.0","text":"CRAN release: 2018-01-03","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"function-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Function changes","title":"biomartr 0.7.0","text":"function meta.retrieval() now pick download organism left report species already retrieved get*() functions meta.retrieval() function receive new argument reference allows users retrieve -reference -representative genome versions downloading NCBI RefSeq NCBI Genbank argument order meta.retrieval() changed meta.retrieval(kingdom, group, db, ...) meta.retrieval(db,kingdom, group, ...) make argument order consistent get*() functions argument order getGroups() changed getGroups(kingdom, db) getGroups(db, kingdom) make argument order consistent get*() meta.retrieval() functions","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"new-functions-0-7-0","dir":"Changelog","previous_headings":"","what":"New Functions","title":"biomartr 0.7.0","text":"new internal functions existingOrganisms() existingOrganisms_ensembl() check organisms already downloaded","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"biomartr-052","dir":"Changelog","previous_headings":"","what":"biomartr 0.5.2","title":"biomartr 0.5.2","text":"CRAN release: 2017-09-20","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"bug-fixes-0-5-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"biomartr 0.5.2","text":"fixing bug (https://github.com/ropensci/biomartr/issues/6) caused incorrect filtering condition one entry organism present assemblysummary.txt file NCBI (Thanks @kalmeshv)","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"biomartr-051","dir":"Changelog","previous_headings":"","what":"biomartr 0.5.1","title":"biomartr 0.5.1","text":"CRAN release: 2017-05-28","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"bug-fixes-0-5-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"biomartr 0.5.1","text":"fixing bug exists.ftp.file() getENSEMBLGENOMES.Seq() caused bacterial genome, proteome, etc retrieval fail due wrong construction query ftp request https://github.com/ropensci/biomartr/issues/7 (Many thanks @dbsseven) fix major bug organisms representative genome generate NULL paths subsequently crashed meta.retrieval() function tried print result paths.","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"new-functions-0-5-1","dir":"Changelog","previous_headings":"","what":"New Functions","title":"biomartr 0.5.1","text":"new function getRepeatMasker() retrieval Repeat Masker output files new function getGTF() genome annotation retrieval ensembl ensemblgenomes gtf format (Thanks suggesting Ge Tan) new function getRNA() perform RNA Sequence Retrieval NCBI ENSEMBL databases (Thanks suggesting @carlo-berg) new function read_rna() importing Repeat Masker output files downloaded getRepeatMasker() new function read_rm() importing RNA downloaded getRNA() Biostrings data.table object new helper function custom_download() aims make download process robust stable -> detail, download process now adapting operating system, e.g. using either curl (macOS), wget (Linux), wininet (Windows)","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"function-changes-0-5-1","dir":"Changelog","previous_headings":"","what":"Function changes","title":"biomartr 0.5.1","text":"function name listDatabases() renamed listNCBIDatabases(). biomartr version 0.6.0 function name listDatabases() depreciated meta.retieval() meta.retieval.() now allow bulk retrieval GTF files type = 'ensembl' type = 'esnemblgenomes' via type = \"gtf\". See getGTF() details. meta.retieval() meta.retieval.() now allow bulk retrieval RNA files via type = \"rna\". See getRNA() details. meta.retieval() meta.retieval.() now allow bulk retrieval Repeat Masker output files via type = \"rm\". See getRepeatMasker() details. get*() retrieval functions now skip download particular file already exists specified file path download.database() download.database.() now internally perform md5 check sum checks make sure file download successful download.database() download.database.() now return file paths downloaded file easier use functions constructing pipelines, e.g. download.database() %>% ... download.database.() %>% .... meta.retrieval() meta.retrieval.() now return file paths downloaded file easier use functions constructing pipelines, e.g. meta.retrieval() %>% ... meta.retrieval() %>% .... getGenome(), getProteome(), getCDS(), getRNA(), getGFF(), getAssemblyStats() now internally perform md5 checksum tests make sure files retrieved intact.","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"biomartr-040","dir":"Changelog","previous_headings":"","what":"biomartr 0.4.0","title":"biomartr 0.4.0","text":"CRAN release: 2017-03-14","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"biomartr 0.4.0","text":"fixing major bug https://github.com/ropensci/biomartr/issues/6 caused get*() (genome, proteome, gff, etc.) meta.retrieval*() functions meta retrieval process errored terminated whenever NCBI ENSEMBL didn’t store types sequences particular organism: genome, proteome, cds, etc. fixed now function calls meta.retrieval(kingdom = \"bacteria\", db = \"genbank\", type = \"proteome\") work properly now (Thanks @ARamesh123 making aware bug). Hence, bug affected attempts download proteome sequences e.g. bacteria viruses, NCBI store genome proteome information bacterial viral species.","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"new-functions-0-4-0","dir":"Changelog","previous_headings":"","what":"New Functions","title":"biomartr 0.4.0","text":"new function getAssemblyStats() allows users retrieve genome assembly stats file NCBI RefSeq Genbank, e.g. ftp://ftp.ncbi.nlm.nih.gov/genomes//GCF/000/001/405/GCF_000001405.36_GRCh38.p10/GCF_000001405.36_GRCh38.p10_assembly_stats.txt new function read_assemblystats() allows import genome assembly stats file NCBI RefSeq Genbank retrieved using getAssemblyStats() function","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"function-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Function changes","title":"biomartr 0.4.0","text":"meta.retrieval() meta.retrieval.() can now also download genome assembly stats selected species meta.retrieval() receives new argument group allows users retrieve species belonging subgroup instead entire kingdom. Available groups can retrieved getGroups(). functions getSubgroups() listSubgroups() removed initial functionality merged integrated getGroups() listGroups() listGroups() receives new argument details allows users retrieve organism names belong corresponding subgroups getGroups() now based listGroups() internal function getGENOMESREPORT() now exported available user organism*() functions now also support Ensembl Plants, Ensembl Metazoa, Ensembl Protist, Ensembl Fungi (Thanks pointing Alex Gabel) getMarts() getDatasets() now also support Ensembl Plants, Ensembl Metazoa, Ensembl Protist, Ensembl Fungi (Thanks pointing Alex Gabel)","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"vignette-updates-0-4-0","dir":"Changelog","previous_headings":"","what":"Vignette updates","title":"biomartr 0.4.0","text":"Vignette Meta-Genome Retrieval examples download genomes species belong subgroup","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"biomartr-030","dir":"Changelog","previous_headings":"","what":"biomartr 0.3.0","title":"biomartr 0.3.0","text":"CRAN release: 2017-02-09","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"biomartr 0.3.0","text":"Fixing bug https://github.com/ropensci/biomartr/issues/2 based readr package affected getSummaryFile(), getKingdomAssemblySummary(), getMetaGenomeSummary(), getENSEMBL.Seq() getENSEMBLGENOMES.Seq() functions causing quoted lines assembly_summary.txt omitted reading files. artefact caused e.g. instead information 80,000 Bacteria genomes 40,000 (non-quotations) read (Thanks Xin Wu).","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"biomartr-021","dir":"Changelog","previous_headings":"","what":"biomartr 0.2.1","title":"biomartr 0.2.1","text":"CRAN release: 2016-12-15 version biomartr organism*() functions adapted new ENSEMBL 87 release organism name specification Biomart description column changed scientific name convention mix common name scientific name convention. organism*() functions adapted new ENSEMBL 87 release organism name notation used Biomart description fixing error handling bug caused commands download.database(db = \"nr.27.tar.gz\") execute properly","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"biomartr-020","dir":"Changelog","previous_headings":"","what":"biomartr 0.2.0","title":"biomartr 0.2.0","text":"CRAN release: 2016-11-22 version, biomartr extended now retrieve genome, proteome, CDS, GFF meta-genome data also ENSEMBL ENSEMLGENOMES. Furthermore, NCBI retrieval functions updated new server folder structure standards NCBI.","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"new-functions-0-2-0","dir":"Changelog","previous_headings":"","what":"New Functions","title":"biomartr 0.2.0","text":"new meta-retrieval function meta.retrieval.() allows users download individual genomes kingdoms life one command new metagenome retrieval function getMetaGenomes() allows users retrieve metagenome projects NCBI Genbank new metagenome retrieval function getMetaGenomeAnnotations() allows users retrieve annotation files genomes belonging metagenome project stored NCBI Genbank new retrieval function getGFF() allows users retrieve annotation (*.gff) files specific genomes NCBI ENSEMBL databases new import function read_gff() allowing users import GFF files downloaded getGFF() new internal functions check availability ENSEMBL ENSEMBLGENOMES databases new database retrieval function download.database.() allows users download entire NCBI databases one command new function listMetaGenomes() allowing users list available metagenomes NCBI Genbank new external helper function getSummaryFile() retrieve assembly_summary.txt file NCBI new external helper function getKingdomAssemblySummary() retrieve assembly_summary.txt files NCBI kingdoms combine one big data.frame new function listKingdoms() allows users list number available species per kingdom life new function listGroups() allows users list number available species per group new function listSubgroups() allows users list number available species per subgroup new function getGroups() allows users retrieve available groups kingdom life new function getSubgroups() allows users retrieve available subgroups kingdom life new external helper function getMetaGenomeSummary() retrieve assembly_summary.txt files NCBI genbank metagenomes new internal helper function getENSEMBL.Seq() acting main interface function communicate ENSEMBL database API sequence retrieval new internal helper function getENSEMBLGENOMES.Seq() acting main interface function communicate ENSEMBL database API sequence retrieval new internal helper function getENSEMBL.Annotation() acting main interface function communicate ENSEMBL database API GFF retrieval new internal helper function getENSEMBLGENOMES.Annotation() acting main interface function communicate ENSEMBL database API GFF retrieval new internal helper function get.ensemblgenome.info() retrieve general organism information ENSEMBLGENOMES new internal helper function get.ensembl.info() retrieve general organism information ENSEMBL new internal helper function getGENOMEREPORT() retrieve genome reports file ftp://ftp.ncbi.nlm.nih.gov/genomes/GENOME_REPORTS/overview.txt new internal helper function connected..internet() enabling internet connection check","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"function-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Function changes","title":"biomartr 0.2.0","text":"functions getGenome(), getProteome(), getCDS() now can also addition NCBI retrieve genomes, proteomes CDS ENSEMBL ENSEMLGENOMES functions getGenome(), getProteome(), getCDS() completely re-written now use assembly_summary.txt files provided NCBI retrieve download path corresponding genome. Furthermore, functions now lost kingdom argument. Users now need specify organism name kingdom anymore. Furthermore, get* functions now return path downloaded genome path can used input read_* functions. download_databases() renamed download.databases() consistent function notation argument db_format removed listDatabases() download.database() misleading command listDatabases(\"\") now returns available NCBI databases can retrieved download.database() download.database() now internally checks input database specified user actually available NCBI servers documentary file generated getGenome(), getProteome(), getCDS() now extended store details downloaded genome argument database .genome.available() listGenomes() renamed db consistent sequence retrieval functions .genome.available() now also checks availability organisms ENSEMBL. See db = \"ensembl\" argument db_name listDatabases() renamed db consistent notation functions argument name download.database() renamed db consistent notation functions getKingdoms() now retrieves also kingdom information ENSEMBL ENSEMBLGENOMES getKingdoms() received new argument db specify database (e.g. refseq, genbank, ensembl ensemblgenomes) kingdom information shall retrieved getKingdoms(db = \"refseq\") received one member: \"viral\", allowing genome retrieval viruses argument .folder meta.retrieval() renamed path consistent retrieval functions read_* functions now received new argument obj.type allowing users choose storing input genomes Biostrings object data.table object read_* functions now format = \"fasta\" default kingdom argument listGenomes() function renamed type, now allowing users specify specify kingdoms, also groups subgroups. Use: listGenomes(type = \"kingdom\") listGenomes(type = \"group\") listGenomes(type = \"subgroup\") listGenomes() function receives new argument subset specify subset selected type argument. E.g. subset = \"Eukaryota\" specifying type = \"kingdom\"","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"vignette-updates-0-2-0","dir":"Changelog","previous_headings":"","what":"Vignette updates","title":"biomartr 0.2.0","text":"new Vignette Meta-Genome Retrieval Update examples extend Introduction Vignette Update examples extend Database Retrieval Vignette Update examples extend Sequence Retrieval Vignette Update examples extend Functional Annotation Vignette","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"biomartr-010","dir":"Changelog","previous_headings":"","what":"biomartr 0.1.0","title":"biomartr 0.1.0","text":"CRAN release: 2016-08-07 fixing parsing error file ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/assembly_summary.txt problem comment lines introduced columns couldn’t parsed correctly anymore. caused genomes, proteomes, CDS files downloaded properly. fixed now. genomes, proteome, CDS well meta-genomes can now retrieved RefSeq Genbank (RefSeq); getCDS() genebank access, becasue genbank provide CDS sequences adding new function meta.retrieval() mass retrieve genomes entire kingdoms life fixed major bug organismBM() causing function fail. failure function affected downstream organism*() functions. Bug now fixed everything works properly updated Vignettes","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"biomartr-003","dir":"Changelog","previous_headings":"","what":"biomartr 0.0.3","title":"biomartr 0.0.3","text":"CRAN release: 2016-03-02 updating unit tests new API fixing API problems caused BioMart related functions fail fixing retrieval problems getCDS(), getProteome(), getGenome() listDatabases() function now new option db_name = \"\" allowing users list available databases stored NCBI","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"vignettes-0-0-3","dir":"Changelog","previous_headings":"","what":"Vignettes","title":"biomartr 0.0.3","text":"adding new vignette: Database Retrieval update vignettes: Phylotranscriptomics, Sequence Retrieval, Functional Annotation","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"biomartr-002","dir":"Changelog","previous_headings":"","what":"biomartr 0.0.2","title":"biomartr 0.0.2","text":"CRAN release: 2015-08-07","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"vignettes-0-0-2","dir":"Changelog","previous_headings":"","what":"Vignettes","title":"biomartr 0.0.2","text":"adding vignettes: Introduction, Functional Annotation, Phylotranscriptomics, Sequence Retrieval","code":""},{"path":"https://docs.ropensci.org/biomartr/news/index.html","id":"biomartr-001","dir":"Changelog","previous_headings":"","what":"biomartr 0.0.1","title":"biomartr 0.0.1","text":"CRAN release: 2015-07-22 Release Version","code":""}]
